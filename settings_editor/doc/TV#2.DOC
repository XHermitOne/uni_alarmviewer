────────────────────────────────────────────────────────────────────────
       B.Pascal 7 & Objects/TV#2        - 1 -

      ГЛАВА 19. Справочник по системе Turbo Vision.................11
      Процедура Abstract                                Objects....11
      Переменная Application                            App........11
      Переменная AppPalette                             App........11
      Константы apXXXX                                  App........12
      Процедура AssignDevice                            TextView...12
      Константы bfXXXX                                  Dialogs....13
      Переменная ButtonCount                            Drivers....14
      Константы cdXXXX                                  StdDlg.....14
      Константы cfXXXX                                  Dialogs....15
      Переменная CheckSnow                              Drivers....15
      Процедура ClearHistory                            HistList...16
      Процедура ClearScreen                             Drivers....16
      Переменная Clipboard                              Editors....16
      Константы cmXXXX.............................................17
      Переменная ColorIndexes                           ColorSel...24
      Функция ColorGroup                                ColorSel...25
      Функция ColorItem                                 ColorSel...25
      Константы coXXXX                                  Drivers....26
      Функция: CStrLen                                  Drivers....26
      Переменная CtrlBreakHit                           Drivers....27
      Функция: CtrlToArrow                              Drivers....27
      Переменная CursorLines                            Drivers....28
      Функция: DefEditorDialog                          Editors....28
      Переменная DeskTop                                App........28
      Функция DesktopColorItems                         ColorSel...29
      Функция DialogColorItems                          ColorSel...29
      Процедура DisposeBuffer                           Memory.....29
      Процедура DisposeCache                            Memory.....29
      Процедура DisposeMenu                             Menus......30
      Процедура DisposeNode                             Outline....30
      Процедура DisposeStr                              Objects....30
      Константы dmXXXX                                  Views......31
      Процедура DoneDosMem                              Memory.....32
      Процедура DoneEvents                              Drivers....33
      Процедура DoneHistory                             Drivers....33
      Процедура DoneMemory                              Memory.....33
      Процедура DoneSysError                            Drivers....33
      Процедура DoneVideo                               Drivers....33
      Переменная DoubleDelay                            Drivers....34
      Константы dpXXXX                                  Dialogs....35
      Переменная EditorDialog                           Editors....35
      Переменная EditorFlags                            Editors....36
      Константы edXXXX                                  Editors....36
      Константы efXXXX                                  Editors....38
      Переменная EmsCurHandle                           Objects....38
      Переменная EmsCurPage                             Objects....39
      Переменная ErrorAttr                              Views......39
      Константы evXXXX                                  Drivers....39
      Константы fdXXXX                                  StdDlg.....42
      Переменная FindStr                                Editors....43
      Тип FNameStr                                      Objects....43
      Переменная FocusedEvents                          Views......43

       B.Pascal 7 & Objects/TV#2        - 2 -

      Процедура FormatStr                               Drivers....44
      Процедура FreeBufMem                              Memory.....46
      Функция: GetAltChar                               Drivers....46
      Функция: GetAltCode                               Drivers....46
      Функция: GetBufferSize                            Memory.....47
      Процедура GetBufMem                               Memory.....47
      Процедура GetKeyEvent                             Drivers....47
      Процедура GetMouseEvent                           Drivers....47
      Константы gfXXXX                                  Views......49
      Константы hcXXXX                                  App........50
      Константы hcXXXX                                  Views......51
      Процедура HideMouse                               Drivers....53
      Переменная HiResScreen                            Drivers....53
      Процедура HistoryAdd                              HistList...53
      Переменная HistoryBlock                           HistList...53
      Функция HistoryCount                              HistList...54
      Переменная HistorySize                            HistList...54
      Функция HistoryStr                                HistList...54
      Переменная HistoryUsed                            HistList...54
      Процедура InitDosMem                              Memory.....54
      Процедура InitEvents                              Drivers....55
      Процедура InitHistory                             HistList...55
      Процедура InitMemory                              Memory.....55
      Процедура InitSysError                            Drivers....55
      Процедура InitVideo                               Drivers....56
      Функция InputBox                                  MsgBox.....56
      Функция InputBoxRect                              MsgBox.....56
      Константы kbXXXX                                  Drivers....57
      Процедура LoadHistory                             HistList...60
      Процедура LoadIndexes                             ColorSel...61
      Функция: LongDiv                                  Objects....61
      Функция: LongMul                                  Objects....61
      Тип LongRec                                       Objects....61
      Функция: LowMemory                                Memory.....62
      Переменная LowMemSize                             Memory.....62
      Переменная MaxBufMem                              Memory.....62
      Переменная MaxCollectionSize                      Objects....62
      Переменная MaxHeapSize                            Memory.....63
      Переменная MaxLineLength                          Editors....63
      Константа MaxViewWidth                            Views......63
      Константы mbXXXX                                  Drivers....63
      Функция: MemAlloc                                 Memory.....64
      Функция: MemAllocSeg                              Memory.....64
      Переменная MenuBar                                App........64
      Функция MenuColorItems                            ColorSel...64
      Функция: Message                                  Views......65
      Функция: MessageBox                               MsgBox.....65
      Функция: MessageBoxRect                           MsgBox.....66
      Константы mfXXXX                                  MsgBox.....67
      Переменная MinWinSize                             Views......68
      Переменная MouseButtons                           Drivers....68
      Переменная MouseEvents                            Drivers....69
      Переменная MouseIntFlag                           Drivers....69

       B.Pascal 7 & Objects/TV#2        - 3 -

      Переменная MouseReverse                           Drivers....69
      Переменная MouseWhere                             Drivers....69
      Процедура MoveBuf                                 Objects....69
      Процедура MoveChar                                Drivers....70
      Процедура MoveCStr                                Drivers....70
      Процедура MoveStr                                 Drivers....70
      Процедура NewBuffer                               Memory.....71
      Процедура NewCache                                Memory.....71
      Функция: NewItem                                  Menus......72
      Функция: NewLine                                  Menus......72
      Функция: NewMenu                                  Menus......72
      Функция: NewNode                                  OutLine....72
      Функция: NewSItem                                 Dialogs....73
      Функция: NewStatusDef                             Menus......73
      Функция: NewStatusKey                             Menus......73
      Функция: NewStr                                   Objects....74
      Функция: NewSubMenu                               Menus......74
      Константы ofXXXX                                  Views......75
      Константы ovXXXX                                  Outline....77
      Переменная PositionalEvents                       Views......78
      Процедура PrintStr                                Drivers....78
      Тип PString                                       Objects....79
      Тип PtrRec                                        Objects....79
      Процедура RegisterColorSel                        ColorSel...79
      Процедура RegisterDialogs                         Dialogs....79
      Процедура RegisterEditors                         Editors....80
      Процедура RegisterStdDlg                          StdDlg.....80
      Процедура RegisterType                            Objects....80
      Процедура RegisterValidate                        Validate...81
      Переменная RepeatDelay                            Drivers....81
      Переменная ReplaceStr                             Editors....81
      Переменная SaveCtrlBreak                          Drivers....81
      Константы sbXXXX                                  Views......82
      Переменная ScreenBuffer                           Drivers....84
      Переменная ScreenHeight                           Drivers....84
      Переменная ScreenMode                             Drivers....84
      Переменная ScreenWidth                            Drivers....84
      Тип SelectMode                                    Views......85
      Функция SetBufferSize                             Memory.....85
      Процедура SetMemTop                               Memory.....85
      Процедура SetVideoMode                            Drivers....86
      Константы sfXXXX                                  Views......86
      Переменная ShadowAttr                             Views......88
      Переменная ShadowSize                             Views......89
      Переменная ShowMarkers                            Drivers....89
      Процедура ShowMouse                               Drivers....89
      Константы smXXXX                                  Drivers....90
      Переменная SpecialChars                           Views......90
      Константы stXXXX                                  Objects....91
      Переменная StartupMode                            Drivers....92
      Переменная StatusLine                             App........92
      Функция StdEditMenuItems                          App........92
      Функция StdEditorDialog                           Editors....93

       B.Pascal 7 & Objects/TV#2        - 4 -

      Функция StdFileMenuItems                           App.......93
      Функция StdStatusKeys                              App.......93
      Функция StdWindowMenuItems                             App...94
      Переменная StreamError Objects...............................94
      Процедура StoreHistory                            HistList...94
      Процедура StoreIndexes                            ColorSel...94
      Переменная SysColorAttr                           Drivers....95
      Переменная SysErrActive                           Drivers....95
      Переменная SysErrorFunc                           Drivers....95
      Переменная SysMonoAttr                            Drivers....97
      Функция: SystemError                              Drivers....98
      TApplication                                      App.......100
      Методы......................................................100
      TBackground                                         App.....103
      Поля........................................................103
      Методы......................................................103
      Палитра.....................................................104
      TBufStream                                         Objects..105
      Поля........................................................105
      Методы......................................................105
      TButton                                           Dialogs...109
      Поля........................................................109
      Методы......................................................110
      Палитра.....................................................114
      Тип TByteArray                                    Objects...114
      Тип TCharSet                                      Objects...114
      Объекты TChDirDialog                              StdDialog.115
      Поля........................................................115
      Методы......................................................115
      TCheckBoxes                                       Dialogs...118
      Методы......................................................118
      Палитра.....................................................119
      TCluster                                          Dialogs...120
      Поля........................................................120
      Методы......................................................121
      Палитра.....................................................125
      TCollection                                       Objects...127
      Поля........................................................127
      Методы......................................................128
      TColorDialog                                      ColorSel..136
      Поля........................................................136
      Методы......................................................137
      TColorDisplay                                     ColorSel..140
      Тип TColorGroup                                   ColorSel..140
      Объект TColorGroupList                            ColorSel..141
      Тип TColorIndex                                   ColorSel..141
      Тип TColorItem                                    ColorSel..141
      Объект TColorItemList                             ColorSel..143
      Тип TColorSel                                     ColorSel..143
      Объект TColorSelector                             ColorSel..143
      Тип TCommandSet                                   Views.....143
      TDeskTop                                             App....145
      Поля

       B.Pascal 7 & Objects/TV#2        - 5 -

       Методы.....................................................145
      Методы......................................................145
      TDialog                                           Dialogs...148
      Методы......................................................148
      Палитра.....................................................150
      Объект TDirCollection                             StdDlg....153
      Тип TDirEntry                                     StdDlg....153
      Объект TDirListBox                                StdDlg....153
      TDosStream                                         Objects..153
      Поля........................................................153
      Методы......................................................154
      Тип TDrawBuffer                                   Views.....155
      Тип TEditBuffer                                   Editors...156
      Объект TEditor                                    Editors...156
      Поля........................................................156
      Методы......................................................160
      Палитра.....................................................166
      Тип TEditorDialog                                 Editors...167
      Объект TEditWindow                                Editors...170
      Поле........................................................170
      Методы......................................................170
      TEmsStream                                        Objects...172
      Поля........................................................172
      Методы......................................................172
      Тип TEvent                                        Drivers...175
      Объект TFileCollection                            StdDlg....176
      Объект TFileDialog                                StdDlg....176
      Поля........................................................176
      Методы......................................................176
      TFileEditor                                       Editors...180
      Поле........................................................180
      Методы......................................................180
      TFileInfoPane                                     StdDlg....183
      TFileInputLine                                    StdDlg....183
      TFileList                                         StdDlg....183
      TFilterValidator                                  Validate..183
      Поле........................................................183
      Методы......................................................184
      Тип TFindDialogRec                                Editors...186
      TFrame                                              Views...186
      Методы......................................................186
      Палитра.....................................................187
      TGroup                                              Views...189
      Поля........................................................189
      Методы......................................................190
      Метод Init..................................................190
      Load........................................................191
      Done........................................................191
      Awaken......................................................191
      ChangeBounds................................................191
      DataSize....................................................192
      Delete......................................................192

       B.Pascal 7 & Objects/TV#2        - 6 -

      Draw........................................................192
      EndModal....................................................192
      EventError..................................................192
      ExecView....................................................193
      Execute.....................................................193
      First.......................................................194
      FirstThat...................................................194
      FocusNext...................................................195
      ForEach.....................................................195
      GetData.....................................................196
      GetHelpCtx..................................................196
      GetSubViewPtr...............................................196
      HandleEvent.................................................196
      Insert......................................................197
      InsertBefore................................................197
      Lock........................................................198
      PutSubViewPtr...............................................198
      Redraw......................................................198
      SelectNext..................................................199
      SetData.....................................................199
      SetState....................................................199
      Store.......................................................199
      Unlock......................................................200
      Valid.......................................................200
      THistory                                           Dialogs..201
      Поля........................................................201
      Методы......................................................201
      Палитра.....................................................203
      THistoryViewer                                     Dialogs..204
      THistoryWindow                                     Dialogs..204
      TIndicator                                        Editors...204
      Поля........................................................204
      Методы......................................................205
      Палитра.....................................................206
      TInputLine                                         Dialogs..207
      Поля........................................................207
      Методы......................................................208
      Палитра.....................................................212
      Тип TItemList                                     Objects...213
      TLabel                                             Dialogs..213
      Поля........................................................213
      Методы......................................................213
      Палитра.....................................................215
      TListBox                                          Dialogs...216
      Поле........................................................216
      Методы......................................................216
      Палитра.....................................................218
      TListViewer                                          Views..220
      Поля........................................................220
      Методы......................................................221
      Палитра.....................................................225
      TLookupValidator                                  Validate..226
      Методы......................................................226

       B.Pascal 7 & Objects/TV#2        - 7 -

      Объект TMemo                                      Editors...227
      Методы......................................................227
      Палитра.....................................................228
      Тип TMemoData                                     Editors...229
      Тип TMenu                                         Menus.....229
      TMenuBar                                            Menu....230
      Методы......................................................230
      Палитра.....................................................231
      TMenuBox                                              Menu..232
      Методы......................................................232
      Палитра.....................................................233
      Тип TMenuItem                                     Menus.....234
      Тип TMenuStr                                      Menus.....234
      TMenuView                                             Menu..235
      Поля........................................................235
      Методы......................................................235
      Палитра.....................................................238
      Объект TMonoSelector                              ColorSel..239
      TMultiCheckBoxes                                  Dialogs...239
      Поля........................................................239
      Методы......................................................239
      Тип TNode                                         Outline...242
      TObject                                            Objects..242
      Методы......................................................242
      TOutLine                                          OutLine...244
      Поле........................................................244
      Методы......................................................244
      TOutlineViewer                                    Outline...246
      Поле........................................................246
      Методы......................................................246
      Палитра.....................................................254
      Тип TPalette                                      Views.....255
      TParamText                                         Dialogs..255
      Поля........................................................255
      Методы......................................................255
      Палитра.....................................................257
      TPoint                                            Objects...258
      Поля........................................................258
      Тип TPicResult                                    Validate..259
      TProgram                                              App...259
      Методы......................................................259
      Палитры.....................................................266
      TPXPictureValidator                               Validate..275
      Поле........................................................275
      Методы......................................................275
      TRadioButtons                                      Dialogs..278
      Методы......................................................278
      Палитра.....................................................279
      TRangeValidator                                   Validate..280
      Поля........................................................280
      Методы......................................................280
      TRect                                             Objects...283
      Поля........................................................283

       B.Pascal 7 & Objects/TV#2        - 8 -

      Методы......................................................283
      Тип TReplaceDialogRec                             Editors...285
      TResourceCollection                                Objects..285
      TResourceFile                                      Objects..285
      Поля........................................................286
      Методы......................................................286
      TScrollBar                                           Views..289
      Поля........................................................289
      Методы......................................................290
      Палитра.....................................................293
      Тип TScrollChars                                  Views.....294
      TScroller                                            Views..294
      Поля........................................................294
      Методы......................................................295
      Палитра.....................................................297
      Тип SearchRec                                     StdDlg....298
      Тип TSItem                                        Dialogs...298
      TSortedCollection                                  Objects..298
      Поле........................................................299
      Методы......................................................299
      Объект TSortedListBox                             StdDlg....301
      Поля........................................................301
      Методы......................................................302
      TStaticText                                        Dialogs..304
      Поля........................................................304
      Методы......................................................304
      Палитра.....................................................305
      Тип TStatusDef                                    Menus.....306
      Тип TStatusItem                                   Menus.....306
      TStatusLine                                         Menus...307
      Поля........................................................307
      Методы......................................................308
      Палитра.....................................................310
      TStream                                             Objects.311
      Поля........................................................311
      Методы......................................................311
      Тип TStreamRec                                    Objects...316
      Тип TStrIndex                                     Objects...317
      Тип TStrIndexRec                                  Objects...317
      TStringCollection                                  Objects..317
      Методы......................................................317
      TStringList                                        Objects..318
      Методы......................................................319
      StrListMaker                                      Objects...319
      Методы......................................................320
      Тип TSysErrorFunc                                 Drivers...321
      TStringLookupValidator                            Validate..321
      Поле........................................................321
      Методы......................................................322
      TTerminal                                         TextView..323
      Поля........................................................323
      Методы......................................................324
      Палитра.....................................................326

       B.Pascal 7 & Objects/TV#2        - 9 -

      Тип TTerminalBuffer                               TextView..326
      TTextDevice                                        TextView.327
      Методы......................................................327
      Палитра.....................................................327
      Тип TTitleStr                                     Views.....328
      TValidator                                        Validate..328
      Поля........................................................328
      Методы......................................................328
      Тип TVideoBuf                                     Views.....332
      TView                                                Views..332
      Поля........................................................332
      Методы......................................................336
      Load........................................................336
      Done........................................................337
      Awaken......................................................337
      BlоckCursor.................................................337
      CalcBounds..................................................338
      ChangeBounds................................................338
      ClearEvent..................................................338
      CommandEnabled..............................................339
      DataSize....................................................339
      DisableCommands.............................................339
      DragView....................................................339
      Draw........................................................340
      DrawView....................................................340
      EnableCommands..............................................340
      EndModal....................................................340
      EventAvail..................................................341
      Execute.....................................................341
      Exposed.....................................................341
      Focus.......................................................341
      GetBounds...................................................342
      GetClipRect.................................................342
      GetColor....................................................342
      GetCommands.................................................342
      GetData.....................................................342
      GetEvent....................................................343
      GetExtent...................................................343
      GetHelpCtx..................................................343
      GetPalette..................................................343
      GetPeerViewPtr..............................................344
      GetState....................................................344
      GrowTo......................................................344
      HandleEvent.................................................344
      Hide........................................................345
      HideCursor..................................................345
      KeyEvent....................................................345
      Locate......................................................345
      MakeFirst...................................................346
      MakeGlobal..................................................346
      MakeLocal...................................................346
      MouseEvent..................................................346
      MouseInView.................................................347

       B.Pascal 7 & Objects/TV#2       - 10 -

      MoveTo......................................................347
      NextView....................................................347
      NormalCursor................................................347
      Prev........................................................348
      PrevView....................................................348
      PutEvent....................................................348
      PutInFrontOf................................................349
      PutPeerViewPtr..............................................349
      Select......................................................349
      SetBounds...................................................349
      SetCmdState.................................................350
      SetCommands.................................................350
      SetCursor...................................................350
      SetData.....................................................350
      SetState....................................................351
      Show........................................................352
      ShowCursor..................................................352
      SizeLimits..................................................352
      Store.......................................................352
      TopView.....................................................353
      Valid.......................................................353
      WriteBuf....................................................353
      WriteChar...................................................354
      WriteLine...................................................354
      WriteStr....................................................354
      Тип TVTransfer                                    Validate..355
      Тип TWildStr                                      StdDlg....355
      TWindow                                             Views...356
      Поля........................................................356
      Методы......................................................357
      Палитра.....................................................361
      Тип TWordArray                                    Objects...362
      Константа vmtHeaderSize                           Objects...362
      Константы voXXXX                                  Validate..362
      Константы vsXXXX                                  Validate..363
      Константы wfXXXX                                  Views.....365
      Функция WindowColorItems                          ColorSel..366
      Константa wnNoNumber                              Views.....366
      Переменная WordChars                              Editors...366
      Тип WordRec                                       Objects...367
      Константы wpXXXX                                  Views.....367

         B.Pascal 7 & Objects/TV#2       - 11 -

                     ГЛАВА 19. Справочник по системе Turbo Vision
        -----------------------------------------------------------------

             В  настоящей  главе  описываются  все элементы Turbo Vision,
        включая  типы  объектов,  процедуры,  функции, типы, переменные и
        константы. Все они приводятся в алфавитном порядке.
             Целью  настоящей  главы  не  является обучение использованию
        соответствующих элементов - это всего лишь справочник. Для лучшего
        обучения  их  использованию  следует обратиться к соответствующим
        главам Части 2, "Использование Turbo Vision".
             При  поиске  информации о конкретном объекте следует иметь в
        виду, что многие свойства объекта из иерархии объектов наследуют-
        ся  от  порождающего  объекта.  Вместо  бесконечного дублирования
        информации настоящая глава лишь описывает поля и методы, являющи-
        еся новыми или измененными для данного элемента. Просмотрев диаг-
        рамму наследования для объекта, легко увидеть, каким из предшест-
        венников порождено данное поле, и какие объекты вводят или перео-
        пределяют его методы.

─────────────────────────────────────────────────────────────────────────
         Процедура Abstract                                     Objects
        -----------------------------------------------------------------
             Описание: procedure Abstract;

             Функция:  Вызов этой процедуры завершает программу с ошибкой
        этапа  выполнения  211. При реализации абстрактных типов объектов
        используйте  вызовы  Abstract  в тех виртуальных методах, которые
        должны  быть переопределены в порожденных типах. Это предотвратит
        любые  попытки использования экземпляров абстрактного типа объек-
        та.

             См. также: раздел "Абстрактные методы" в Главе 7.


         Переменная Application                                 App
        -----------------------------------------------------------------
             Описание: Application: PApplicaton = nil;

             Функция:  На  протяжение  всего времени исполнения программы
        для Turbo Vision Application указывает на объект программы. Конс-
        труктор  Init из TProgram устанавливает значение Application рав-
        ным  @Self в начале программы, а деструктор Done сбрасывает его в
        nil. По умолчанию конструктор TAplication вызывает TProgram.Init,
        поэтому все объекты программ наследуют это поведение.

             См. также: TProgram.Init


         Переменная AppPalette                                  App
        -----------------------------------------------------------------
             Описание: AppPalette: Integer = apColor;

         B.Pascal 7 & Objects/TV#2       - 12 -


             Функция:  Выбирает одну из трех доступных в программе палитр
        (apColor,  apBlackWhite  или  apMonochrome).  Метод InitScreen из
        TProgram устанавливает значение AppPalette в зависимости от теку-
        щего режима экрана. Метод GetPalette проверяет значение AppPalet-
        te  и определяет, какую из трех палитр следует вернуть. Для изме-
        нения существующего по умолчанию выбора палитры можно переопреде-
        лить значение TProgram.InitScreen.

             См. также:  TProgram.GetPalette,  TProgram.InitScreen, конс-
        танты apXXXX


         Константы apXXXX                                       App
        -----------------------------------------------------------------

             Значения: Определены следующие значения констант палитры:

                        Таблица 19.1. Константы палитры.

             ------------------------------------------------------------
             Константа     Значение  Назначение
             ------------------------------------------------------------
             apColor          0      Палитра для цветного монитора

             apBlackWhite     1      Палитра для жидкокристаллического
                                     монитора

             apMonochrome     2      Палитра для монохромного монитора
             ------------------------------------------------------------

             Функция:  Константы,  начинающиеся  с  ap,  используются для
        указания  того, с какой из трех стандартных палитр будет работать
        программа на Turbo Vision для цветного,  черно-белого и монохром-
        ного дисплеев.


         Процедура AssignDevice                                 TextView
        -----------------------------------------------------------------

             Описание: procedure  AssignDevice(var T: Text;
                                                Screen: PTextDevice);

             Функция:  Связывает  текстовый файл с текстовым устройством.
        AssignDevice  работает аналогично стандартной процедуре Assign за
        исключением  того,  что  не  указывается имя файла. Вместо этого,
        текстовый  файл  связывается  с  TTextDevice,  которая передается
        Screen   (запоминая  Screen  в  первых  4  байтах поля UserData в
        TextRec(T).


         B.Pascal 7 & Objects/TV#2       - 13 -

             Последующие операции ввода-вывода для текстового файла будут
        читать и писать на устройство Screen с использованием виртуальных
        методов  StrRead и StrWrite. Поскольку TTextDevice- это абстракт-
        ный  тип,  то  параметр  Screen должен указывать на копию потомка
        TTextDevice, такую, как TTerminal, которая реализует все функцио-
        нальные возможности прокручиваемого отображаемого элемента.

             См. также:  TTextDevice,  TextRec (в Справочнике программис-
        та.)


         Константы bfXXXX                                       Dialogs
        -----------------------------------------------------------------

             Определены следующие значения флага "кнопки":

                  Рис. 19.1 Значения флага "кнопки"

             ╔════╤════╤════╤════╤════╤════╤════╤════╕
             ║msb │    │    │    │    │    │    │1sb │
             ╚════╧════╧════╧════╧═╤══╧═╤══╧═╤══╧═╤══╛
                                   │    │    │    └────bfDefault   = $01
                                   │    │    └─────────bfLeftJust  = $02
                                   │    └──────────────bfBroadcast = $04
                                   └───────────────────bfGrabFocus = $08



             Таблица 19.2. Значения флага кнопки

             ------------------------------------------------------------
             Константа     Значение  Назначение
             ------------------------------------------------------------
             bfNormal        $00     Обычная "кнопка"

             bfDefault       $01     "Кнопка", используемая по умолчанию

             bfLeftJust      $02     Метка "кнопки" выравнена по  левой
                                     границе

             bfBroadcast     $04     При нажатии "кнопка" уведомляет
                                     владельца

             bfGrabFocus     $08     При нажатии кнопки мыши "кнопка"
                                     получает фокус ввода
             ------------------------------------------------------------

             Функция: Объекты кнопок имеют битовое поле Flags, содержащее
        комбинацию  констант  bfXXXX, определяющих стиль кнопки. bfNormal
        указывает  на  обычную  (не  назначенную  по умолчанию) "кнопку".
        bfDefault  указывает на тот факт, что кнопка будет кнопкой, опре-
        деленной по умолчанию. Вы должны сами следить за тем, чтобы кноп-
        ка  была  единственной определенной по умолчанию в группе кнопок.

         B.Pascal 7 & Objects/TV#2       - 14 -

        Значение  bfLeftJust  влияет  на  положение  отображаемого внутри
        кнопки  текста:  если  оно  не  задано, то текст располагается по
        центру; если задано, то метка выравнивается по левой границе.

             bfBroadcast  управляет способом, которым объект кнопки гене-
        рирует события при ее нажатии:

             -Если  значение не задано (что установлено по умолчанию), то
        при  нажатии  кнопки для генерации события команды она использует
        PutEvent:

                  E.What := evCommand;
                  E.Command := Command;
                  E.InfoPtr := @Self;
                  PutEvent (E);

             -Если значение bfBroadcast задано, то при нажатии кнопки для
        посылки сообщения владельцу используется Message:

                  Message (Owner, evBroadcast, Command, @Self);

             Установка bfGrabFocus приводит к тому, что при выборе кнопки
        с помощью мыши к ней переходит фокус ввода.

             См. также:  TButton.Flags, TButton.MakeDefault, TButton.Draw


         Переменная ButtonCount                                 Drivers
        -----------------------------------------------------------------

             Описание:  ButtonCount: Byte = 0;

             Функция: ButtonCount хранит число кнопок "мыши" или значение
        0,  если "мышь" не установлена. Эту переменную можно использовать
        для определения того,  доступна ли поддержка "мыши". Значение ус-
        танавливается  в инициализационном коде в Drivers и не должно из-
        меняться.


         Константы cdXXXX                                       StdDlg
        -----------------------------------------------------------------

             ------------------------------------------------------------
             Константа     Значение  Назначение
             ------------------------------------------------------------
             cdNormal        $0000   Создавать диалоговое окно обычным
                                     образом, включая загрузку каталога

             cdNoLoadDir     $0001   Инициализировать диалоговое окно без
                                     загрузки    содержимого    каталога.
                                     Используется при создании диалоговых
                                     окон, хранящихся в потоке.


         B.Pascal 7 & Objects/TV#2       - 15 -

             cdHelpButton    $0002   Поместить в диалоговое окно кнопку
                                     подсказки.
             ------------------------------------------------------------

             Функция: Эти  константы  определяют  величины,  передаваемые
        конструктору Init диалогового окна изменения каталога в параметре
        AOptions.

             См. также: объект TChDirDialog


         Константы cfXXXX                                       Dialogs
        -----------------------------------------------------------------

             ------------------------------------------------------------
             Константа     Значение  Назначение
             ------------------------------------------------------------
             cfOneBit        $0101   1 бит на кнопку с независимой
                                     фиксацией

             cfTwoBits       $0203   2 бита на кнопку с независимой
                                     фиксацией

             cfFourBits      $040F   4 бита на кнопку с независимой
                                     фиксацией

             cfEightBits     $08FF   8 бит на кнопку с независимой
                                     фиксацией
             ------------------------------------------------------------

             Функция:  Многопозиционные  кнопки  с  независимой фиксацией
        используют константы cfXXXX для описания того, сколько бит в поле
        Value представляют состояние каждой кнопки с независимой фиксаци-
        ей. Старшее слово константы показывает количество бит, используе-
        мых каждой кнопкой с независимой фиксацией, а младшее слово соде-
        ржит битовую маску для чтения этих бит.

             Например,  значение  cfTwoBits  указывает  на  то, что Value
        использует для каждой кнопки два бита (что делает возможным испо-
        льзование  в  одном  кластере  16  кнопок), и маскирует каждое из
        значений кнопки с независимой фиксацией маской $03.

             См. также: объект TMultiCheckBoxes


         Переменная CheckSnow                                   Drivers
        -----------------------------------------------------------------

             Описание: CheckSnow: Boolean;

             Функция: CheckSnow   выполняет  функцию  одноименного  флага
        стандартного модуля Турбо Паскаля - Crt.  Проверка помех  в  виде
        "снега",  которая замедляет вывод на экран,  требуется только для

         B.Pascal 7 & Objects/TV#2       - 16 -

        некоторых старых адаптеров CGA.  InitVideo устанавливает значение
        CheckSnow  равным True только в том случае,  если он обнаруживает
        адаптер CGA. Для более быстрого ввода/вывода на экран можно уста-
        новить значение False в любой момент после вызова InitVideo.

             См. также: InitVideo


         Процедура ClearHistory                                 HistList
        -----------------------------------------------------------------

             Описание: procedure ClearHistory;

             Функция: Удаляет все строки из всех списков протокола.


         Процедура ClearScreen                                  Drivers
        -----------------------------------------------------------------

             Описание: procedure ClearScreen;

             Функция: Очищает экран. ClearScreen предполагает, что внача-
        ле  был  вызван  InitVideo. Как указано в описании InitVideo, Вам
        редко потребуется использовать эту процедуру.

             См. также: InitVideo


         Переменная Clipboard                                   Editors
        -----------------------------------------------------------------

             Описание: Clipboard: PEditor = nil;

             Функция: Переменная Clipboard указывает на объект редактора,
        используемый для передачи данных между другими объектами редакто-
        ра.  Редактор системного буфера не должен поддерживать отмену из-
        менений (то есть поле CanUndo должно быть равно False).



         B.Pascal 7 & Objects/TV#2       - 17 -

         Константы cmXXXX
        -----------------------------------------------------------------

             Функция: Эти константы представляют предопределенные команды
        Turbo  Vision.  Они  передаются  в поле Command событий evMessage
        (evCommand и evBroadcast) и заставляют методы HandleEvent станда-
        ртных объектов Turbo Vision выполнять различные задачи.

             Turbo Vision  резервирует  значения констант от 0 до 99 и от
        256 до 999 для своих целей. Обработчики событий стандартных объе-
        ктов Turbo  Vision  реагируют  на эти предопределенные константы.
        Программисты могут определить свои собственные константы в диапа-
        зонах от 100 до 255 и от 1,  000 до 65, 535 без конфликтов с пре-
        допределенными командами.

             Значения:  Следующие стандартные команды определены в модуле
        Views и используются всеми отображаемыми элементами:

                     Таблица 19.3. Коды стандартных команд.

        -----------------------------------------------------------------
        Команда Значение Назначение
        -----------------------------------------------------------------

         cmValid   0     Передается в  поле Valid отображаемого элемента
                         для проверки вновь созданных копий  отображаемых
                         элементов.

         cmQuit    1     Завершает программу, вызывая метод EndModal
                         объекта  прикладной  программы,  передавая   ему
                         cmQuit).

         cmError   2     Не обрабатывается никаким  объектом.  Может
                         использоваться для представления нереализованных
                         или неподдерживаемых команд.

         cmMenu    3     Заставляет отображаемый элемент меню вызвать
                         ExecView  для  самого  себя  в  целях выполнения
                         процесса выбора элемента меню, в результате чего
                         может  генерироваться  новая  команда  с помощью
                         PutEvent.

         cmClose   4     Закрывает окно. Если окно является  режимным, то
                         посредством PutEvent генерируется событие коман-
                         ды со значением cmCancel. Если окно не режимное,
                         то вызывается метод Close.

         cmZoom    5     Заставляет вызывать Zoom, если окно поддерживает
                         возможность "распахивания".

         cmResize  6     Заставляет вызывать DragView для самого себя,
                         если окно  поддерживает изменение размеров.


         B.Pascal 7 & Objects/TV#2       - 18 -

         cmNext    7     Выбирает в качестве активного в рабочей области
                         следующее окно.

         cmPrev    8     Выбирает в качестве активного в рабочей области
                         предыдущее окно.
        -----------------------------------------------------------------


         B.Pascal 7 & Objects/TV#2       - 19 -


             Следующие  стандартные  команды используются для определения
        поведения по умолчанию объектов диалогового окна:

               Таблица 19.4. Стандартные команды диалогового окна.

        -----------------------------------------------------------------
        Команда    Значение  Назначение
        -----------------------------------------------------------------

         cmOK        10      Была нажата "кнопка" OK.

         cmCancel    11      Диалоговое  окно  было  закрыто "кнопкой"
                             Cancel, пиктограммой закрытия или клавишей
                             Enter.

         cmYes       12      Была нажата "кнопка" Yes.

         cmNo        13      Была нажата "кнопка" No.

         cmDefault   14      Была нажата "кнопка", назначенная по
                             умолчанию.
        -----------------------------------------------------------------

             События с командами cmOK,  cmCancel, cmYes или cmNo отменяют
        режимный (неигнорируемый)  характер диалогового окна и возвращают
        это значение (вызывая EndModal).  Обычно режимное диалоговое окно
        содержит по крайней мере одну кнопку с одним из этих значений ко-
        манд.

             Команда  cmDefault  имитирует нажатие "кнопки", определенной
        по  умолчанию.  По  умолчанию  диалоговые окна генерируют событие
        команды cmDefault в ответ на событие клавиатуры kbEnter.


         B.Pascal 7 & Objects/TV#2       - 20 -


             Для  операций с системным буфером и окнами используются сле-
        дующие команды, генерируемые стандартными меню Edit и Window:


              Таблица 19.5. Стандартные команды меню Edit и Window

        -----------------------------------------------------------------
        Команда    Значение  Назначение
        -----------------------------------------------------------------

         cmCut       20      Вырезать и перенести выделенный текст в
                             системный буфер

         cmCopy      21      Скопировать выделенный текст в системный
                             буфер

         cmPaste     22      Скопировать текст из системного буфера

         cmUndo      23      Отменить последнее изменение

         cmClear     24      Убрать выделенный текст

         cmTile      25      Расположить мозаично все окна, которые можно
                             так расположить

         cmCascade   26      Расположить каскадно все окна, которые можно
                             так расположить
        -----------------------------------------------------------------

          См. также: функцию StdEditMenuItems, функцию StdWindowMenuItems


             Функция: Turbo Vision 2.0 определяет новые командные конста-
        нты для пунктов стандартного меню файлов.


         B.Pascal 7 & Objects/TV#2       - 21 -


             Значения: Модуль App определяет для программ следующие стан-
        дартные команды:

              Таблица 19.6. Стандартные команды прикладной программы

        -----------------------------------------------------------------
        Команда    Значение  Назначение
        -----------------------------------------------------------------

         cmNew       30      Открыть новый файл из пункта меню File|New

         cmOpen      31      Открыть существующий файл из пункта меню
                                                          File|Open

         cmSave      32      Сохранить текущий файл из пункта меню
                                                          File|Save

         cmSaveAs    33      Сохранить файл с переименованием из пункта
                                                     меню File|Save As

         cmSaveAll   34      Сохранить все открытые файлы из пункта
                                                     меню File|Save All

         cmChangeDir 35      Изменить текущий каталог из пункта меню
                                                     File|Change Dir

         cmDosShell  36      Выйти в DOS из пункта меню File|DOS Shell

         cmCloseAll  37      Закрыть все открытые файлы из пункта меню
                                                          File|Close All
        -----------------------------------------------------------------

          См. также: функцию StdFileMenuItems



         B.Pascal 7 & Objects/TV#2       - 22 -


             Для использования стандартными отображаемыми элементами  оп-
        ределены следующие стандартные команды:

              Таблица 19.7. Стандартные команды для отображаемых
                                       элементов

        -----------------------------------------------------------------
        Команда         Значение    Назначение
        -----------------------------------------------------------------

        cmReceivedFocus     50  TView.SetState использует функцию Message
        cmReleasedFocus     51  Для передачи владельцу события   evBroad-
                                cast с одним из этих значений при измене-
                                нии sfFocused.  Это информирует любой ви-
                                димый в текущий момент времени элемент  о
                                том, что отображаемый элемент получил или
                                потерял фокус,  и  что  эти  отображаемые
                                элементы  должны  быть соответственно об-
                                новлены. Объект-метка, например, реагиру-
                                ет  на эти команды,  включая или выключая
                                свою подсветку при получении  или  потере
                                фокуса  отображаемым  элементом,  который
                                она отмечает.

        cmCommandSetChanged 52  Метод Idle программы  генерирует  событие
                                с этим значением, как только он обнаружит
                                изменение в текущем наборе команд.  Изве-
                                щение  посылается к каждому отображаемому
                                элементу  программы,  принимающему  собы-
                                тия-извещения.  Отображаемый элемент дол-
                                жен реагировать на изменения в наборе ко-
                                манд перерисовыванием самого себя должным
                                образом.

        cmScrollBarChanged  53  TScrollBar использует функцию Message для
        cmScrollBarClicked  54  передачи события с извещением с одним  из
                                этих значений  своему  собственнику,  как
                                только  обнаруживается изменение его зна-
                                чения или перещелкивание "мышью" на поло-
                                се прокрутки. Отображаемые элементы, свя-
                                занные с полосой  прокрутки,  такие,  как
                                элементы  прокрутки и визуализаторы спис-
                                ков, могут затем реагировать на это изве-
                                щение.

        cmSelectWindowNum   55  Заставляет окно выбрать себя в случае,
                                если InfoInt записи события соответствует
                                полю  окна  Number.  TProgram.HandleEvent
                                реагирует на  события  от  клавиатуры  от
                                Alt-1  до  Alt-9  сообщением-уведомлением
                                cmSelectWindowNum с InfoInt от 1 до 9.


         B.Pascal 7 & Objects/TV#2       - 23 -

        cmListItemSelected  56  Объекты просмотра списков извещают
                                владельца событием со значением  Command,
                                равным  cmListItemSelected,  при   выборе
                                элемента списка.

        cmRecordHistory     60  Заставляет объект предыстории    "записы-
                                вать" текущее содержимое связанного  объ-
                                екта вводимой строки. Кнопки посылают эти
                                сообщения владельцам при нажатии, застав-
                                ляя  "записывать"  все объекты THistory в
                                диалоговом окне.

        -----------------------------------------------------------------

             См. также: TView.HandleEvent, TCommandSet


             Значения:  объектами TEditor используются следующие констан-
        ты:

        -----------------------------------------------------------------
        Команда    Значение  Назначение
        -----------------------------------------------------------------

         cmFind      82      Вызывает диалоговое окно поиска текста

         cmReplace   83      Вызывает диалоговое окно поиска и замены
                                                               текста

         cmSearchAgain 84    Повтор предыдущего поиска
        -----------------------------------------------------------------


         B.Pascal 7 & Objects/TV#2       - 24 -



             TEditor.HandleEvent  преобразует различные клавиши в следую-
        щие команды:


        ----------------------------------------------------
        Команда      Значение         Команда      Значение
        ----------------------------------------------------

         cmCharLeft    500             cmNewLine     512

         cmCharRight   501             cmBackSpace   513

         cmWordLeft    502             cmDelChar     514

         cmWordRight   503             cmDelWord     515

         cmLineStart   504             cmDelStart    516

         cmLineEnd     505             cmDelEnd      517

         cmLineUp      506             cmDelLine     518

         cmLineDown    507             cmInsMode     519

         cmPageUp      508             cmStartSelect 520

         cmPageDown    509             cmHideSelect  521

         cmTextStart   510             cmIndentMode  522

         cmTextEnd     511             cmUpdateTitle 523
        -----------------------------------------------------------------


             Значения:  Модуль StdDlg определяет для диалоговых окон сле-
        дующие команды:

        -----------------------------------------------------------------
        Команда    Значение  Назначение
        -----------------------------------------------------------------
         cmFileOpen    800   Возвращается TFileDialog при выборе мышью
                                                               Open
         cmFileReplace 801   Возвращается TFileDialog при выборе мышью
                                                               Replace
         cmFileClear   802   Возвращается TFileDialog при выборе мышью
                                                               Clear
        -----------------------------------------------------------------


         Переменная ColorIndexes                                ColorSel
        -----------------------------------------------------------------

         B.Pascal 7 & Objects/TV#2       - 25 -


             Описание: ColorIndexes: PColorIndex = nil;

             Функция:  Хранит  текущее  состояние цветов диалогового окна
        программы,  что  позволяет  легко сохранять и восстанавливать это
        состояние при последующем использовании.

             См. также: процедуру LoadIndexes, процедуру StoreIndexes


         Функция ColorGroup                                     ColorSel
        -----------------------------------------------------------------

             Описание: function ColorGroup (Name: String;
                  Items: PColorItem; Next: PColorGroup): PColorGroup;

             Функция: Выделяет в динамической области памяти новую группу
        цветов  с именем Name и перечнем цветовых элементов, переданным в
        Items, и возвращает указатель на группу. Next указывает на следу-
        ющую  группу в связанном списке групп, где nil указывает на конец
        списка.

             См. также: тип TColorGroup


         Функция ColorItem                                      ColorSel
        -----------------------------------------------------------------

             Описание: function ColorItem (Name: String;
                            Index: Byte; Next: PColorItem): PColorItem;

             Функция: Выделяет в динамической памяти новый цветовой  эле-
        мент с именем Name и цветовым индексом,  переданным в Index. Next
        указывает на следующий элемент цвета в связанном списке,  где nil
        указывает на конец списка.




         B.Pascal 7 & Objects/TV#2       - 26 -

         Константы coXXXX                                       Drivers
        -----------------------------------------------------------------

             Функция:  Константы  coXXXX  передаются  TCollection.Error в
        качестве  параметра  Code,  когда  при  работе набор обнаруживает
        ошибку.

             Значения:  Для всех наборов определены следующие стандартные
        коды ошибок:

                            Таблица 19.8. Коды ошибок набора.


        -----------------------------------------------------------------
        Команда    Значение  Назначение
        -----------------------------------------------------------------

         coIndexError  -1    Индекс находится за пределами диапазона.
                             Параметр  Info,  передаваемый  методу Error,
                             содержит неверный индекс.

         coOverflow    -2    Переполнение набора. TCollection.SetLimit не
                             удалось расширить набор до требуемого разме-
                             ра.  Параметр Info,  передаваемый методу Er-
                             ror, содержит запрошенный размер.
        -----------------------------------------------------------------

             См. также: TCollection


         Функция: CStrLen                                       Drivers
        -----------------------------------------------------------------

             Описание: function CStrLen(S: String): Integer;

             Функция: Возвращает  длину строки S,  где S- это управляющая
        строка,  использующая символы "~" для указания символов  быстрого
        вызова. Символы "~" исключаются из длины строки, поскольку они не
        будут появляться на экране.  Например,  для строки  '~B~roccoli',
        CStrLen возвращает 8.

             См. также: MoveCStr


         B.Pascal 7 & Objects/TV#2       - 27 -

         Переменная CtrlBreakHit                                Drivers
        -----------------------------------------------------------------

             Описание: CtrlBreakHit: Boolean = False;

             Функция: Драйвер  обработки  прерываний  от клавиатуры Turbo
        Vision всегда устанавливает ее равной True, когда нажата комбина-
        ция  клавиш Ctrl-Break.  Это позволяет программам на Turbo Vision
        перехватывать Ctrl-Break и реагировать на него.  Этот флаг  может
        быть сброшен в любой момент установкой его равным False.

             См. также: SaveCtrlBreak


         Функция: CtrlToArrow                                   Drivers
        -----------------------------------------------------------------

             Описание:  function CtrlToArrow(KeyCode: Word): Word;

             Функция:  Преобразует  управляющие WordStar-совместимые коды
        клавиатуры  в  соответствующие  коды  клавиш управления курсором.
        Если младший байт KeyCode соответствует одному из значений управ-
        ляющих  клавиш,  описанных  в  Таблице 19.9, то результатом будет
        соответствующая  константа  kbXXXX.  В  противном  случае KeyCode
        возвращается неизмененным.

                Таблица 19.9. Преобразование управляющих клавиш.

                          -----------------------------------------
                          Клавиша     Lo(KeyCode)   Результат
                          -----------------------------------------
                          Ctrl-A         $01          kbHome
                          Ctrl-C         $03          kbPgDn
                          Ctrl-D         $04          kbRight
                          Ctrl-E         $05          kbUp
                          Ctrl-F         $06          kbEnd
                          Ctrl-G         $07          kbDel
                          Ctrl-H         $08          kbBack
                          Ctrl-R         $12          kbPgUp
                          Ctrl-S         $13          kbLeft
                          Ctrl-V         $16          kbIns
                          Ctrl-X         $18          kbDown
                          -----------------------------------------


         B.Pascal 7 & Objects/TV#2       - 28 -

         Переменная CursorLines                                 Drivers
        -----------------------------------------------------------------

             Описание:  CursorLines: Word;

             Функция: Устанавливает начальную и конечную строки курсора с
        помощью InitVideo. Формат совпадает с форматом, ожидаемым функци-
        ей 1 прерывания BIOS $10 для установки типа курсора.

             См. также:  InitVideo,  TView.ShowCursor,  TView.HideCursor,
        TView.BlockCursor, Tview.NormalCursor


         Функция: DefEditorDialog                               Editors
        -----------------------------------------------------------------

             Описание:  function DefEditorDialog (Dialog: Integer;
                                                Info: Pointer): Word;

             Функция: DefEditorDialog представляет собой значение,  кото-
        рое по умолчанию присваивается переменной EditorDialog.  Описание
        использования диалоговых функций редактора  смотрите  в  описании
        типа TEditorDialog.  DefEditorDialog не показывает никаких диало-
        говых окон, а просто возвращает значение cmCancel, как будто выз-
        ванное диалоговое окно было закрыто.

             См. также: тип TEditorDialog, переменную EditorDialog


         Переменная DeskTop                                     App
        -----------------------------------------------------------------

             Описание: DeskTop: PDeskTop = nil;

             Функция: Сохраняет указатель на объект рабочей области прог-
        раммы.  Для создания объекта рабочей области объект программы ис-
        пользует виртуальный метод InitDeskTop,  вызываемый конструктором
        Init программы,  и присваивает этот указатель DeskTop. Для созда-
        ния рабочей области (отличной от существующей по умолчанию),  для
        создания другого объекта рабочей области  необходимо  переопреде-
        лить объект программы InitDeskTop и присвоить его DeskTop.

             См. также: TProgram.InitDesktop




         B.Pascal 7 & Objects/TV#2       - 29 -

         Функция DesktopColorItems                              ColorSel
        -----------------------------------------------------------------

             Описание: function  DesktopColorItems
                                 (const Next: PColorItem): PColorItem;

             Функция: Возвращает связанный список записей типа TColorItem
        для стандартного объекта рабочей области. Для программ, позволяю-
        щих пользователю изменять цвета рабочей области с помощью  диало-
        гового окна выбора цветов, DesktopColorItems упрощает процесс ус-
        тановки цветов.


         Функция DialogColorItems                               ColorSel
        -----------------------------------------------------------------

             Описание: function  DialogColorItems
                                 (Palette: Word;
                                 const Next: PColorItem): PColorItem;

             Функция: Возвращает связанный список записей типа TColorItem
        для стандартного объекта диалогового окна. Для программ, позволя-
        ющих  пользователю изменять цвета диалогового окна с помощью диа-
        логового  окна  выбора  цветов, DialogColorItems упрощает процесс
        установки цветов.


         Процедура DisposeBuffer                                Memory
        -----------------------------------------------------------------

             Описание: procedure DisposeBuffer (P: Pointer);

             Функция:  Освобождает буфер P^. P должен быть буфером, выде-
        ленным с помощью процедуры NewBuffer.

             См. также: процедуру NewBuffer


         Процедура DisposeCache                                 Memory
        -----------------------------------------------------------------

             Описание: procedure DisposeCache (P: Pointer);

             Функция: Освобождает  кэш-буфер  P^.  P должен быть буфером,
        выделенным с помощью процедуры NewCache.

             См. также: процедуру NewCache




         B.Pascal 7 & Objects/TV#2       - 30 -

         Процедура DisposeMenu                                  Menus
        -----------------------------------------------------------------

             Описание: procedure DisposeMenu(Menu: PMenu);

             Функция: Освобождает все элементы указанного меню (и все его
        подменю).

             См. также: Тип TMenu


         Процедура DisposeNode                                  Outline
        -----------------------------------------------------------------

             Описание: procedure DisposeNode (Node: PNode);

             Функция:  Освобождает  узел  структуры,  созданный с помощью
        функции  NewNode, включая рекурсивное освобождение всех порожден-
        ных узлов.

             См. также: функция NewNode


         Процедура DisposeStr                                   Objects
        -----------------------------------------------------------------

             Описание: procedure DisposeStr(P:String);

             Функция: Освобождает строку, выделенную в динамической памя-
        ти с помощью функции NewStr.

             См. также: NewStr




         B.Pascal 7 & Objects/TV#2       - 31 -

         Константы dmXXXX                                       Views
        -----------------------------------------------------------------

             Значения: Биты DragMode определены следующим образом:

                          Рис. 19.2. Битовые флаги режима перемещения.


                      ┌───┬─┬─┬─────────── dmLimitAll = $F0
                     ╔╧══╤╧╤╧╤╧╤═╤═╤═╤═══╗
                     ║msb│ │ │ │ │ │ │1sb║
                     ╚╤══╧╤╧╤╧╤╧═╧═╧╤╧═╤═╝
                      │   │ │ │     │  └── dmDragMove = $01
                      │   │ │ │     └───── dmDragGrow = $02
                      │   │ │ └─────────── dmLimitLoX = $10
                      │   │ └───────────── dmLimitLoY = $20
                      │   └─────────────── dmLimitHiX = $40
                      └─────────────────── dmLimitHiY = $80

             Функция:  Эти  константы  служат  для двух целей. Константы,
        начинающиеся с dmLimit, используются в методе DragMode для указа-
        ния  тех частей отображаемого элемента (если таковые существуют),
        которые  не должны перемещаться при перемещении внутри отображае-
        мого элемента-владельца. Константы, начинающиеся с dmDrag, указы-
        вают на способ, которым отображаемый элемент реагирует на переме-
        щение - изменением своего положения или размеров.

             DragMode  и константы режима перемещения объединяются и фор-
        мируют  параметр  Mode  метода  TView.DragView. Обычно с DragMode
        комбинируется или dmDragGrow или dmDragMove, и результат передае-
        тся  в  Mode.  Программа  DRAG.PAS демонстрирует, как флаг режима
        перемещения  влияет  на  поведение отображаемого элемента при его
        перемещении.


         B.Pascal 7 & Objects/TV#2       - 32 -


             Константы режима перемещения определены следующим образом:


                      Таблица 19.10. Константы режима перемещения.

             ------------------------------------------------------------
             Константа    Назначение
             ------------------------------------------------------------
             dmDragMove   Позволяет отображаемому элементу перемещаться.

             dmDragGrow   Позволяет отображаемому элементу изменять
                          размер.

             dmLimitLoX   Левая сторона отображаемого элемента не может
                          выходить за Limits.

             dmLimitLoY   Верхняя сторона отображаемого элемента не может
                          выходить за Limits.

             dmLimitHiX   Правая сторона отображаемого элемента не может
                          выходить за Limits.

             dmLimitHiY   Нижняя сторона отображаемого элемента не может
                          выходить за Limits.

             dmLimitAll   Никакая часть отображаемого элемента не может
                          выходить за Limits.
             ------------------------------------------------------------

             Поле отображаемого элемента DragMode содержит любую комбина-
        цию  флагов  dmLimitXX. По умолчанию TView.Init устанавливает это
        поле равным dmLimitLoY. В настоящее время поле DragMode использу-
        ется только в TWindow для формирования параметра Mode для DragVi-
        ew при перемещении окна и изменении его размеров.


         Процедура DoneDosMem                                   Memory
        -----------------------------------------------------------------

             Описание: procedure DoneDosMem;

             Функция:  Освобождает  память  для выхода в оболочку DOS или
        для выполнения   другой  программы.  DoneDosMem  освобождает  все
        кэш-буфера,  затем устанавливает SetMemTop  на  конец  последнего
        элемента  динамически распределяемой памяти,  делая доступной ос-
        тавшуюся ее часть.  После запуска  программы  необходимо  вызвать
        Init- DosMem для передачи всей динамической памяти Вашей програм-
        ме.  С примером использования InitDosMem и DoneDosMem можно озна-
        комиться на примере реализации TApplication.DosShell в APP.PAS.

             См. также: процедуру DoneDosMem, процедуру SetMemTop


         B.Pascal 7 & Objects/TV#2       - 33 -


         Процедура DoneEvents                                   Drivers
        -----------------------------------------------------------------

             Описание: procedure DoneEvents;

             Функция: Завершает работу администратора событий Turbo Visi-
        on, отключая обработчик прерываний "мыши". Вызывается автоматиче-
        ски при вызове TApplication.Done.

             См. также: TApplication.Done, InitEvents


         Процедура DoneHistory                                  Drivers
        -----------------------------------------------------------------

             Описание: procedure DoneHistory;

             Функция:  Освобождает блок протокола (предыстории), выделен-
        ный InitHistory. Вызывается автоматически при вызове TApplicatio-
        n.Done.

             См. также: Процедура InitHistory, TApplication.Done


         Процедура DoneMemory                                   Memory
        -----------------------------------------------------------------

             Описание: procedure DoneMemory;

             Функция:  Завершает работу администратора памяти Turbo Visi-
        on,  освобождая все буфера, выделенные с помощью GetBufMem. Вызы-
        вается автоматически при вызове TApplication.Done.

             См. также: TApplication.Done, InitMemory


         Процедура DoneSysError                                 Drivers
        -----------------------------------------------------------------

             Описание: procedure DoneSysError;

             Функция:  Завершает  выполнение обработчика системных ошибок
        Turbo  Vision,  восстанавливая  векторы прерываний 09H, 1BH, 21H,
        23H,  24H и восстанавливая состояние Ctrl-Break в DOS. Вызывается
        автоматически при вызове TApplication.Done.

             См. также: TApplication.Done, InitSysError


         Процедура DoneVideo                                    Drivers
        -----------------------------------------------------------------


         B.Pascal 7 & Objects/TV#2       - 34 -

             Описание: procedure DoneVideo;

             Функция:  Завершает  выполнение  администратора экрана Turbo
        Vision, восстанавливая начальный режим экрана (заданный в Startu-
        pMode),  очищая экран и восстанавливая курсор. Вызывается автома-
        тически при вызове TApplication.Done.

              См. также:    TApplication.Done,    InitVideo,   переменная
        StartupMode


         Переменная DoubleDelay                                 Drivers
        -----------------------------------------------------------------

             Описание: DoubleDelay: Word = 8;

             Функция:  Определяет  временной  интервал (в единицах 1/18.2
        секунд)  между  нажатиями кнопки "мыши" для того, чтобы различить
        двойное  нажатие  кнопки  "мыши" и два отдельных последовательных
        нажатия. Используется GetMouseEvent для генерации события Double,
        если нажатия произошли в этом временном интервале.

             См. также: TEvent.Double, GetMouseEvent




         B.Pascal 7 & Objects/TV#2       - 35 -

         Константы dpXXXX                                       Dialogs
        -----------------------------------------------------------------

        -----------------------------------------------------------------
        Константа  Значение  Назначение
        -----------------------------------------------------------------

         dpBlueDialog  1     Фон диалогового окна синий

         dpCyanDialog  2     Фон диалогового окна голубой

         dpGrayDialog  3     Фон диалогового окна серый
        -----------------------------------------------------------------

             Функция: Объекты диалоговых окон используют константы dpXXXX
        для  указания  той из трех стандартных палитр, которую необходимо
        использовать.  По  умолчанию  объекты  диалоговых окон используют
        dpGrayDialog.  Можно  выбрать любую другую из стандартных палитр,
        задав поле Palette равным одной из констант dpXXXX после констру-
        ирования объекта диалогового окна.


         Переменная EditorDialog                                Editors
        -----------------------------------------------------------------

             Описание: EditorDialog: TEditorDialog = DefEditorDialog;

             Функция:  EditorDialog является процедурной глобальной пере-
        менной. Она хранит функцию диалогового окна редактора, определен-
        ную  для  всех  редакторов  программы.  По умолчанию EditorDialog
        хранит  функцию  DefEditorDialog, которая обходит выдачу на экран
        диалоговых окон и возвращает cmCancel.

             Turbo  Vision  также  обеспечивает  удобный набор диалоговых
        окон редактора посредством функции SetEditorDialog.

             См. также: функцию SetEditorDialog




         B.Pascal 7 & Objects/TV#2       - 36 -

         Переменная EditorFlags                                 Editors
        -----------------------------------------------------------------

             Описание: EditorFlags: Word = efBackupFiles +
                                                     efPromptOnReplace;

             Функция:  EditorDialog  является битовой глобальной перемен-
        ной, управляющей поведением объекта редактора внутри всей програ-
        ммы. Биты определены константами efXXXX. По умолчанию EditorFlags
        заставляет сохранять страховые копии редактируемых файлов и перед
        заменой текста в операциях поиска-замены выдает запрос.

             См. также: константы efXXXX


         Константы edXXXX                                       Editors
        -----------------------------------------------------------------

             Функция:  Объект  редактора  передает  эти константы функции
        EditorDialog  с целью определения того, какое из возможных диало-
        говых  окон  будет  выдавать функция. Стандартные диалоговые окна
        редактора,  обеспечиваемые  StdEditorDialog,  отвечают на все эти
        константы.  Их  необходимо использовать только в том случае, если
        Вы пишите собственные диалоговые окна редактора.

         B.Pascal 7 & Objects/TV#2       - 37 -


        -----------------------------------------------------------------
        Константа  Значение  Назначение
        -----------------------------------------------------------------

         edOutOfMemory   0   Выдает предупреждение "out of memory"

         edReadError     1   Ошибка чтения файла

         edWriteError    2   Ошибка записи в файл

         edCreateError   3   Ошибка создания файла

         edSaveModify    4   Закрываемый файл не сохранен

         edSaveUntitled  5   Закрывается файл без имени; сделать запрос
                             о сохранении

         edSaveAs        6   Сохранение файла с новым именем или
                             сохранение в первый раз

         edFind          7   Выдать пользователю запрос об искомом тексте

         edSearchFailed  8   Выдать пользователю сообщение о том, что
                             искомая строка не найдена

         edReplace       9   Выдать пользователю запрос о тексте для
                             поиска и замены

         edReplacePrompt 10  Выдать пользователю запрос о замене
                             найденного текста
        -----------------------------------------------------------------


             См. также: переменную EditorDialog, тип TEditorDialog

         B.Pascal 7 & Objects/TV#2       - 38 -

         Константы efXXXX                                       Editors
        -----------------------------------------------------------------

             Функция:  Константы флагов редактора используются для управ-
        ления  битовой  глобальной  переменной EditorFlags. Большая часть
        этих  флагов  влияет  на  работу операций поиска и замены, а один
        флаг определяет, создавать ли страховые копии файлов.

        -----------------------------------------------------------------
        Константа        Значение  Назначение
        -----------------------------------------------------------------

         efCaseSensitive   $0001   Считает строчные и прописные буквы
                                   различными.

         efWholeWordsOnly  $0002   Осуществляется поиск лишь целых слов
                                   (разделенных   пробелами,    символами
                                   табуляции или конца строки).

         efPromptOnReplace $0004   Перед заменой текста выдавать
                                   пользователю запрос.

         efReplaceAll      $0008   Осуществлять поиск и замену всех
                                   найденных элементов поиска.

         efDoReplace       $0010   Текст для замены найден. Используется
                                   TEditor.

         efBackupFiles     $0100   Создавать  страховые  копии
                                   редактируемых  файлов  с   расширением
                                   .BAK
        -----------------------------------------------------------------


               Рис. 19.3. Битовые флаги редактора.


          ╔═══╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═══╗
          ║msb│ │ │ │ │ │ │ │ │ │ │ │ │ │ │1sb║
          ╚═══╧═╧═╧═╧═╧═╧═╧╤╧═╧═╧═╧╤╧╤╧╤╧╤╧═╤═╝
                           │       │ │ │ │  └───efCaseSensitive = $0001
                           │       │ │ │ └──────efWholeWordsOnly= $0002
                           │       │ │ └────────efPromptOnReplace=$0004
                           │       │ └──────────efReplaceAll    = $0008
                           │       └────────────efDoReplace     = $0010
                           └────────────────────efBackupFiles   = $0100


         Переменная EmsCurHandle                                Objects
        -----------------------------------------------------------------

             Описание: EmsCurhandle: Word = $FFFF;


         B.Pascal 7 & Objects/TV#2       - 39 -

             Функция:  Содержит  текущий  идентификатор EMS, отображенный
        TEmsStream  в  нулевую физическую страницу памяти EMS. TEmsStream
        избегает  изменения  структуры EMS с помощью сохранения состояния
        EMS.  Если Ваша программа использует расширенную память (EMS) для
        других  целей, установите EmsCurHandle и EmsCurPage равными $FFFF
        перед  использованием  TEmsStream- это будет вынуждать TEmsStream
        восстанавливать свое состояние.

             См. также: TEmsStream.Handle


         Переменная EmsCurPage                                  Objects
        -----------------------------------------------------------------

             Описание: EmsCurpage: Word = $FFFF;

             Функция:  Содержит  текущий  номер  логической страницы EMS,
        отображенной TEmsStream в нулевую физическую страницу памяти EMS.
        TEmsStream  избегает изменения структуры EMS с помощью сохранения
        состояния  EMS. Если Ваша программа использует расширенную память
        (EMS)  для  других  целей,  установите  EmsCurHandle и EmsCurPage
        равными  $FFFF  перед использованием TEmsStream- это будет вынуж-
        дать TEmsStream восстанавливать свое состояние.

             См. также: TEmsStream.Page


         Переменная ErrorAttr                                   Views
        -----------------------------------------------------------------

             Описание: const ErrorAttr: Byte = $CF;

             Функция: Содержит байт видео атрибута, используемый в качес-
        тве значения, возвращаемого при ошибке вызова метода отображаемо-
        го  элемента GetColor. Если GetColor не удается правильно отобра-
        зить  индекс  палитры  в  байт  видео атрибута (вследствие выхода
        индекса  за разрешенные пределы), то он возвращает ошибку в Erro-
        rAttr.

             Заданное  по  умолчанию  значение  ErrorAttr дает ярко-белые
        символы  на  красном  фоне. Если Вы видите на экране эту цветовую
        комбинацию,  то  это, вероятнее всего, указывает на ошибку выбора
        палитры.

             См. также: TView.GetColor


         B.Pascal 7 & Objects/TV#2       - 40 -


         Константы evXXXX                                       Drivers
        -----------------------------------------------------------------

             Функция:  Эти мнемоники обозначают типы событий для обработ-
        чиков  событий Turbo Vision. Константы evXXXX используются в нес-
        кольких местах:

             - в поле What записи события

             - в поле EventMask отображаемого  элемента

             - в переменных PositionalEvents и FocusedEvents.


         B.Pascal 7 & Objects/TV#2       - 41 -


             Значения: Следующие значения флагов событий обозначают стан-
        дартные типы событий:

                    Таблица 19.11. Флаги стандартных событий.

             ------------------------------------------------------------
             Константа     Значение        Смысл
             ------------------------------------------------------------
             evMouseDown   $0001   Кнопка "мыши" нажата

             evMouseUp     $0002   Кнопка "мыши" отпущена

             evMouseMove   $0004   "Мышь" изменила положение

             evMouseAuto   $0008   Периодическое событие в то время, пока
                                   нажата кнопка "мыши"

             evKeyDown     $0010   Клавиша нажата

             evCommand     $0100   Событие-команда

             evBroadcast   $0200   Событие-уведомление
             ------------------------------------------------------------

             Следующие  константы  могут  использоваться для маскирования
        типов событий:

                    Таблица 19.12. Маски стандартных событий.

             ------------------------------------------------------------
             Константа     Значение         Смысл
             ------------------------------------------------------------
             evNothing     $0000    Событие уже обработано

             evMouse       $000F    Событие от "мыши"

             evKeyboard    $0010    Событие от клавиатуры

             evMessage     $FF00    Событие-сообщение (команда,
                                    уведомление или событие, определенное
                                    пользователем).
             ------------------------------------------------------------


         B.Pascal 7 & Objects/TV#2       - 42 -


             Биты маски события определены следующим образом:


                    Рис. 19.4. Биты маски событий.

                ┌─┬─┬─┬─┬─┬─┬─┬─────────────────────> evMessage   = $FF00
                │ │ │ │ │ │ │ │       ┌─────────────> evKeyboard  = $0010
                │ │ │ │ │ │ │ │       │ ┌─┬─┬───┬───> evMouse     = $000F
            ╔═══╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤═╤═╤═╤╧╤╧╤╧╤╧╤══╧╗
            ║msb │ │ │ │ │ │ │ │ │ │ │ │ │ │ │1sb║
            ╚════╧═╧═╧═╧═╧═╧╤╧╤╧═╧═╧═╧╤╧╤╧╤╧╤╧══╤╝
                            │ │       │ │ │ │   └───> evMouseDown = $0001
                            │ │       │ │ │ └───────> evMouseUp   = $0002
                            │ │       │ │ └─────────> evMouseMove = $0004
                            │ │       │ └───────────> evMouseAuto = $0008
                            │ │       └─────────────> evKeyDown   = $0010
                            │ └─────────────────────> evCommand   = $0100
                            └───────────────────────> evBroadcast = $0200


             Маски  стандартных событий могут быть использованы для быст-
        рого определения того, принадлежит ли событие конкретному семейс-
        тву событий. Например:

             if Event.What and evMouse <> 0 then DoMouseEvent;

             См.  также:  методы  TEvent,  TView.EventMask,  GetKeyEvent,
        GetMouseEvent, HandleEvent, PositionalEvents, FocusedEvents.


         Константы fdXXXX                                       StdDlg
        -----------------------------------------------------------------

             Функция:  Константы  fdXXXX передаются конструктору объектов
        TFileDialog в параметре AOptions.


             ------------------------------------------------------------
             Константа     Значение        Смысл
             ------------------------------------------------------------
             fdOkButton      $0001 Включить в диалоговое окно кнопку "OK"

             fdOpenButton    $0002 Включить в диалоговое окно кнопку
                                                                   "Open"

             fdReplaceButton $0004 Включить в диалоговое окно кнопку
                                                                "Replace"

             fdClearButton   $0008 Включить в диалоговое окно кнопку
                                                                 "Clear"

             fdHelpButton    $0010 Включить в диалоговое окно кнопку

         B.Pascal 7 & Objects/TV#2       - 43 -

                                                                 "Help"

             fdNoLoadDir     $0100 При работе Init не загружать в
                                   диалоговое  окно  содержимое  текущего
                                   каталога.   Это   означает,   что   Вы
                                   собираетесь   изменить  WildCard   при
                                   помощи    SetData    или     сохранить
                                   диалоговое     окно     в      потоке.
             ------------------------------------------------------------


                    Рис. 19.5. Флаги опций диалогового окна файлов

         ╔════╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═══╗
         ║msb │ │ │ │ │ │ │ │ │ │ │ │ │ │ │1sb║
         ╚════╧═╧═╧═╧═╧═╧═╧╤╧═╧═╧═╧╤╧╤╧╤╧╤╧══╤╝
                           │       │ │ │ │   └───> fdOkButton    = $0001
                           │       │ │ │ └───────> fdOpenButton  = $0002
                           │       │ │ └─────────> fdReplaceButton=$0004
                           │       │ └───────────> fdClearButton = $0008
                           │       └─────────────> fdHelpButton  = $0010
                           └─────────────────────> fdNoLoadDir   = $0100



             См. также: TFileDialog


         Переменная FindStr                                     Editors
        -----------------------------------------------------------------

             Описание: FindStr: string [80] = '';

             Функция:  FindStr  содержит  последнюю строку, найденную при
        работе операций поиска.


         Тип FNameStr                                           Objects
        -----------------------------------------------------------------

             Описание: FNameStr = string[79];

             Функция: Строка, содержащая имя файла DOS.


         Переменная FocusedEvents                               Views
        -----------------------------------------------------------------

             Описание: FocusedEvents: Word = evKeyboard + evCommand;

             Функция:  Определяет  классы  событий,  являющиеся  текущими
        событиями. Переменные FocusedEvents и PositionalEvents использую-
        тся  методом TGroup.HandleEvent для определения того, как переда-

         B.Pascal 7 & Objects/TV#2       - 44 -

        вать события подэлементам группы. Если класс события не содержит-
        ся в FocusedEvents или PositionalEvents, то оно интерпретируется,
        как простое сообщение.

             См. также:  Переменную PositionalEvents, TGroup.HandleEvent,
        TEvent, константы evXXXX.


         Процедура FormatStr                                    Drivers
        -----------------------------------------------------------------

             Описание: procedure  FormatStr(var Result:  String;
                                           Format: String; var Params);

             Функция:  Общая  процедура  форматирования  строки,  которая
        работает  подобно функции языка Си vsprintf. Format включает опи-
        сатели  формата,  а  Params содержит список параметров. FormatStr
        выполняет форматированный вывод строки в Result.

             Параметр Format может содержать любое число описателей  фор-
        мата,  используемых  для отображения параметров в Params.  Формат
        описателей- %[-][nnn]X, где

             % указывает на начало описателя формата;

             [-] - необязательный знак минуса,  указывающий на тот  факт,
        что  параметр будет выравнен по левой границе (по умолчанию пара-
        метры при отображении выравниваются по правой границе);

             [nnn] - необязательный десятичный описатель длины в диапазо-
        не 0 - 255 (0 указывает на то,  что длина не указана, а ненулевая
        величина означает, что выводится поле длиной в nnn символов);

              - Х - символ формата:

              - 's' означает, что параметр является указателем на строку;

              - 'd' означает, что параметр типа LongInt выводится в деся-
        тичном представлении;

              - 'c' означает, что младший байт параметра- символ;

              - 'x'  означает,  что  параметра  типа  LongInt выводится в
        шестнадцатиричном представлении;

              - '#'устанавливает индекс параметра равным nnn.

             Например,  если  параметр  указывает  на  строку, содержащую
        'spiny', следующая таблица показывает различные описатели и резу-
        льтат их применения при печати:

           Таблица 19.13. Описатели формата их результат их применения.


         B.Pascal 7 & Objects/TV#2       - 45 -

             -----------------------------------------
                Описатель     Результат
             -----------------------------------------
                %6s            ' spiny'
                %-6s           'spiny'
                %3s            'iny'
                %-3s           'spi'
                %06s           '0spiny'
                %-06s          'spiny0'
             -----------------------------------------

             Params- это нетипизированный параметр-переменная, содержащий
        достаточно параметров для того, чтобы удовлетворить любому описа-
        телю  формата  из  Format. Params должен быть массивом из LongInt
        или указателей или записью, содержащей LongInt или указатели.

             Например, для вывода строки сообщения об ошибке:

                      Error in file [file name] at line [line number]

             Вы должны передать Format следующую строку:

                      'Error in file %s at line %d'.

             Params  должен  содержать  указатель на строку имени файла и
        параметр  Longint, представляющий собой номер строки в файле. Это
        может быть сделано двумя способами: в массиве или в записи.

             Следующий пример показывает эти два типа описаний и присваи-
        ваний  переменных,  оба  из  которых создают допустимые значения,
        передаваемые в FormatStr в качестве параметра Params.

                         type
                           ErrMsgRec = record
                             FileName: PString;
                             LineNo: Longint;
                           end;

                           ErrMsgArray = array[0..1] of Longint;

                         const
                           TemplateMsg = 'Error in file %s at line %d';

                         var
                           MyFileName: FNameStr;
                           OopsRec: ErrMsgRec;
                           DarnArray: ErrMsgArray;
                           TestStr: String;

                         begin
                           MyFileName := 'WARTHOG.ASM';

                           with OopsRec do

         B.Pascal 7 & Objects/TV#2       - 46 -

                           begin
                             FileName := @MyFileName;
                             LineTo := 42;
                           end;
                           FormatStr(TestStr, TemplateMsg, OopsRec);
                           Writeln(TestStr);

                           DarnArray[0] := Longint(@MyFileName);
                           DarnArray[1] := 24;
                           FormatStr(TestStr, TemplateMsg, DarnArray);
                           Writeln(TestStr);
                         end;

             См. также: Функцию SystemError, объект TParamText.


         Процедура FreeBufMem                                   Memory
        -----------------------------------------------------------------

             Описание: procedure FreeBufMem(P: Pointer);

             Функция:  Освобождает кэш-буфер, на который ссылается указа-
        тель Р,  посредством  вызова DisposeCache. FreeBufMem введена для
        обеспечения   совместимости  с  предшествующими  версиями   Turbo
        Vision;   вместо использования  ее нужно  непосредственно вызвать
        DisposeCache.

             См. также: процедуру DisposeCache


         Функция: GetAltChar                                    Drivers
        -----------------------------------------------------------------

             Описание: function GetAltChar(KeyCode: Word): Char;

             Функция: Возвращает символ Ch, для которого Alt-Ch вырабаты-
        вает  двухбайтовый код, заданный в аргументе KeyCode. Эта функция
        дает преобразование, обратное GetAltCode.

             См. также: GetAltCode.


         Функция: GetAltCode                                    Drivers
        -----------------------------------------------------------------

             Описание: function GetAltCode(Ch: Char): Word;

             Функция:  Возвращает  двухбайтовый скан-код, соответствующий
        Alt-Ch. Эта функция дает преобразование, обратное GetAltChar.

             См. также: GetAltChar.



         B.Pascal 7 & Objects/TV#2       - 47 -

         Функция: GetBufferSize                                 Memory
        -----------------------------------------------------------------

             Описание: function GetBufferSize (P: Pointer): Word;

             Функция:  Возвращает  размер  буфера  P^  в байтах. P должен
        указывать на буфер, выделенный с помощью процедуры NewBuffer.

             См. также: процедуру NewBuffer.


         Процедура GetBufMem                                    Memory
        -----------------------------------------------------------------

             Описание: procedure GetBufMem(var P: Pointer; Size: Word);

             Функция:  Выделяет кэш-буфер размером Size байт, и сохраняет
        указатель  на  него  в  Р  посредством вызова NewCache. GetBufMem
        введена  для обеспечения совместимости с предшествующими версиями
        Turbo  Vision; вместо использования ее нужно непосредственно выз-
        вать NewCache.

             См. также: процедуру NewCache


         Процедура GetKeyEvent                                  Drivers
        -----------------------------------------------------------------

             Описание: procedure GetKeyEvent(var Event: TEvent);

             Функция: Проверяет, доступно ли событие от клавиатуры посре-
        дством  вызова прерывания BIOS INT 16H. Если клавиша была нажата,
        то  Event.What  устанавливается равным evKeyDown, а Event.KeyCode
        устанавливается равным  значению  скан-кода клавиши.  В противном
        случае,  Event.What устанавливается равным  evNothing.  Процедура
        GetKeyEvent вызывается TProgram.GetEvent.

             См. также:     TProgramm.GetEvent,     константы     evXXXX,
        TView.HandleEvent.

         B.Pascal 7 & Objects/TV#2       - 48 -


         Процедура GetMouseEvent                                Drivers
        -----------------------------------------------------------------

            Описание: procedure GetMouseEvent(var Event: TEvent);

             Функция: Проверяет, доступно ли событие от "мыши" из очереди
        событий "мыши", поддерживаемой обработчиком событий Turbo Vision.
        Если происходит событие от "мыши",  то Event.What устанавливается
        равным   evMouseDown,  evMouseUp,  evMouseMove  или  evMouseAuto;
        Event.Buttons    устанавливается    равным    mbLeftButton    или
        mbRightButton;   Event.Double  устанавливается  равным  True  или
        False. Event.Where устанавливается равным положению "мыши" в гло-
        бальных   координатах   (соответствующих   координатной   системе
        TApplication).  Если события от "мыши" недоступны,  то Event.What
        устанавливается  равным  evNothing.  GetMouseEvent  вызывается из
        TProgram.GetEvent.

             См. также:   TProgram.GetEvent,   события   evXXXX,   методы
        HandleEvent.


         B.Pascal 7 & Objects/TV#2       - 49 -

         Константы gfXXXX                                       Views
        -----------------------------------------------------------------

             Функция:  Эти  мнемоники  используются  для  установки полей
        GrowMode  во  всех  объектах  TView и порожденных объектах. Биты,
        установленные  в  GrowMode,  определяют, как отображаемый элемент
        будет  изменяться в зависимости от изменений размера его владель-
        ца.

             Значения: Биты GrowMode определены следующим образом:



                              ┌─┬─┬─┬─── gfGrowAll = $0F
                     ╔═╤═╤═╤═╤╧╤╧╤╧╤╧╗
                     ╚╤╧═╧╤╧╤╧╤╧╤╧╤╧╤╝
                      └─┬─┘ │ │ │ │ └─── gfGrowLoX = $01
                        │   │ │ │ └───── gfGrowLoY = $02
               Неопределены │ │ └─────── gfGrowHiX = $04
                            │ └───────── gfGrowHiY = $08
                            └─────────── gfGrowRel = $10

             Рис. 19.6. Биты режима Grow.

                 Таблица 19.14. Определения флагов режима Grow.

        -----------------------------------------------------------------
        Константа        Назначение
        -----------------------------------------------------------------
         gfGrowLoX    Если установлен, то левая сторона отображаемого
                      элемента будет находиться на постоянном  расстоянии
                      от правой стороны владельца.

         gfGrowLoY    Если  установлен,  то верхняя сторона отображаемого
                      элемента будет находиться на постоянном  расстоянии
                      от нижней стороны владельца.

         gfGrowHiX    Если установлен, то правая сторона отображаемого
                      элемента будет находиться на постоянном  расстоянии
                      от правой стороны владельца.

         gfGrowHiY    Если установлен, то нижняя сторона отображаемого
                      элемента будет находиться на постоянном  расстоянии
                      от нижней стороны владельца

         gfGrowAll    Если установлен, то отображаемый элемент будет
                      сдвигаться  вместе  с   правым  нижним  углом   его
                      владельца.

         gfGrowRel    Для использования с объектами TWindow, которые
                      находятся   в    оперативной    области     экрана:
                      отображаемый элемент  будет изменять  относительный
                      размера   относительно   владельца.   Окно    будет

         B.Pascal 7 & Objects/TV#2       - 50 -

                      обрабатываться  соответственно  размеру  владельца,
                      даже когда  происходит переключение  между режимами
                      25 и  43/50 строк.
        -----------------------------------------------------------------

             Заметим,  что  LowX = левая сторона; LowY = верхняя сторона;
        HiX = правая сторона; HiY = нижняя сторона.

             См. также: TView.GrowMode


         Константы hcXXXX                                            App
        -----------------------------------------------------------------

             Функция:  Пункты  меню,  определенные  с помощью стандартных
        функций     работы      с    пунктами   меню    StdFileMenuItems,
        StdEditeMenuItems  и  StdWindowMenuItems  приписывают каждому  из
        них контексты подсказки.  Для   каждого  из  стандартных  пунктов
        меню модуль App определяет константы, начинающиеся с hc.

             Внимание!  Диапазоны  контекста  подсказки  0...999        и
        $FF00...$FFFF зарезервированы для Turbo Vision.

             Значения:  В  модуле  App  определены  три набора контекстов
        подсказки  для  стандартных  пунктов меню File, Edit и Window. Их
        значения показаны в следующих таблицах:


               Таблица 19.15. Контексты подсказки стандартного меню File

             ------------------------------------------------------------
             Константа     Значение      Смысл
             ------------------------------------------------------------
             hcNew         $FF01         File|New

             hcOpen        $FF02         File|Open

             hcSave        $FF03         File|Save

             hcSaveAs      $FF04         File|Save As

             hcSaveAll     $FF05         File|Save All

             hcChangeDir   $FF06         File|Change Dir

             hcDosShell    $FF07         File|Dos Shell

             hcExit        $FF08         File|Exit
             ------------------------------------------------------------


               Таблица 19.16. Контексты подсказки стандартного меню Edit


         B.Pascal 7 & Objects/TV#2       - 51 -

             ------------------------------------------------------------
             Константа     Значение      Смысл
             ------------------------------------------------------------
             hcUndo        $FF10         Edit|Undo

             hcCut         $FF11         Edit|Cut

             hcCopy        $FF12         Edit|Copy

             hcPaste       $FF13         Edit|Paste

             hcClear       $FF14         Edit|Clear
             ------------------------------------------------------------


               Таблица  19.17. Контексты подсказки стандартного меню
                                      Window

             ------------------------------------------------------------
             Константа     Значение      Смысл
             ------------------------------------------------------------
             hcTile        $FF20         Window|Tile

             hcCascade     $FF21         Window|Cascade

             hcCloseAll    $FF22         Window|Close All

             hcResize      $FF23         Window|Resize

             hcZoom        $FF24         Window|Zoom

             hcNext        $FF25         Window|Next

             hcPrev        $FF26         Window|Prev

             hcClose       $FF27         Window|Close
             ------------------------------------------------------------


         Константы hcXXXX                                       Views
        -----------------------------------------------------------------

             Значения:  Определены следующие константы контекста подсказ-
        ки:

                  Таблица 19.18. Константы контекста подсказки.

             -----------------------------------------
             Константа    Значение  Назначение
             -----------------------------------------
             hcNoContext     0    Контекст не задан
             hcDragging      1    Объект  перемещаем
             -----------------------------------------

         B.Pascal 7 & Objects/TV#2       - 52 -


             Функция:  Значение  TView.HelpCtx по умолчанию- hcNoContext,
        которое указывает на тот факт, что для отображаемого элемента нет
        контекста  подсказки.  TView.GetHelpCtx возвращает hcDragging при
        каждом перемещении отображаемого элемента (это указывается состо-
        янием флага sfDragging).

             Turbo Vision резервирует для контекста подсказки значения от
        0 до 999. Программисты могут определять свои константы в диапазо-
        не от 1000 до 65535.

          См. также:  TView.HelpCtx, TStatusLine.Update.




         B.Pascal 7 & Objects/TV#2       - 53 -

         Процедура HideMouse                                    Drivers
        -----------------------------------------------------------------

             Описание: procedure HideMouse;

             Функция:  Курсор  "мыши"  изначально  является видимым после
        вызова  InitEvents.  HideMouse  делает  невидимым курсор "мыши" и
        увеличивает  внутренний  счетчик  "спрятываний  мыши"  в драйвере
        "мыши". ShowMouse будет уменьшать значение этого счетчика и пока-
        зывать  курсор  "мыши",  когда счетчик становится равным 0. Таким
        образом,  вызовы  HideMouse  и  ShowMouse  могут быть парными, но
        всегда количества их вызовов должны быть равны.

             См. также: InitEvents, DoneEvents, ShowMouse


         Переменная HiResScreen                                 Drivers
        -----------------------------------------------------------------

             Описание: HiResScreen: Boolean;

             Функция:  Устанавливается  равным  True с помощью InitVideo,
        если  экран поддерживает режим 43/50 строк (EGA/VGA); в противном
        случае устанавливается равным False.

             См. также:   InitVideo


         Процедура HistoryAdd                                   HistList
        -----------------------------------------------------------------

             Описание: procedure HistoryAdd(Id: Byte; var Str: String);

             Функция: Добавляет строку Str в список протокола, на который
        указывает Id.

             См. также: функцию HistoryStr, функцию HistoryCount


         Переменная HistoryBlock                                HistList
        -----------------------------------------------------------------

             Описание:  HistoryBlock: Pointer = nil;

             Функция:  Указывает  на буфер, называемый блоком протокола и
        используемый для хранения строк протокола. Размер блока определя-
        ется  с помощью HistorySize. Указатель равен nil до тех пор, пока
        он  не  будет  установлен  с помощью InitHistory. Его значение не
        следует изменять.

             См. также: процедуру InitHistory, переменную HistorySize.



         B.Pascal 7 & Objects/TV#2       - 54 -

         Функция HistoryCount                                   HistList
        -----------------------------------------------------------------

             Описание: function HistoryCount(Id: Byte): Word;

             Функция:  Возвращает  количество  строк  в списке протокола,
        соответствующее номеру ID.


         Переменная HistorySize                                 HistList
        -----------------------------------------------------------------

             Описание: HistorySize: Word = 1024;

             Функция:  Указывает  размер  блока  протокола,  используемый
        администратором списка протокола для хранения значений, введенных
        в  строках  ввода. Размер фиксируется посредством InitHistory при
        запуске  программы.  По  умолчанию  размер  блока равен 1К, но он
        может  быть  изменен  перед  вызовом InitHistory. Это значение не
        следует изменять после вызова InitHistory.

             См. также: процедуру InitHistory, переменную HistoryBlock.


         Функция HistoryStr                                     HistList
        -----------------------------------------------------------------

             Описание: function  HistoryStr(Id: Byte;
                                                Index: Integer): String;

             Функция:  Возвращает  строку  из  списка протокола с номером
        Index с Id, равным ID.

             См. также: процедуру HistoryAdd, процедуру HistoryCount


         Переменная HistoryUsed                                 HistList
        -----------------------------------------------------------------

             Описание: HistoryUsed: Word = 0;

             Функция:  Служит для внутреннего использования администрато-
        ром  списка протокола (для указания на смещение внутри блока про-
        токола). Это значение не следует изменять.


         Процедура InitDosMem                                   Memory
        -----------------------------------------------------------------

             Описание: procedure InitDosMem;

             Функция:  Передает  программе всю динамически распределяемую
        память  после  выхода в оболочку DOS или запуска другой программы

         B.Pascal 7 & Objects/TV#2       - 55 -

        посредством  вызова SetMemTop, помещающей конец динамически расп-
        ределяемой памяти в начало доступной памяти. С примером использо-
        вания  InitDosMem и DoneDosMem можно ознакомиться на примере реа-
        лизации TApplication.DosShell в APP.PAS.

             См. также: процедуру DoneDosMem, процедуру SetMemTop


         Процедура InitEvents                                   Drivers
        -----------------------------------------------------------------

             Описание: procedure InitEvents;

             Функция:  Инициализирует администратор событий Turbo Vision,
        подключая обработчик прерываний "мыши" и показывая курсор "мыши".
        Вызывается автоматически TApplication.Init.

             См. также: DoneEvents.


         Процедура InitHistory                                  HistList
        -----------------------------------------------------------------

             Описание: InitHistory;

             Функция:  Вызывается с помощью TApplication.Init для выделе-
        ния  блока динамически распределяемой памяти, используемого адми-
        нистратором  управления  списком  протокола (предыстории). Размер
        блока  определяется переменной HistorySize. После вызова InitHis-
        tory переменная HistoryBlock указывает на начало блока.

             См. также: TProgram.Init, процедуру DoneHistory.


         Процедура InitMemory                                   Memory
        -----------------------------------------------------------------

             Описание: procedure InitMemory;

             Функция:  Инициализирует  администратор памяти Turbo Vision,
        устанавливая функцию динамически распределяемой памяти HeapError.

             Вызывается автоматически посредством TApplication.Init.

             См. также: DoneMemory.


         Процедура InitSysError                                 Drivers
        -----------------------------------------------------------------

             Описание: procedure InitSysError;

             Функция:  Инициализирует  обработчик  системных ошибок Turbo

         B.Pascal 7 & Objects/TV#2       - 56 -

        Vision,  захватывая  векторы прерываний 09H, 1BH, 21H, 23H, 24H и
        отключая  состояние  Ctrl-Break  из DOS. Вызывается автоматически
        посредством TApplication.Init.

             См. также: DoneSysError.


         Процедура InitVideo                                    Drivers
        -----------------------------------------------------------------

             Описание: procedure InitVideo;

             Функция:  Инициализирует  администратор экрана Turbo Vision.
        Сохраняет  текущий режим экрана в StartupMode и переключает экран
        в   режим,  указанный   в  ScreenMode.  Переменные   ScreenWidth,
        ScreenHeight, HiResScreen, CheckSnow, ScreenBuffer и  CursorLines
        корректируются  соответственно.  Режим  экрана позднее может быть
        изменен использованием SetVideoMode. InitVideo вызывается автома-
        тически посредством TApplication.Init.

             См. также: DoneVideo, SetVideoMode, smXXXX.


         Функция InputBox                                       MsgBox
        -----------------------------------------------------------------

             Описание: function InputBox (const Title, ALabel: String;
                                      var S: String; Limit: Byte): Word;

             Функция:  Выдает  на  экран  диалоговое окно размером 60*8 с
        полем  заголовка  из  Title,  текстом  метки из ALabel, и имеющее
        кнопку  "OK",  кнопку  "Cancel"  и  одну строку для ввода текста,
        первоначально  содержащую строку из S. Возвращает значение, возв-
        ращенное  ExecView  по  окончании  выдачи  диалогового окна. Если
        пользователь  не  закрывает  это  диалоговое  окно, то S содержит
        строку,  введенную  пользователем.  Limit  указывает максимальное
        количество символов во введенной строке.


         Функция InputBoxRect                                   MsgBox
        -----------------------------------------------------------------

             Описание: function InputBoxRect (var Bounds: TRect;
                            const Title, ALabel: String; var S: String;
                                                     Limit: Byte): Word;

             Функция: Работает точно так же, как и InputBox, но позволяет
        также указывать прямоугольник, ограничивающий диалоговое окно.

             См. также: функцию InputBox




         B.Pascal 7 & Objects/TV#2       - 57 -

         Константы kbXXXX                                       Drivers
        -----------------------------------------------------------------

             Функция: Два набора констант, начинающихся с "kb", связаны с
        клавиатурой.

             Значения: Следующие значения определяют состояние клавиатуры
        и могут быть использованы при анализе регистров Shift клавиатуры,
        которые  запоминается  в байте с абсолютным адресом Seg0040: $17.
        Например:

             var
               ShiftState: Byte absolute Seg0040:$17;
               ...
             if ShiftState and kbAltShift <> 0 then AltKeyDown;

               Таблица 19.19. Состояние клавиатуры и маски Shift.

        ------------------------------------------------------------------
         Константа     Значение    Назначение
        ------------------------------------------------------------------
         kbRightShift    $0001   Установлено, если правая клавиша Shift
                                 нажата

         kbLeftShift     $0002   Установлено, если левая клавиша Shift
                                 нажата

         kbCtrlShift     $0004   Установлено, если нажата клавиша Ctrl

         kbAltShift      $0008   Установлено, если нажата клавиша Alt

         kbScrollState   $0010   Установлено, если клавиатура находится в
                                 состоянии ScrollLock

         kbNumState      $0020   Установлено, если клавиатура находится в
                                 состоянии NumLock

         kbCapsState     $0040   Установлено, если клавиатура находится в
                                 состоянии CapsLock

         kbInsState      $0080   Установлено, если клавиатура в состоянии
                                 InsLock
        -----------------------------------------------------------------


               Рис. 19.7. Флаги маски состояния клавиатуры



         B.Pascal 7 & Objects/TV#2       - 58 -


          ╔═══╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═══╗
          ║msb│ │ │ │ │ │ │ │ │ │ │ │ │ │ │1sb║
          ╚═══╧═╧═╧═╧═╧═╧═╧═╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧═╤═╝
                             │ │ │ │ │ │ │  └───kbRightShift  = $0001
                             │ │ │ │ │ │ └──────kbLeftShift   = $0002
                             │ │ │ │ │ └────────kbCtrlShift   = $0004
                             │ │ │ │ └──────────kbAltShift    = $0008
                             │ │ │ └────────────kbScrollState = $0010
                             │ │ └──────────────kbNumState    = $0020
                             │ └────────────────kbCapsState   = $0040
                             └──────────────────kbInsState    = $0080

             Следующие значения определяют скан-коды клавиатуры  и  могут
        использоваться  для  анализа  поля  TEvent.KeyCode записи события
        evKeyDown:

                         Таблица 19.20. Коды клавиш Alt-буква.

             -----------------------------------------------------------
               Константа    Значение           Константа    Значение
             -----------------------------------------------------------
               kbAltA       $1E00              kbAltN       $3100
               kbAltB       $3000              kbAltO       $1800
               kbAltC       $2E00              kbAltP       $1900
               kbAltD       $2000              kbAltQ       $1000
               kbAltE       $1200              kbAltR       $1300
               kbAltF       $2100              kbAltS       $1F00
               kbAltG       $2200              kbAltT       $1400
               kbAltH       $2300              kbAltU       $1600
               kbAltI       $1700              kbAltV       $2F00
               kbAltJ       $2400              kbAltW       $1100
               kbAltK       $2500              kbAltX       $2D00
               kbAltL       $2600              kbAltY       $1500
               kbAltM       $3200              kbAltZ       $2C00
             -----------------------------------------------------------


                         Таблица 19.21. Коды специальных клавиш.


         B.Pascal 7 & Objects/TV#2       - 59 -


             -----------------------------------------------------------
               Константа    Значение           Константа    Значение
             -----------------------------------------------------------
               kbAltEqual   $8300              kbEnd        $4F00
               kbAltMinus   $8200              kbEnter      $1C0D
               kbAltSpace   $0200              kbEsc        $011B
               kbBack       $0E08              kbGrayMinus  $4A2D
               kbCtrlBack   $0E7F              kbHome       $4700
               kbCtrlDel    $0600              kbIns        $5200
               kbCtrlEnd    $7500              kbLeft       $4B00
               kbCtrlEnter  $1C0A              kbNoKey      $0000
               kbCtrlHome   $7700              kbPgDn       $5100
               kbCtrlIns    $0400              kbPgUp       $4900
               kbCtrlLeft   $7300              kbrayPlus    $4E2B
               kbCtrlPgDn   $7600              kbRight      $4D00
               kbCtrlPgUp   $8400              kbShiftDel   $0700
               kbCtrlPrtSc  $7200              kbShiftIns   $0500
               kbCtrlRight  $7400              kbShiftTab   $0F00
               kbDel        $5300              kbTab        $0F09
               kbDown       $5000              kbUp         $4800
             -----------------------------------------------------------


                         Таблица 19.22. Коды клавиш Alt-число.

             -----------------------------------------------------------
                Константа    Значение           Константа    Значение
             -----------------------------------------------------------
               kbAlt1       $7800              kbAlt6       $7D00
               kbAlt2       $7900              kbAlt7       $7E00
               kbAlt3       $7A00              kbAlt8       $7F00
               kbAlt4       $7B00              kbAlt9       $8000
               kbAlt5       $7C00              kbAlt0       $8100
             -----------------------------------------------------------

                         Таблица 19.23. Коды функциональных клавиш.


         B.Pascal 7 & Objects/TV#2       - 60 -


             -----------------------------------------------------------
               Константа    Значение           Константа    Значение
             -----------------------------------------------------------
               kbF1         $3B00              kbF6         $4000
               kbF2         $3C00              kbF7         $4100
               kbF3         $3D00              kbF8         $4200
               kbF4         $3E00              kbF9         $4300
               kbF5         $3F00              kbF10        $4400
             -----------------------------------------------------------

             Таблица 19.24.  Коды клавиш Shift-функциональная клавиша.

             -----------------------------------------------------------
               Константа    Значение           Константа    Значение
             -----------------------------------------------------------
               kbShiftF1    $5400              kbShiftF6    $5900
               kbShiftF2    $5500              kbShiftF7    $5A00
               kbShiftF3    $5600              kbShiftF8    $5B00
               kbShiftF4    $5700              kbShiftF9    $5C00
               kbShiftF5    $5800              kbShiftF10   $5D00
             -----------------------------------------------------------

                Таблица 19.25. Коды клавиш Ctrl-функциональная клавиша.

             -----------------------------------------------------------
               Константа    Значение           Константа    Значение
             -----------------------------------------------------------
               kbCtrlF1     $5E00              kbCtrlF6     $6300
               kbCtrlF2     $5F00              kbCtrlF7     $6400
               kbCtrlF3     $6000              kbCtrlF8     $6500
               kbCtrlF4     $6100              kbCtrlF9     $6600
               kbCtrlF5     $6200              kbCtrlF0     $6700
             -----------------------------------------------------------

                 Таблица 19.26. Коды клавиш Alt-функциональная клавиша.

             -----------------------------------------------------------
               Константа    Значение           Константа    Значение
             -----------------------------------------------------------
               kbAltF1      $6800              kbAltF6      $6D00
               kbAltF2      $6900              kbAltF7      $6E00
               kbAltF3      $6A00              kbAltF8      $6F00
               kbAltF4      $6B00              kbAltF9      $7000
               kbAltF5      $6C00              kbAltF10     $7100
             -----------------------------------------------------------

             См. также: evKeyDown, GetKeyEvent.

─────────────────────────────────────────────────────────────────────────
         Процедура LoadHistory                                  HistList
        -----------------------------------------------------------------

             Описание: procedure LoadHistory (var S: TStream);

         B.Pascal 7 & Objects/TV#2       - 61 -


             Функция:  Читает  из  потока  S  блок предыстории программы,
        причем  сначала читает размер блока, а затем сам блок. Устанавли-
        вает  HistoryUsed на конец прочитанного блока. Для восстановления
        блока  предыстории,  сохраненного с помощью StoreHistory, исполь-
        зуйте LoadHistory.

             См. также: переменную HistoryUsed, процедуру StoreHistory


         Процедура LoadIndexes                                  ColorSel
        -----------------------------------------------------------------

             Описание: procedure LoadIndexes (var S: TStream);

             Функция:  Загружает  набор  индексов из потока S и сохраняет
        его    в   переменной   ColorIndexes.   Сохранив   и  восстановив
        ColorIndexes   в потоке,  программа может  восстановить состояние
        выбора цветов  диалогового окна, что позволит пользователю  легко
        изменять и восстанавливать изменения цветов.

             См. также: переменную ColorIndexes, процедуру StoreIndexes


         Функция: LongDiv                                       Objects
        -----------------------------------------------------------------

             Описание: function LongDiv(X: Longint;
                                           Y: Integer): Integer;
                                           inline($59/$58/$5A/$F7/$F9);

             Функция:  быстрая ассемблерная процедура деления, возвращаю-
        щая целое значение X/Y.


         Функция: LongMul                                       Objects
        -----------------------------------------------------------------

             Описание: function LongMul(X, Y: Integer): Longint;
                                                inline($5A/$58/$F7/$EA);

             Функция: быстрая ассемблерная процедура умножения, возвраща-
        ющая длинное целое значение X*Y.


         Тип LongRec                                            Objects
        -----------------------------------------------------------------

             Описание:  LongRec = record
                        Lo, Hi: Word;
                      end;

             Функция: Полезный тип записи для обработки переменных длиной

         B.Pascal 7 & Objects/TV#2       - 62 -

        в двойное слово.


         Функция: LowMemory                                     Memory
        -----------------------------------------------------------------

             Описание: function LowMemory: Boolean;

             Функция: Возвращает значение True, если память имеет младшие
        адреса,  в противном случае False. True означает, что вызов функ-
        ции  выделения памяти достиг области резервного буфера динамичес-
        кой  памяти. Размер резервного буфера динамической памяти опреде-
        ляется переменной LowMemSize.

             См.  также:  Главу  7,  "Обзор  Turbo  Vision",  InitMemory,
        TView.Valid, LowMemSize.


         Переменная LowMemSize                                  Memory
        -----------------------------------------------------------------

             Описание: LowMemSize: Word = 4096 div 16;

             Функция: Устанавливает размер резервного буфера динамической
        памяти  в  16-  байтовых  параграфах.  Величина, установленная по
        умолчанию,  представляет собой практически возможный минимум этой
        области, но она может быть увеличена для удовлетворения потребно-
        стям программы.

             См. также: InitMemory, область надежной памяти,
                                 TView.Valid, LowMemory


         Переменная MaxBufMem                                   Memory
        -----------------------------------------------------------------

             Описание: MaxBufMem: Word = 65536 div 16;

             Функция:  Указывает  максимальный объем памяти в 16-байтовых
        параграфах, которая может быть выделена для кэш-буферов.

             См. также: GetBufMem, FreeBufMem.


         Переменная MaxCollectionSize                           Objects
        -----------------------------------------------------------------

             Описание: MaxCollectionSize = 65520 div SizeOf(Pointer);

             Функция:  MaxCollectionSize  определяет  максимальное  число
        элементов,  которые  может содержать набор, по существу это число
        указателей, которое помещается в сегменте памяти размером 64К.


         B.Pascal 7 & Objects/TV#2       - 63 -


         Переменная MaxHeapSize                                 Memory
        -----------------------------------------------------------------

             Описание: MaxHeapSize: Word = 65360 div 16;

             Функция:  Определяет  максимальный размер буфера динамически
        распределяемой памяти в 16- байтных параграфах. Буфера из динами-
        чески  распределяемой памяти используются объектами редактора для
        выделения перемещаемых буферов с изменяемыми размерами, не затра-
        гивая динамическую память программы.

             См. также: процедуру NewBuffer, TFileEditor.InitBuffer


         Переменная MaxLineLength                               Editors
        -----------------------------------------------------------------

             Описание: MaxLineLength = 256;

             Функция:  MaxLineLength определяет максимальную длину строки
        в объекте редактора.


         Константа MaxViewWidth                                 Views
        -----------------------------------------------------------------

             Описание:  MaxViewWidth = 132;

             Функция:  Устанавливает  максимальную  ширину  отображаемого
        элемента.

             См. также: поле TView.Size.


         Константы mbXXXX                                       Drivers
        -----------------------------------------------------------------

             Функция: Эти константы могут использоваться при анализе поля
        TEvent.Buttons записи события evMouse.

                      if (Event.What = evMouseDown) and
                      (Event.Button = mbLeftButton) then LeftButtonDown;

             Значения: Определены следующие константы:

                      Таблица 19.27. Константы кнопок "мыши".

           --------------------------------------------------------------
           Константа    Значение  Назначение
           --------------------------------------------------------------

           mbLeftButton   $01 Установлено, если была нажата левая кнопка

         B.Pascal 7 & Objects/TV#2       - 64 -


           mbRightButton  $02 Установлено, если была нажата правая кнопка
           --------------------------------------------------------------

             См. также: GetMouseEvent.


         Функция: MemAlloc                                      Memory
        -----------------------------------------------------------------

             Описание: function MemAlloc(Size: Word): Pointer;

             Функция: Выделяет Size байт динамически распределяемой обла-
        сти  памяти  и возвращает указатель на выделенный блок. Если блок
        требуемого  размера не может быть выделен, то возвращается значе-
        ние nil. В отличие от стандартных процедур New и GetMem, MemAlloc
        не залазит в область резервного буфера динамической памяти. Блок,
        выделенный  с помощью MemAlloc, может быть освобожден стандартной
        процедурой FreeMem.

             См. также: New, GetMem, Dispose, FreeMem, MemAllocSeg


         Функция: MemAllocSeg                                   Memory
        -----------------------------------------------------------------

             Описание:  function MemAllocSeg(Size: Word): Pointer;

             Функция: Выделяет блок памяти, выровненный по границе сегме-
        нта.  Соответствует MemAlloc, за исключением того, смещение резу-
        льтирующего значения указателя всегда равно 0.

             См. также: MemAlloc


         Переменная MenuBar                                     App
        -----------------------------------------------------------------

             Описание: MenuBar: PMenuView = nil;

             Функция:  Сохраняет указатель на строку меню программы (нас-
        ледник  TMenuView). Переменная MenuBar инициализируется с помощью
        TProgram.InitMenuBar,  которая  вызывается  через  TProgram.Init.
        Значение nil указывает на то, что программа не имеет строки меню.


         Функция MenuColorItems                                 ColorSel
        -----------------------------------------------------------------

             Описание: function MenuColorItem (const Next: PColorItem):
                                                          PColorItem;

             Функция: Возвращает связанный список записей типа TColorItem

         B.Pascal 7 & Objects/TV#2       - 65 -

        для стандартных отображаемых элементов меню. Для программ, позво-
        ляющих  пользователю  изменять  цвета  меню с помощью диалогового
        окна  изменения цветов, MenuColorItems упрощает процесс установки
        цветов.


         Функция: Message                                       Views
        -----------------------------------------------------------------

            Описание: function Message(Receiver: PView; What,
                            Command: Word; InfoPtr: Pointer): Pointer;

            Функция:  Message  устанавливает запись события с аргументами
        What,  Command  или InfoPtr, а затем, если это возможно, вызывает
        Receiver^.HandleEvent для обработки этого события.

             Message  возвращает значение nil, если Receiver имеет значе-
        ние  nil  или  если  событие  не обработано успешно. Если событие
        успешно  обработано  (HandleEvent  возвращает  Event.What, равное
        evNothing),  то Message возвращает Event.InfoPtr. Его можно испо-
        льзовать для определения того, каким отображаемым элементом обра-
        ботано событие, поскольку ClearEvent устанавливает InfoPtr указы-
        вающим на объект, который обработал событие.

             Аргумент  What  обычно  устанавливается  равным evBroadcast.
        Например,  по  умолчанию TscrollBar.ScrollDraw посылает следующее
        сообщение владельцу полосы прокрутки:

                  Message(Owner, evBroadcast, cmScrollBarChanged, @Self);

             Это  сообщение гарантирует, что соответствующие отображаемые
        элементы отобразятся заново, как только значение полосы прокрутки
        Value изменится.

             См. также:  TView.HandleEvent, тип TEvent, константы cmXXXX,
        константы evXXXX.


         Функция: MessageBox                                    MsgBox
        -----------------------------------------------------------------

            Описание: function MessageBox (const Msg:  String;
                                 Params: Pointer; AOptions: Word): Word;

            Функция:  Выдает  в  центре  экрана  диалоговое окно размером
        80*9.  Диалоговое окно содержит сообщение, переданное в параметре
        Msg, и вставляет параметры, переданные в Param. AOptions содержит
        комбинации констант флагов сообщений mfXXXX, определяющих кнопки,
        которые  появятся  в  диалоговом  окне. Для включения параметров,
        переданных Msg в параметре Param, MessageBox использует процедуру
        FormatStr.

             См. также: константы mfXXXX, процедуру FormatStr

         B.Pascal 7 & Objects/TV#2       - 66 -



         Функция: MessageBoxRect                                MsgBox
        -----------------------------------------------------------------

            Описание: function MessageBoxRect (var R: TRect;
                                      const Msg: String; Params: Pointer;
                                      AOptions: Word): Word;

            Функция:  Работает  так  же,  как  и MessageBox, но позволяет
        задавать ограничивающий прямоугольник для диалогового окна.

             См. также: функцию MessageBox




         B.Pascal 7 & Objects/TV#2       - 67 -

         Константы mfXXXX                                       MsgBox
        -----------------------------------------------------------------

             Функция: Функции Turbo Vision для работы с окнами сообщений,
        MessageBox  и  MessageBoxRect,  используют  константы  mfXXXX для
        описания типа выдаваемых сообщений и кнопок, появляющихся в окне.

             Значения:  Следующие  константы,  передаваемые  MessageBox в
        параметре AOptions, обозначают тип окна сообщений:

          ---------------------------------------------------------------
          Константа     Значение  Назначение
          ---------------------------------------------------------------
          mfWarning       $0000   Выдавать окно предупреждений

          mfError         $0001   Выдавать окно ошибок

          mfInformation   $0002   Выдавать окно информации

          mfConfirmation  $0003   Выдавать окно подтверждения
          ---------------------------------------------------------------

             Следующие константы, передаваемые MessageBox или MessageBox-
        Rect  в параметре AOptions, определяют, какие кнопки появляются в
        окне сообщений:

          ---------------------------------------------------------------
          Константа     Значение  Назначение
          ---------------------------------------------------------------
          mfYesButton     $0100   Помещать в диалоговое окно кнопку "Yes"

          mfNoButton      $0200   Помещать в диалоговое окно кнопку "No"

          mfOKButton      $0400   Помещать в диалоговое окно кнопку "OK"

          mfCancelButton  $0800   Помещать в диалоговое окно кнопку
                                                               "Cancel"

          mfYesNoCancel   $0B00   Стандартное диалоговое окно "Yes", "No",
                                                               "Cancel"

          mfOKCancel      $0C00   Стандартное диалоговое окно "OK",
                                                               "Cancel"
          ---------------------------------------------------------------

                    Рис. 19.8. Флаги окна событий.


         B.Pascal 7 & Objects/TV#2       - 68 -


                        ┌───────────────────────────> mfOKCancel   =$0C00
                        ├─┬─┬─┬─────────────────────> mfYesNoCancel=$0B00
                        │ │ │ │             ┌───┬───> mfConfirmation=$0003
             ╔═══╤═╤═╤═╤╧╤╧╤╧╤╧╤═╤═╤═╤═╤═╤═╤╧╤══╧╗
             ║msb│ │ │ │ │ │ │ │ │ │ │ │ │ │ │1sb║
             ╚═══╧═╧═╧═╧═╧═╧╤╧╤╧╤╧╤╧═╧═╧═╧═╧╤╧═╤═╝
                            │ │ │ │         │  └────> mfError      = $0001
                            │ │ │ │         └───────> mfInformation= $0002
                            │ │ │ └─────────────────> mfYesButton  = $0100
                            │ │ └───────────────────> mfNoButton   = $0200
                            │ └─────────────────────> mfOKButton   = $0400
                            └───────────────────────> mfCancelButton=$0800

             См. также: функцию MessageBox, функцию MessageBoxRect


         Переменная MinWinSize                                  Views
        -----------------------------------------------------------------

             Описание: MInWinSize: TPoint = (X: 16; Y: 6);

             Функция:  Определяет минимальный размер объекта окна. Значе-
        ние  возвращается  в параметре Min при вызове TWindow.SizeLimits.
        MinWinSize-  глобальная  переменная.  Ее  значение  влияет на все
        окна,   если   только  какой-либо  тип  окна  не   переопределяет
        SizeLimits, игнорируя MinWinSize.

             См. также: TWindow.SizeLimits


         Переменная MouseButtons                                Drivers
        -----------------------------------------------------------------

             Описание: MouseButtons: Byte;

             Функция:  Содержит текущее состояние кнопок "мыши". Значение
        MouseButtons  обновляется  обработчиком  прерываний  "мыши",  при
        каждом  нажатии  или  отпускании кнопки. Для анализа MouseButtons
        можно использовать константы mbXXXX.

             См. также: константы mbXXX




         B.Pascal 7 & Objects/TV#2       - 69 -

         Переменная MouseEvents                                 Drivers
        -----------------------------------------------------------------

             Описание: MouseEvents: Boolean = False;

             Функция:  Устанавливается равным True, если InitEvents обна-
        руживает   "мышь";  в  противном  случае,  устанавливается равным
        False.  В  случае  значения False все процедуры обработки событий
        от "мыши" обходятся.

             См. также: GetMouseEvent


         Переменная MouseIntFlag                                Drivers
        -----------------------------------------------------------------

             Описание: MouseIntFlag: Byte;

             Функция:  Используется внутри драйвера "мыши" Turbo Vision и
        отображаемыми элементами. Устанавливается при возникновении собы-
        тия от "мыши".


         Переменная MouseReverse                                Drivers
        -----------------------------------------------------------------

             Описание: const MouseReverse: Boolean = False;

             Функция: Установка значения MouseReverse равным True застав-
        ляет  администратор событий поменять местами флаги mbLeftButton и
        mbRightButton из поля Button записей TEvent.

             См. также: константы mbXXXX, тип TEvent


         Переменная MouseWhere                                  Drivers
        -----------------------------------------------------------------

             Описание:  MouseWhere: TPoint;

             Функция:  Содержит текущую позицию "мыши" в глобальных коор-
        динатах.  Значение MouseWhere обновляется обработчиком прерываний
        от "мыши" при ее перемещении. Используйте процедуру MakeLocal для
        преобразования   к  локальным  (относительно  окна)  координатам.
        MouseWhere   передается  обработчикам  событий  вместе  с другими
        данными "мыши".

             См. также: методы GetMouseEvent, GetEvent; MakeLocal


         Процедура MoveBuf                                      Objects
        -----------------------------------------------------------------


         B.Pascal 7 & Objects/TV#2       - 70 -

             Описание: procedure  MoveBuf(var Dest; var Source;
                                                Attr: Byte; Count: Word);

             Функция:  Помещает текст и видеоатрибуты в буфер для исполь-
        зования  совместно с методами WriteBuf или WriteLine. Dest должен
        представлять собой TDrawBuffer (или эквивалентный массив слов), а
        Source должен быть массивом байт. Count байт помещается из Source
        в младшие байты соответствующих слов в Dest. Старшие байты слов в
        Dest  устанавливаются равными Attr или остаются неизменными, если
        Attr- 0.

             См. также: тип TDrawBuffer, MoveChar, MoveCStr, MoveStr.


         Процедура MoveChar                                    Drivers
        -----------------------------------------------------------------

             Описание: procedure MoveChar(var Dest; C: Char;
                                                Attr: Byte; Count: Word);

             Функция:   Копирует  символы  в  буфер  для  использования с
        TView.WriteBuf   или TView.WriteLine.  Параметр Dest  должен быть
        массивом  TDrawBuffer (или эквивалентным массивом слов).  Младшие
        байты первых  Count   слов  Dest   устанавливаются равными С  или
        остаются неизменными,  если Ord(C)  равно 0.  Старшие байты  слов
        устанавливаются равными Attr или остаются неизменными, если  Attr
        равно 0.

             См. также: тип TDrawBuffer, MoveBuf, MoveCStr, MoveStr


         Процедура MoveCStr                                     Drivers
        -----------------------------------------------------------------

             Описание: procedure MoveCStr(var Dest; Str: String;
                                                          Attrs: Word);

             Функция: Копирует двухцветную строку в буфер для использова-
        ния  с  TView.WriteBuf  или TView.WriteLine. Параметр Dest должен
        быть  массивом  TDrawBuffer  (или  эквивалентным  массивом слов).
        Символы  из Str копируются в младшие байты соответствующих слов в
        Dest.  Старшие  байты  слов  устанавливаются равными Lo(Attr) или
        Hi(Attr).  Символы  "~"  в  строке  используются для переключения
        между двумя байтами атрибута, передаваемыми в слове Attr.

             См. также: тип TDrawBuffer, MoveChar, MoveBuf, MoveStr


         Процедура MoveStr                                      Drivers
        -----------------------------------------------------------------

             Описание: procedure  MoveStr(var Dest;
                                                Str: String; Attr: Byte);

         B.Pascal 7 & Objects/TV#2       - 71 -


             Функция:   Копирует   строку  в  буфер  для  использования с
        TView.WriteBuf   или TView.WriteLine.  Параметр Dest  должен быть
        массивом  TDrawBuffer (или эквивалентным массивом слов).  Символы
        в Str копируются  в   младшие байты соответствующих слов в  Dest.
        Старшие  байты  слов  устанавливаются  равными  Attr или остаются
        неизменными, если Attr равно 0.

             См. также: тип TDrawBuffer, MoveChar, MoveCStr, MoveBuf


         Процедура NewBuffer                                    Memory
        -----------------------------------------------------------------

             Описание: procedure  NewBuffer (var P: Pointer; Size: Word);

             Функция:  Выделяет  перемещаемый буфер изменяемых размеров с
        размером  Size  байт  помимо  динамически распределяемой памяти в
        области,  отведенной  для буферов редактора, и присваивает указа-
        тель P. Впоследствии размер памяти, связанной с P, можно изменить
        с   помощью  SetBufferSize.  Этот  буфер  освобождается с помощью
        DisposeBuffer, а не FreeMem или Dispose.

             Внимание! В любой момент администратор памяти может перемес-
        тить  этот буфер, но в этом случае он соответственно изменит зна-
        чение указателя P. Это означает, что P всегда является правильным
        указателем,  однако  другие  величины,  основанные  на нем, могут
        стать неверными без предупреждения.

             См. также: процедуру DisposeBuffer, функцию GetBufferSize,
        функцию SetBufferSize


         Процедура NewCache                                     Memory
        -----------------------------------------------------------------

             Описание: procedure  NewCache (var P: Pointer; Size: Word);

             Функция: Выделяет "кэш"- буфер размером Size байт и присваи-
        вает  указатель  P.  Если "кэш"- буфер таких размеров выделить не
        удается, то P присваивается значение nil.

             Если в дальнейшем администратору памяти понадобится передать
        это кэш-пространство для других целей,  то он присвоит P значение
        nil.  Перед  использованием кэш-буферов убедитесь в том,  что они
        существуют, поскольку Ваша программа не контролирует действия ад-
        министратора памяти.

             Turbo Vision  использует  кэш-буфера  при работе с объектами
        групп со взведенными флагами ofBuffered, поскольку это значитель-
        но ускоряет работу операций перерисовки.

             См. также: процедуру DisposeCache

         B.Pascal 7 & Objects/TV#2       - 72 -



         Функция: NewItem                                       Menus
        -----------------------------------------------------------------

             Описание: function NewItem(Name, Param: TMenuStr;
                                           KeyCode: Word; Command: Word;
                                           AHelpCtx: Word;
                                           Next: PMenuItem): PMenuItem;

             Функция:  Выделяет  память  и  возвращает указатель на новую
        запись  TMenuItem,  которая  представляет элемент меню (используя
        NewStr  для  выделения  полей указателей на строки Name и Param).
        Параметр  Name  должен  быть непустой строкой, а параметр Command
        должен  быть  ненулевым.  Вызовы  NewItem,  NewLine,  NewMenu   и
        NewSubMenu  могут  быть  вложенными  для создания полного  дерева
        меню в одном операторе Паскаля.  Примеры можно найти в Главе  10,
        "Объекты прикладной программы".

             См. также: TApplication.InitMenuBar, тип TMenuView, NewLine,
        NewMenu, NewSubMenu


         Функция: NewLine                                       Menus
        -----------------------------------------------------------------

             Описание: function NewLine(Next: PMenuItem): PMenuItem;

             Функция:  Выделяет  память  и  возвращает указатель на новую
        запись  TMenuItem,  которая  представляет разделительную строку в
        окне меню.

             См. также: TApplication.InitMenuBar, тип TMenuView, NewMenu,
        NewSubMenu, NewItem


         Функция: NewMenu                                       Menus
        -----------------------------------------------------------------

             Описание: function NewMenu(Items: PMenuItem): Pmenu;

             Функция:  Выделяет  память  и  возвращает указатель на новую
        запись TMenu. Поля Items и Default записи устанавливаются равными
        значению, заданному параметром Items.

             См. также: TApplication.InitMenuBar, тип TMenuView, NewLine,
        NewSubMenu, NewItem


         Функция: NewNode                                       OutLine
        -----------------------------------------------------------------

             Описание: function  NewNode (const AText: String;

         B.Pascal 7 & Objects/TV#2       - 73 -

                                      AChildren, ANext: PNode): PNode;

             Функция: Создает память и выделяет узловую запись типа TNode
        для  списка  иерархической  структуры  и  возвращает указатель на
        новый  узел.  NewNode  задает  поля нового узла Text, ChildList и
        Next равными соответственно AText, AChildList и ANext.

             См. также: процедуру DisposeNode, тип TNode


         Функция: NewSItem                                      Dialogs
        -----------------------------------------------------------------

             Описание: function  NewSItem(const Str:  String;
                                           ANext:  PSItem): PSItem;

             Функция:  Выделяет  и  возвращает  указатель на новую запись
        PSItem.  Поля  Value  и  Next  записи  устанавливаются    равными
        NewStr(Str)  и  ANext  соответственно.  Функция NewSItem и запись
        типа  TSItem  позволяют  легко  создавать связанные списки строк.
        Примеры можно найти в Главе 12.


         Функция: NewStatusDef                                  Menus
        -----------------------------------------------------------------

             Описание: function NewStatusDef(AMin, AMax: Word;
                                      AItems: PStatusItem;
                                      ANext: PStatusDef): PStatusDef;

             Функция:  Выделяет  память  и  возвращает указатель на новую
        запись  TStatusDef.  Запись инициализируется заданными значениями
        параметров. Вызовы NewStatusDef и NewStatusKey могут быть вложен-
        ными  для создания полных описаний строк состояния в одном опера-
        торе Паскаля. Примеры можно найти в Главе 2.

             См. также:     TApplication.InitStatusLine,     TStatusLine,
        NewStatusKey


         Функция: NewStatusKey                                  Menus
        -----------------------------------------------------------------

             Описание: function  NewStatusKey (AText: String;
                                      AKeyCode: Word; ACommand: Word;
                                      ANext: PStatusItem): PStatusItem;

             Функция:  Выделяет  память  и  возвращает указатель на новую
        запись TStatusItem. Запись инициализируется со значениями параме-
        тров (NewStr используется для создания поля указателя Text). Если
        AText пусто (результатом будет nil в поле Text), то элемент стро-
        ки  состояния  будет  невидимым,  но  будет обеспечивать, однако,
        связь данного KeyCode с Command.

         B.Pascal 7 & Objects/TV#2       - 74 -


             См. также:     TApplication.InitStatusLine,     TStatusLine,
        NewStatusDef


         Функция: NewStr                                        Objects
        -----------------------------------------------------------------

             Описание: function NewStr(const S: String): PString;

             Функция:  Это  подпрограмма  выделения строки в динамической
        области  памяти.  Если S- нулевая, то NewStr возвращает указатель
        nil;  в противном случае, выделяются Length(S)+1 байт, содержащие
        копию S и возвращается указатель на первый байт.

             Строки, создаваемые с помощью NewStr, могут быть освобождены
        с помощью DisposeStr.

             См. также: DisposeStr


         Функция: NewSubMenu                                    Menus
        -----------------------------------------------------------------

             Описание: function NewSubMenu (Name: TmenuStr;
                                      AHelpCtx: Word; SubMenu: PMenu;
                                      Next: PMenuItem): PMenuItem;

             Функция:  Выделяет  память  и  возвращает указатель на новую
        запись TMenuItem, которая представляет собой подменю (для выделе-
        ния поля указателя Name используется NewStr).

             См. также:   TApplication.InitMenuBar,TMenuView,    NewLine,
        NewItem




         B.Pascal 7 & Objects/TV#2       - 75 -

         Константы ofXXXX                                       Views
        -----------------------------------------------------------------

             Функция:  Эти  мнемонические обозначения относятся к битовым
        положениям позиции поля Options отображаемого элемента. Установка
        бита  в  1  указывает на тот факт, что отображаемый элемент имеет
        данный  конкретный атрибут; сброс бита означает, что атрибут отк-
        лючен или запрещен. Например:

                      MyWindow.Options := ofTileable + ofSelectable;

             Значения: Определены следующие параметры флагов:

                          Таблица 19.28. Флаги Options.

        -----------------------------------------------------------------
         Константа      Значение, если установлена
        -----------------------------------------------------------------

         ofSelectable   Отображаемый   элемент   должен   выбираться
                        автоматически,  например,  отметкой  "мышью"   на
                        отображаемом   элементе   или   клавишей  Tab   в
                        диалоговом окне.

         ofTopSelect    Отображаемый элемент помещается перед всеми
                        другими  отображаемыми    элементами,  когда   он
                        выбирается.   Когда  бит  ofTopSelect установлен,
                        вызов   TView.Select      соответствует    вызову
                        TView.MakeFirst. В окнах (TWindow и его потомках)
                        по умолчанию этот бит установлен,  что заставляет
                        их при выборе  располагаться перед всеми  другими
                        окнами в оперативной области экрана.

         ofFirstClick   После выбора отображаемого элемента с помощью
                        "мыши" нажатие будет также обработано как обычное
                        нажатие  "мыши".   Если  флаг   ofSelectable   не
                        установлен, то действие  флага не имеет  эффекта.
                        Если  бит  сброшен,  то  отметка "мышью", которая
                        выбирает   отображаемый    элемент,   не    имеет
                        дальнейшего действия.

         ofFramed       Отображаемый  элемент  должен иметь вокруг себя
                        рамку.   TWindow  и  его  потомки  имеют TFrame в
                        качестве  своего  последнего  подэлемента.  Когда
                        объект рамки рисует  себя, он также  рисует рамку
                        вокруг  любого  другого  подэлемента,  у которого
                        установлен бит ofFrame.

         ofPreProcess   Отображаемый элемент  должен получать активные
                        события  (события  для  активного   отображаемого
                        элемента)  перед  тем,   как  они  будут  посланы
                        активному  отображаемому элементу.


         B.Pascal 7 & Objects/TV#2       - 76 -

         ofPostProcess  Отображаемый элемент  должен получать активные
                        события,  если  активный отображаемый элемент  не
                        смог их обработать.

         ofBuffered     Используется только для объектов TGroup.  Если
                        имеется достаточное количество памяти, то  должен
                        быть выделен  кэш-буфер.   Буфер группы  содержит
                        образ  экрана  для всей  группы,  таким   образом
                        увеличивая скорость перерисовки.  При  отсутствии
                        буфера,    TGroup.Draw  вызывается   для   метода
                        DrawView каждого  подэлемента. Если  впоследствии
                        New и GetMem не могут получить достаточно памяти,
                        то память под буфера группы будет освобождена.

         ofTileable     Оперативная область экрана может расположить этот
                        отображаемый  элемент  мозаично  (или  каскадно).
                        Используется только с объектами TWindow.

         ofCenterX      При вставке в группу отображаемый  элемент
                        центрируется по оси Х своего владельца.

         ofCenterY      При вставке в группу отображаемый элемент
                        центрируется по оси Y своего владельца.

         ofCentered     При вставке в группу отображаемый элемент
                        центрируется по обеим осям своего владельца.

         ofValidate     Перед потерей фокуса ввода отображаемый элемент
                        должен вызывать Valid.

         ofVersion      Отображаемый элемент содержит поля, зависящие от
                        версии. Подробная информация о версиях содержится
                        в Главе 17.

         ofVersion10    Отображаемый элемент является отображаемым
                        элементом версии 1.0.  Подробная информация о
                        версиях содержится в Главе 17.

         ofVersion20    Отображаемый элемент является отображаемым
                        элементом версии 2.0.  Подробная информация о
                        версиях содержится в Главе 17.
        -----------------------------------------------------------------



         B.Pascal 7 & Objects/TV#2       - 77 -


                Биты Options определены следующим образом:

             Рис. 19.9. Битовые флаги Options.



                  ┌─┬─────────────────────────────> ofVersion     = $3000
                  │ │     ┌─┬─────────────────────> ofCentered    = $0300
           ╔═══╤═╤╧╤╧╤═╤═╤╧╤╧╤═╤═╤═╤═╤═╤═╤═╤═══╗
           ║msb│ │ │ │ │ │ │ │ │ │ │ │ │ │ │1sb║
           ╚═══╧═╧═╧╤╧═╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧══╤╝
                    │   │ │ │ │ │ │ │ │ │ │   └───> ofSelectable  = $0001
                    │   │ │ │ │ │ │ │ │ │ └───────> ofTopSelect   = $0002
                    │   │ │ │ │ │ │ │ │ └─────────> ofFirstClick  = $0004
                    │   │ │ │ │ │ │ │ └───────────> ofFramed      = $0008
                    │   │ │ │ │ │ │ └─────────────> ofPreProcess  = $0010
                    │   │ │ │ │ │ └───────────────> ofPostProcess = $0020
                    │   │ │ │ │ └─────────────────> ofBuffered    = $0040
                    │   │ │ │ └───────────────────> ofTileable    = $0080
                    │   │ │ └─────────────────────> ofCenterX     = $0100
                    │   │ └───────────────────────> ofCenterY     = $0200
                    │   └─────────────────────────> ofValidate    = $0400
                    └─────────────────────────────> ofVersion20   = $1000


             См. также: TView.Options


         Константы ovXXXX                                       Outline
        -----------------------------------------------------------------

             Функция:  Метод CreateGraph из TOutlineViewer получает пара-
        метр с именем Flags, содержащий комбинацию констант ovXXXX. Flags
        определяет  то,  как  визуализатор  иерархических структур должен
        рисовать графическую часть иерархической структуры.

             Значения: Определены следующие константы:


             ╔════╤════╤════╤════╤════╤════╤════╤════╕
             ║msb │    │    │    │    │    │    │1sb │
             ╚═╤══╧════╧════╧════╧═╤══╧═╤══╧═╤══╧═╤══╛
               └──────────┬────────┘    │    │    └────ovExpanded  = $01
                          │             │    └─────────ovChildren  = $02
                  Не определены         └──────────────ovLast      = $04



         B.Pascal 7 & Objects/TV#2       - 78 -


               Таблица 19.29. Константы просмотра иерархических структур

             ------------------------------------------------------------
             Константа     Значение  Назначение
             ------------------------------------------------------------
             ovExpanded      $01     Узел "раскрывается" (показываются
                                     порожденные узлы)

             ovChildren      $02     Узел имеет порожденные узлы

             ovLast          $04     Узел является последним порожденным
                                     узлом порождающего узла
             ------------------------------------------------------------


         Переменная PositionalEvents                            Views
        -----------------------------------------------------------------

             Описание: PositionalEvents: Word = evMouse;

             Функция: Определяет классы событий, являющиеся события поло-
        жения.  Метод  объекта  группы  HandleEvent использует переменные
        FocusedEvents  и PositionalEvents для определения того, как пере-
        дать события подэлементам группы. Если класс события не принадле-
        жит  FocusedEvents  или PositionalEvents, то оно интерпретируется
        группой как событие-извещение.

             См. также: TGroup.HandleEvent, тип TEvent, константы события
        evXXXX, переменная FocusedEvents


         Процедура PrintStr                                     Drivers
        -----------------------------------------------------------------

             Описание: procedure PrintStr(S: String);

             Функция:  Печатает строку S на экране, используя вызов функ-
        ции  DOS  40H  для  записи  на стандартное устройство вывода DOS.
        Имеет тот же эффект, что и Write(S), с той разницей, что PrintStr
        не требует  компоновки  прикладной  программы  с библиотекой вво-
        да-вывода файлов.




         B.Pascal 7 & Objects/TV#2       - 79 -

         Тип PString                                            Objects
        -----------------------------------------------------------------

             Описание: PString = ^String;

             Функция: Определяет указатель на строку.


         Тип PtrRec                                             Objects
        -----------------------------------------------------------------

             Описание:  PtrRec = record
                             Ofs, Seg: Word;
                        end;

             Функция:  Запись,  содержащая  значение  сегмента и смещения
        указателя.


         Процедура RegisterColorSel                             ColorSel
        -----------------------------------------------------------------

             Описание: procedure RegisterColorSel;

             Функция: Для каждого из типов объектов, определенных в моду-
        ле   ColorSel:   TColorSelector,   TMonoSelector,  TColorDisplay,
        TColorGroupList,   TColorItemList   и   TColorDialog,    вызывает
        RegisterType.  После  вызова RegisterColorSel каждый из этих типы
        можно читать и писать из потока ввода-вывода.

             См. также: процедуру RegisterType


         Процедура RegisterDialogs                              Dialogs
        -----------------------------------------------------------------

             Описание: procedure RegisterDialogs;

             Функция:  Вызывает  RegisterType  для  каждого типа объекта,
        определенного  в  модуле  Dialogs:  TDialog, TInputLine, TButton,
        TCluster,  TRadioButtons,  TCheckBoxes,  TListBox,   TStaticText,
        TParamText,  TLabel,  THistory.  Вызов  RegisterDialogs позволяет
        использовать  все эти типы для чтения и записи с потока ввода-вы-
        вода.

             См. также: TStreamRec, RegisterType




         B.Pascal 7 & Objects/TV#2       - 80 -

         Процедура RegisterEditors                              Editors
        -----------------------------------------------------------------

             Описание: procedure RegisterEditors;

             Функция:  Вызывает  RegisterType  для  каждого типа объекта,
        определенного  в  модуле  Editors:  TEditor,  TMemo, TFileEditor,
        TIndicator и TEditWindow. Вызов RegisterEditors позволяет исполь-
        зовать все эти типы для чтения и записи с потока ввода-вывода.

             См. также: RegisterType


         Процедура RegisterStdDlg                               StdDlg
        -----------------------------------------------------------------

             Описание: procedure RegisterStdDlg;

             Функция:  Вызывает  RegisterType  для  каждого типа объекта,
        определенного  в  модуле StdDlg: TFileInputLine, TFileCollection,
        TFileList,      TFileInfoPane,    TFileDialog,    TDirCollection,
        TDirListBox   и   TChDirDialog.  Вызов  RegisterStdDlg  позволяет
        использовать  все  эти  типы  для   чтения  и  записи  с   потока
        ввода-вывода.

             См. также: RegisterType


         Процедура RegisterType                                 Objects
        -----------------------------------------------------------------

             Описание: procedure RegisterType(var S: TStreamRec);

             Функция:  Регистрирует  все  типы  объектов с потоками Turbo
        Vision, создавая вход в связанный список всех известных объектов.
        Потоки могут хранить и возвращать только эти известные типы объе-
        ктов.  Каждый зарегистрированный объект требует уникальной записи
        регистрации в потоке типа TStreamRec.

             См. также: TStream.Get, TStreamPut, TStreamRec




         B.Pascal 7 & Objects/TV#2       - 81 -

         Процедура RegisterValidate                             Validate
        -----------------------------------------------------------------

             Описание: procedure RegisterValidate;

             Функция:  Вызывает  RegisterType  для  каждого типа объекта,
        определенного     в    модуле   Validate:    TPXPictureValidator,
        TFilterValidator,     TRangeValidator,     TLookupValidator     и
        TStringLookupValidator.  Вызов RegisterValidate позволяет исполь-
        зовать все эти типы с потоками ввода-вывода.

             См. также: RegisterType


         Переменная RepeatDelay                                 Drivers
        -----------------------------------------------------------------

             Описание:  RepeatDelay: Word = 8;

             Функция: Определяет число тиков таймера (1/18.2 часть секун-
        ды),  которое должно пройти перед генерацией событий evMouseAuto.
        Временной  интервал между событиями evMouseAuto всегда составляет
        один тик.

             См. также: DoubleDelay, GetMouseEvent, константы evXXXX


         Переменная ReplaceStr                                  Editors
        -----------------------------------------------------------------

             Описание:  ReplaceStr: string [80] = '';

             Функция:  содержит  последнюю  строку, замененную в операции
        поиска и замены.

             См. также: переменную FindStr, TEditor.DoSearchReplace


         Переменная SaveCtrlBreak                               Drivers
        -----------------------------------------------------------------

             Описание:  SaveCtrlBreak: Boolean = False;

             Функция:  Процедура InitSysError сохраняет в этой переменной
        состояние  реакции  на  Ctrl-Break  из  DOS  перед    запрещением
        реакции  на  Ctrl-Break.  DoneSysError  восстанавливает состояние
        реакции  на Ctrl-Break в соответствии со значением, сохраненным в
        этой переменной.

             См. также: InitSysError, DoneSysError


         B.Pascal 7 & Objects/TV#2       - 82 -

         Константы sbXXXX                                       Views
        -----------------------------------------------------------------

             Функция:   Эти   константы   определяют   различные  области
        TScrollBar, в которых может произойти перещелкивание "мышью".

             Функция  TScrollBar.ScrollStep  осуществляет  преобразование
        этих  констант в действительные значения шага прокрутки. Хотя она
        определена,  константа  sbIndicator   никогда  не  передается   в
        TScrollBar.ScrollStep.

                   Таблица 19.30. Константы полосы прокрутки.
             -----------------------------------------------------------
              Константа  Значение  Назначение
             -----------------------------------------------------------
             sbLeftArrow    0      Левая стрелка горизонтальной полосы
                                   прокрутки.

             sbRightArrow   1      Правая стрелка горизонтальной полосы
                                   прокрутки.

             sbPageLeft     2      Левая страничная область
                                   горизонтальной полосы прокрутки.

             sbPageRight    3      Правая страничная область
                                   горизонтальной полосы прокрутки.

             sbUpArrow      4      Стрелка вверх вертикальной полосы
                                   прокрутки.

             sbDownArrow    5      Стрелка вниз вертикальной полосы
                                   прокрутки.

             sbPageUp       6      Верхняя страничная область
                                   вертикальной полосы прокрутки.

             sbPageDown     7      Нижняя страничная область
                                   вертикальной полосы прокрутки.

             sbIndicator    8      Индикатор на полосе прокрутки.
             -----------------------------------------------------------


         B.Pascal 7 & Objects/TV#2       - 83 -


                                                   ^ >── sbUpArrow
                                                   ▒
                                                   ▒ >── sbPageUp
                                                   ▒
                             sbIndicator ────────<
                             │                     ▒
                             │                     ▒
                             │                     ▒
                             │                     ▒ >── sbPageDown
                             │                     ▒
                             │                     ▒
                             V                     V >── sbDownArrow
             <▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒>─┘
             ^          ^           ^            ^
             │          │           │            │
             │      sbPageLeft  sbPageRight      │
         sbLeftArrow                       sbRightArrow

             Рис. 19.10. Элементы полосы прокрутки.

             Методу TWindow.StandardScrollBar могут
        передаваться    следующие значения:


                   Таблица 19.31. Константы StandardScrollBar.

             -----------------------------------------------------------
              Константа        Значение  Назначение
             -----------------------------------------------------------
             sbHorizontal      $0000   Полоса прокрутки горизонтальна.

             sbVertical        $0001   Полоса прокрутки вертикальна.

             sbHandleKeyboard  $0002   Полоса прокрутки реагирует на
                                       команды клавиатуры.
             -----------------------------------------------------------

             См. также: TScrollBar, TScrollBar.TScrollStep




         B.Pascal 7 & Objects/TV#2       - 84 -

         Переменная ScreenBuffer                                Drivers
        -----------------------------------------------------------------

             Описание: ScreenBuffer: Pointer;

             Функция: Указатель на буфер экрана, установленный InitVideo.

             См. также: InitVideo


         Переменная ScreenHeight                                Drivers
        -----------------------------------------------------------------

             Описание: ScreenHeight: Byte;

             Функция:  Устанавливается  InitVideo  и  SetVideoMode равной
        высоте экрана в строках для текущего экрана.

             См. также: InitVideo, SetVideoMode, ScreenWidth


         Переменная ScreenMode                                  Drivers
        -----------------------------------------------------------------

             Описание: ScreenMode: Word;

             Функция: Хранит текущий видеорежим. Изначально устанавливае-
        мая инициализационным кодом модуля Drivers, ScreenMode может быть
        изменена с использованием SetVideoMode. Значения ScreenMode обыч-
        но устанавливаются с использованием мнемонических констант режима
        экрана smXXXX.

             См. также: InitVideo, SetVideoMode, smXXXX


         Переменная ScreenWidth                                 Drivers
        -----------------------------------------------------------------

             Описание: ScreenWidth: Byte;

             Функция:  Устанавливается  InitVideo  равным  ширине  экрана
        (числу символов с строке).

             См. также: InitVideo




         B.Pascal 7 & Objects/TV#2       - 85 -

         Тип SelectMode                                         Views
        -----------------------------------------------------------------

             Описание: SelectMode     =    (NormalSelect,    EnterSelect,
        LeaveSelect);

             Функция: Используется внутри Turbo Vision.

             См. также: TGroup.ExecView, TGroup.SetCurrent.


         Функция SetBufferSize                                  Memory
        -----------------------------------------------------------------

             Описание: SetBufferSize (P: Pointer; Size: Word): Boolean

             Функция:  Устанавливает  размер буфера, на который указывает
        P,  равным Size байт. P должен быть буфером, выделенным с помощью
        NewBuffer.  Если  новое  выделение  памяти происходит успешно, то
        возвращает True; в противном случае False, и размер буфера остае-
        тся неизменным.

             См. также: процедуру NewBuffer, функцию GetBufferSize


         Процедура SetMemTop                                    Memory
        -----------------------------------------------------------------

             Описание: SetMemTop (MemTop: Pointer);

             Функция: Устанавливает верхнюю границу блока памяти програм-
        мы. Первоначальная верхняя граница соответствует значению, храня-
        щемуся  в  переменной  HeapEnd. SetMemTop обычно используется для
        уменьшения блока памяти программы перед запуском оболочки DOS или
        другой программы и его последующего расширения.




         B.Pascal 7 & Objects/TV#2       - 86 -

         Процедура SetVideoMode                                 Drivers
        -----------------------------------------------------------------

             Описание: procedure SetVideoMode(Mode: Word);

             Функция:  Устанавливает  видеорежим. Mode- это одна из конс-
        тант  smCO80,  smBW80  или  smMono  с  необязательным добавлением
        smFont8x8  для выбора 43 или 50-строчного режима в случае EGA или
        VGA.  SetVideoMode  инициализирует  те же самые переменные, что и
        InitVideo  (за  исключением  переменной  StartupMode,  которая не
        изменяется).  SetVideoMode  обычно не вызывается непосредственно.
        Вместо   этого  следует  использовать  метод  объекта   программы
        SetScreenMode, который также устанавливает палитру программы.

             См. также:        InitVideo,        константы        smXXXX,
        TProgram.SetScreenMode


         Константы sfXXXX                                       Views
        -----------------------------------------------------------------

             Функция: Эти константы используются для доступа к соответст-
        вующим  битам полей TView.State. Поля TView.State никогда не сле-
        дует  изменять  непосредственно, вместо этого Вы должны использо-
        вать метод отображаемого элемента SetState.

             Значения: Определены следующие флаги состояния:

                   Таблица 19.32. Константы флагов состояния.

        -----------------------------------------------------------------
          Константа   Смысл, если флаг установлен
        -----------------------------------------------------------------
         sfVisible    Отображаемый элемент виден на фоне своего
                      владельца.  sfVisible   установлен  по   умолчанию.
                      Методы отображаемого элемента Show и Hide  изменяют
                      его значение.   При sfVisible отображаемый  элемент
                      не  обязательно  видим  на  экране,  поскольку  его
                      владелец может быть невидим. Для проверки видимости
                      на  экране  вызовите  метод  отображаемого элемента
                      sfExposed.

         sfCursorVis  Курсор отображаемого элемента видим.  По умолчанию
                      сброшен.    ShowCursor   и   HideCursor    изменяют
                      значение sfCursorVis.

         sfCursorIns  Курсор отображаемого элемента представляет собой
                      сплошной   блок   (прямоугольник).   По   умолчанию
                      сброшен, делая курсор подчеркнутым.  BlockCursor  и
                      NormalCursor  изменяют значение sfCursorVis.

         sfShadow     Отображаемый  элемент  имеет  тень.


         B.Pascal 7 & Objects/TV#2       - 87 -

         sfActive     Отображаемый элемент представляет собой активное
                      окно или подэлемент элемента активного окна.

         sfSelected   Отображаемый  элемент - это  выбранный  в настоящий
                      момент подэлемент  внутри своего  владельца. Каждый
                      объект группы имеет поле Current, которое указывает
                      на   текущий   выбранный подэлемент  (или nil, если
                      подэлементы  не  выбраны).  В  группе  может   быть
                      только один выбранный подэлемент.

         sfFocused    Отображаемый элемент имеет фокус ввода.
                      Отображаемый  элемент  имеет  фокус  ввода, если он
                      выбран и  все владельцы   выше его  также  выбраны,
                      т.е.  если  отображаемый элемент находится  в цепи,
                      образованной   указателями   Current   всех  групп,
                      начиная  с   Application.  Последний   отображаемый
                      элемент  цепи -  это  конечное  место назначения для
                      всех событий, находящихся в фокусе.

        sfDragging    Отображаемый  элемент  перемещается.

         sfDisabled   Отображаемый элемент недоступен. Недоступный
                      элемент игнорирует все события, посылаемые ему.

         sfModal      Отображаемый элемент является режимным. Когда отоб-
                      ражаемый элемент начинает исполняться (путем вызова
                      ExecView), этот отображаемый элемент становится ре-
                      жимным. Режимный видимый элемент представляет собой
                      вершину (корень) дерева активных  событий,  получая
                      события  и  управляя ими до тех пор,  пока не будет
                      вызван его метод EndModal.  Во время этого "локаль-
                      ного" цикла событий события передаются нижним подэ-
                      лементам в дереве отображаемых подэлементов.  Собы-
                      тия от этих нижних отображаемых элементов передают-
                      ся вверх по дереву,  не выходя за пределы режимного
                      отображаемого элемента.

         sfExposed    У отображаемого  элемента прямой или косвенный вла-
                      делец - объект TApplication  и,  следовательно,  он
                      может быть виден на экране. Метод Exposed использу-
                      ет этот флаг для определения того,  может  ли  быть
                      какая-либо  часть  отображаемого  элемента действи-
                      тельно видимой на экране.
        -----------------------------------------------------------------


         B.Pascal 7 & Objects/TV#2       - 88 -



             ╔═══╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═══╗
             ║msb│ │ │ │ │ │ │ │ │ │ │ │ │ │ │1sb║
             ╚═══╧═╧═╧═╧╤╧═╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧══╤╝
                        │   │ │ │ │ │ │ │ │ │   └───> sfVisible   = $0001
                        │   │ │ │ │ │ │ │ │ └───────> sfCursorVis = $0002
                        │   │ │ │ │ │ │ │ └─────────> sfCursorIns = $0004
                        │   │ │ │ │ │ │ └───────────> sfShadow    = $0008
                        │   │ │ │ │ │ └─────────────> sfActive    = $0010
                        │   │ │ │ │ └───────────────> sfSelected  = $0020
                        │   │ │ │ └─────────────────> sfFocused   = $0040
                        │   │ │ └───────────────────> sfDragging  = $0080
                        │   │ └─────────────────────> sfDisabled  = $0100
                        │   └───────────────────────> sfModal     = $0200
                        └───────────────────────────> sfExposed   = $0800

             Рис. 19.11. Биты флага состояния.

             См. также: TView.State


         Переменная ShadowAttr                                  Views
        -----------------------------------------------------------------

             Описание:  ShadowAttr: Byte = $80;

             Функция:  Эта  переменная управляет цветом "тени", доступной
        отображаемым  элементам  с  установленным битом sfShadow. "Тень"-
        это обычно разреженная серая область, отображаемая прямо за края-
        ми видимого элемента для обеспечения иллюзии трехмерности.

             См. также: ShadowSize




         B.Pascal 7 & Objects/TV#2       - 89 -

         Переменная ShadowSize                                  Views
        -----------------------------------------------------------------

             Описание: ShadowSize: TPoint = (X: 2; Y: 1);

             Функция:  Это  значение  управляет  размером "тени", которая
        доступна  отображаемым  элементам с установленным битом sfShadow.
        "Тень"-  это обычно разреженная серая область, отображаемая прямо
        за краями видимого элемента для обеспечения иллюзии трехмерности.
        По умолчанию, размер "тени" - 2 по оси X и 1 по Y.

             TProgram.InitScreen  инициализирует  ShadowSize    следующим
        образом: если режим экрана равен smMono, то ShadowSize устанавли-
        вается равным (0, 0). В остальных случаях ShadowSize устанавлива-
        ется  равным (2, 1), если только не установлен smFont8x8 (43- или
        50-строчный режим), в этом случае устанавливается равным (1, 1).

             См. также: TProgram.InitScreen, ShadowAttr


         Переменная ShowMarkers                                 Drivers
        -----------------------------------------------------------------

             Описание:  ShowMarkers: Boolean;

             Функция:  Используется  для  указания  того, будут ли вокруг
        активных    элементов    управления    размещаться    индикаторы.
        TProgram.InitScreen  устанавливает ShowMarkers равным True,  если
        установлен  монохромный  видеорежим.  В  противном  случае равным
        False. Значение ShowMarkers   может быть установлено равным  True
        также в цветном и черно-белом режиме.

             См. также: TProgram.InitScreen, переменная SpecialChars


         Процедура ShowMouse                                    Drivers
        -----------------------------------------------------------------

             Описание: procedure ShowMouse;

             Функция: ShowMouse уменьшает значение "счетчика спрятываний"
        в  драйвере  "мыши",  и делает курсор "мыши" видимым при значении
        счетчика, равном 0.

             См. также: InitEvents, DoneEvents, HideMouse




         B.Pascal 7 & Objects/TV#2       - 90 -

         Константы smXXXX                                       Drivers
        -----------------------------------------------------------------

             Функция:   Эти   мнемонические   константы   используются  с
        SetVideoMode  для установки соответствующего значения видеорежима
        в ScreenMode.

             Значения: В Turbo Vision определены следующие режимы экрана:

                    Таблица 19.33. Константы режимов экрана.

             -----------------------------------------------------------
             Константа  Значение  Назначение
             -----------------------------------------------------------
             smBW80      $0002  Черно-белый режим на цветном адаптере

             smCO80      $0003  Цветной режим

             smMono      $0007  Монохромный режим

             smFont8x8   $0100  43- или 50-строчный режим
             -----------------------------------------------------------

             См. также: SetVideoMode, ScreenMode


         Переменная SpecialChars                                Views
        -----------------------------------------------------------------

             Описание: SpecialChars: array[0..5] of Char =
                                      (#175, #174, 26, #27, ' ', ' ');

             Функция:  Определяет  символы  индикатора,  используемые для
        подсветки активного отображаемого элемента в монохромном видеоре-
        жиме. Эти символы отображаются, если переменная ShowMarkers имеет
        значение True.

             См. также: переменную ShowMarkers




         B.Pascal 7 & Objects/TV#2       - 91 -

         Константы stXXXX                                       Objects
        -----------------------------------------------------------------

             Функция:  Существует  два  набора  констант,  начинающихся с
        "st", которые используются потоками Turbo Vision.

             Значения:    Следующие  константы   режима  используются   в
        TDosStream  и   TBufStream  для   определения  режима  доступа  к
        файлу при открытии файла в потоках Turbo Vision:

                     Таблица 19.34. Режимы доступа к потоку.

             -----------------------------------------------------------
             Константа  Значение  Назначение
             -----------------------------------------------------------
             stCreate     $3C00   Создать новый файл

             stOpenRead   $3D00   Открыть файл только на чтение

             stOpenWrite  $3D01   Открыть файл только на запись

             stOpen       $3D02   Открыть файл на чтение/запись
             -----------------------------------------------------------

             Следующие значения возвращаются методом объекта Error в поле
        ErrorInfo, когда возникает ошибка потока:

                       Таблица 19.35. Коды ошибок потока.

             -----------------------------------------------------------
             Константа  Значение  Назначение
             -----------------------------------------------------------
             stOk            0   Нет ошибки

             stError        -1   Ошибка доступа

             stInitError    -2   Нельзя инициализировать поток

             stReadError    -3   Чтение за концом потока

             stWriteError   -4   Нельзя расширить поток

             stGetError     -5   Get для незарегистрированного типа
                                 объекта

             stPutError     -6   Put для незарегистрированного типа
                                 объекта
             -----------------------------------------------------------

             См. также: TStream


         B.Pascal 7 & Objects/TV#2       - 92 -

         Переменная StartupMode                                 Drivers
        -----------------------------------------------------------------

             Описание: StartupMode: Word;

             Функция:  InitVideo  сохраняет  текущий  режим экрана в этой
        переменной до переключения в режим экрана, заданный в ScreenMode.
        DoneVideo восстанавливает режим экрана в соответствие со значени-
        ем, запомненным в StartupMode.

             См. также: InitVideo, DoneVideo, ScreenMode


         Переменная StatusLine                                  App
        -----------------------------------------------------------------

             Описание:  StatusLine: PStatusLine = nil;

             Функция:  Указывает  на строку состояния программы или равна
        nil,  если программа не имеет строки состояния. Виртуальный метод
        InitStatusLine  объекта программы создает объект строки состояния
        и  присваивает его StatusLine. Настроенную строку состояния можно
        определить, заменив InitStatusLine, который создаст объект желае-
        мой строки состояния и заставит StatusLine указывать на нее.

             См. также: InitStatusLine


         Функция StdEditMenuItems                               App
        -----------------------------------------------------------------

             Описание:  function StdEditMenuItems (Next: PMenuItem):
                                                               PMenuItem;

             Функция:  Возвращает  указатель  на связанный список пунктов
        стандартного  меню  Edit. Этот список можно использовать либо как
        целое меню, либо как часть более обширного списка пунктов.

             Пункты  стандартного  меню  Edit-  Undo,  Cut, Copy, Paste и
        Clear.


         B.Pascal 7 & Objects/TV#2       - 93 -

         Функция StdEditorDialog                                Editors
        -----------------------------------------------------------------

             Описание:  function StdEditorDialog (Dialog: Integer;
                                                Info: Pointer): Word;

             Функция:  Выдает  на экран диалоговое окно в соответствии со
        значением     Dialog   и   информацией,   переданной   в    Info.
        StdEditorDialogs   рассматривается  в  качестве  рабочего  набора
        диалоговых окон, присваиваемых EditorDialog.

             Этот список можно использовать либо как целое меню, либо как
        часть более обширного списка пунктов.

             См. также: переменную EditorDialog, тип TEditorDialog


         Функция StdFileMenuItems                                App
        -----------------------------------------------------------------

             Описание:  function StdFileMenuItems (Next: PMenuItem):
                                                               PMenuItem;

             Функция:  Возвращает  указатель  на связанный список пунктов
        стандартного  меню  File. Этот список можно использовать либо как
        целое меню, либо как часть более обширного списка пунктов.

             Пункты  стандартного  меню  File-  New, Open, Save, Save As,
        Save All, Change Dir, Dos Shell и Exit.


         Функция StdStatusKeys                                   App
        -----------------------------------------------------------------

             Описание:  function StdStatusKey (Next: PStatusItem):
                                                          PStatusItem;

             Функция:  Возвращает  указатель  на связанный список клавиш,
        часто  используемых в строке состояния. Строка состояния, опреде-
        ленная  по умолчанию для TApplication, использует в качестве пол-
        ного  списка клавиш состояния StdStatusKeys. К определяемой поль-
        зователем  строке  состояния  можно добавить StdStatusKeys, чтобы
        она также поддерживала стандартные команды и определения клавиш.

             Ниже приводится реализация StdStatusKeys:

               function StdStatusKeys (Next: PStatusItem): PStatusItem;
               begin
                 StdStatusKeys :=
                  NewStatusKey ('', kbAltX, cmQuit,
                  NewStatusKey ('', kbF10, cmMenu,
                  NewStatusKey ('', kbAltF3, cmClose,
                  NewStatusKey ('', kbF5, cmZoom,

         B.Pascal 7 & Objects/TV#2       - 94 -

                  NewStatusKey ('', kbCtrlF5, cmResize,
                  NewStatusKey ('', kbF6, cmNext,
                  Next ))))));
               end;

         Функция StdWindowMenuItems                                  App
        -----------------------------------------------------------------

             Описание:  function StdWindowMenuItems (Next: PMenuItem):
                                                               PMenuItem;

             Функция: Возвращает указатель на список пунктов стандартного
        меню  Window. Этот список можно использовать либо как целое меню,
        либо как часть более обширного списка пунктов.

             Пункты  стандартного  меню Window- Tile, Cascade, Close All,
        Size/Move, Zoom, Next, Previous и Close.


         Переменная StreamError Objects
        -----------------------------------------------------------------

             Описание: StreamError: Pointer = nil;

             Функция: Если значение отлично от nil, то StreamError указы-
        вает  на  процедуру,  которая вызывается методом Error потока при
        возникновении  ошибки. Процедура должна иметь тип far и использо-
        вать параметр-переменную типа TStream, т.е. иметь описание:

                      procedure MyStreamErrorProc(var S: TStream); far;

             Переменная  StreamError  позволяет  глобально переопределить
        всю  обработку  ошибок потока. Чтобы изменит обработку ошибок для
        определенного  типа потока, необходимо переопределить метод Error
        этого потока.


         Процедура StoreHistory                                 HistList
        -----------------------------------------------------------------

             Описание: procedure StoreHistory (var S: TStream);

             Функция:  Пишет  используемую в настоящий момент часть блока
        предыстории  в поток S, причем сначала пишет длину блока, а затем
        сам блок. Для восстановления блока предыстории используйте проце-
        дуру LoadHistory.

             См. также: процедуру LoadHistory


         Процедура StoreIndexes                                 ColorSel
        -----------------------------------------------------------------


         B.Pascal 7 & Objects/TV#2       - 95 -

             Описание: procedure StoreIndexes (var S: TStream);

             Функция:  Пишет  набор  цветовых  индексов из ColorIndexes в
        поток  S.  Сохранив  и  повторно  загрузив ColorIndexes в потоке,
        программа  может  восстановить  состояние диалогового окна выбора
        цветов, что позволяет пользователю легко изменять цвета и восста-
        навливать произведенные изменения.

             См. также: переменную ColorIndexes, процедуру LoadIndexes


         Переменная SysColorAttr                                Drivers
        -----------------------------------------------------------------

             Описание:  SysColorAttr: Word = $4E4F;

             Функция: Цвет по умолчанию используется для вывода сообщений
        об ошибках обработчиком системных ошибок. На монохромных системах
        вместо  SysColorAttr SysMonoAttr используется. Сообщения об ошиб-
        ках  с  параметром  отмены/восстановления  отображаются  в строке
        состояния. Предыдущая строка состояния сохраняется и восстанавли-
        вается, когда условия позволяют это сделать.

             См. также: SystemError, SysMonoAttr


         Переменная SysErrActive                                Drivers
        -----------------------------------------------------------------

             Описание: SysErrActive: Boolean = False;

             Функция: Указывает, активен ли обработчик системных ошибок в
        данный момент. Устанавливается равным True InitSysError.


         Переменная SysErrorFunc                                Drivers
        -----------------------------------------------------------------

             Описание: SysErrorFunc: TSysErrorFunc = SystemError;

             Функция: SysErrorFunc  -  это  функция системной ошибки типа
        TSysErrorFunc.  Функция системной ошибки вызывается при возникно-
        вении  критической  ошибки  DOS  или  когда  требуется свопинг на
        компьютере с одним гибким диском. ErrorCode- это значение от 0 до
        15, как определено в таблице 19.36, а Drive- это номер устройства
        (0=A,  1=B и т.д.) для дисковых ошибок. По умолчанию функция сис-
        темной ошибки - это SystemError.  Вы можете установить свою функ-
        цию системной ошибки, присвоив ее SysErrorFunc. Функции системных
        ошибок не могут быть оверлейными.

         B.Pascal 7 & Objects/TV#2       - 96 -


                  Таблица 19.36. Коды функции системной ошибки.
             ------------------------------------------------------------
                Код ошибки             Значение
             ------------------------------------------------------------
                0..12         Коды критических ошибок DOS

                 13           Плохой образ таблицы распределения файлов
                              (FAT) в памяти

                 14           Ошибка доступа к устройству

                 15           Уведомление о свопинге
             ------------------------------------------------------------


         B.Pascal 7 & Objects/TV#2       - 97 -


                      Возвращаемые значения функции:

         Таблица 19.37. Значения, возвращаемые функцией системной ошибки.

         ----------------------------------------------------------------
                Возвращаемое значение          Назначение
         ----------------------------------------------------------------
                       0               Пользователь запросил повтор

                       1               Пользователь запросил отмену
         ----------------------------------------------------------------

             См. также: функцию SystemError, тип TSysErrorFunc, процедуру
        InitSysError


         Переменная SysMonoAttr                                 Drivers
        -----------------------------------------------------------------

             Описание:  SysMonoAttr: Word = $7070;

             Функция:  Атрибут по умолчанию используется для вывода сооб-
        щений об ошибках обработчиком системных ошибок. На цветных систе-
        мах  вместо  SysMonoAttr  используется SysColorAttr. Сообщения об
        ошибках  с параметром отмены/восстановления отображаются в строке
        состояния. Предыдущая строка состояния сохраняется и восстанавли-
        вается, когда условия позволяют это сделать.

             См. также: SystemError, SysColorAttr




         B.Pascal 7 & Objects/TV#2       - 98 -

         Функция: SystemError                                   Drivers
        -----------------------------------------------------------------

             Описание: function SystemError(ErrorCode: Integer;
                                                Drive: Byte): Integer;

             Функция:  Функция  системной ошибки, используемая по умолча-
        нию.  Она отображает в строке состояния одно из следующих сообще-
        ний об ошибке, в зависимости от значения ErrorCode, используя при
        этом атрибуты цвета, определяемые SysColorAttr или SysMonoAttr.


                  Таблица 19.38. Сообщения функции SystemError.

             -----------------------------------------------------------
              Код ошибки                  Сообщение
             -----------------------------------------------------------
                 0          Disk is write-protected in drive X
                            (Диск в дисководе Х защищен от записи)

                 1          Critical disk error on drive X
                            (Критическая ошибка диска на диске X)

                 2          Disk is not ready in drive X
                            (Дисковод диска Х не готов)

                 3          Critical disk error on drive X
                            (Критическая ошибка диска на диске X)

                 4          Data integrity error on drive X
                            (Ошибка данных на диске X)

                 5          Critical disk error on drive X
                            (Критическая ошибка диска на диске X)

                 6          Seek error on drive X
                            (Ошибка позиционирования на диске X)

                 7          Unknown media type in drive X
                            (Неизвестный тип носителя в дисководе X)

                 8          Sector not found on drive X
                            (Не найден сектор на диске X)

                 9          Printer out of paper
                            (Нет бумаги на принтере)

                10          Write fault on drive X
                            (Ошибка записи на диске X)

                11          Read fault on drive X
                            (Ошибка чтения на диске X)


         B.Pascal 7 & Objects/TV#2       - 99 -

                12          Hardware failure on drive X
                            (Аппаратная неисправность на диске X)

                13          Bad memory image of FAT detected
                            (В образе таблицы распределения файлов FAT
                            в памяти обнаружена ошибка)

                14          Device access error
                            (Ошибка доступа к устройству)

                15          Insert diskette in drive X
                            (Вставьте дискету в дисковод X)
             -----------------------------------------------------------

             См. также: SysColorAttr, SysMonAttr, SysErrorFunc




         B.Pascal 7 & Objects/TV#2      - 100 -

─────────────────────────────────────────────────────────────────────────
         TApplication                                           App
        -----------------------------------------------------------------

             TApplication является просто "оберткой" для TProgram и отли-
        чается  от  TProgram  только методами конструктора и деструктора.
        Обычно  объект  прикладной  программы получается из TApplication.
        Если  Вам  понадобится  другой  порядок  инициализации и закрытия
        подсистем, то по прежнему можно получить Вашу программу из TProg-
        ram  и  вручную  проинициализировать  и  закрыть подсистемы Turbo
        Vision в соответствии с Вашими потребностями.

             Внимание!  В  версии  2.0  TApplication  добавляет некоторые
        новые  методы  для обработки стандартных команд программы. Сейчас
        TApplication  имеет  метод  HandleEvent,  обрабатывающий  команды
        стандартных меню, и методы, располагающие окна каскадно и мозаич-
        но, а также выходит в оболочку DOS.


                                       Методы
        -----------------------------------------------------------------


             Init
                  constructor Init;

             Создает  объект программы, сначала инициализируя все подсис-
        темы Turbo Vision (администраторы памяти, видео, событий, систем-
        ных  ошибок  и  списка  предыстории), а затем вызывая конструктор
        Init, унаследованный от TProgram.

             См. также: InitMemory, InitVideo, InitEvents,  InitSysError,
        InitHistory, TProgram.Init


             Done
                  destructor Done; virtual;

             Освобождает все объекты прикладной программы, вызывая снача-
        ла  деструктор Done, унаследованный от TProgram, а затем закрывая
        все подсистемы Turbo Vision.

             Переопределяемость: иногда

             См. также: DoneMemory, DoneVideo, DoneEvents,  DoneSysError,
        DoneHistory, TProgram.Done


             Cascade
                  procedure Cascade;

             Вызывает GetTileRect для получения области, над которой окна
        должны  мозаично  располагаться,  а  затем, если DeskTop не равна
        nil,  вызывает метод Cascade оперативной области, передавая полу-

         B.Pascal 7 & Objects/TV#2      - 101 -

        ченный прямоугольник.

             См. также: TApplication.GetTileRect, TDesktop.Cascade


             DosShell
                  procedure DosShell;

             Вызывает  оболочку  DOS.  DosShell сначала прекращает работу
        подсистем  администратора памяти, администратора видео, админист-
        ратора событий, администратора системных ошибок, а затем вызывает
        WriteShellMsg, выдающую сообщения пользователя, после чего выпол-
        няет командный процессор, указанный в переменной среды COMSPEC.

             После выхода пользователя из оболочки DOS DosShell перезапу-
        скает эти подсистемы, и вызывает Redraw для перерисовки отобража-
        емых элементов программы.

             См. также: TApplication.WriteShellMsg


             GetTileRect
                  procedure GetTileRect (var R: TRect); virtual;

             Устанавливает  R  равным прямоугольнику оперативной области,
        который должен закрывать окна, расположенные мозаично или каскад-
        но. По умолчанию GetTileRect возвращает размер всего отображаемо-
        го  элемента  оперативной области. Методы Cascade и Tile вызывают
        GetTileRect для определения области, в которой будут располагать-
        ся окна.

             Ваша программа может переопределить  GetTileRect  для  того,
        чтобы она возвратила другой прямоугольник, например, для исключе-
        ния областей, закрытых окнами сообщений.

             См. также: TApplication.Cascade, TApplication.Tile


             HandleEvent
                  procedure HandleEvent
                                 (var Event: TEvent); virtual;

             Обрабатывает большинство событий, вызывая метод HandleEvent,
        унаследованный от TProgram,  а затем отвечает на три  стандартных
        команды программы,  cmTile,  cmCascade, cmDosShell, вызывая соот-
        ветственно методы Tile, Cascade и DosShell.

             В версии 1.0 TApplication не заменяла TProgram.HandleEvent.

             См. также: TProgram.HandleEvent, TApplication.Cascade,
        TApplication.DosShell, TApplication.Tile



         B.Pascal 7 & Objects/TV#2      - 102 -

             Tile
                  procedure Tile;

             Вызывает GetTileRect для получения области, над которой окна
        должны мозаично располагаться,  а затем,  если DeskTop  не  равна
        nil,  вызывает метод Tile оперативной области, передавая получен-
        ный прямоугольник.

             См. также: TApplication.GetTileRect, TDesktop.Tile


             WriteShellMsg  procedure WriteShellMsg; virtual;

             Перед вызовом в оболочку DOS печатает для пользователя сооб-
        щение.  Процедура DosShell вызывает WriteShellMsg непосредственно
        перед запуском интерпретатора команд.  По умолчанию WriteShellMsg
        выдает следующее сообщение:

             Type EXIT to return...

             Для выдачи пользователю другого сообщения можно  переобозна-
        чить  WriteShellMsg.  Лучше выдать сообщение при помощи процедуры
        PrintStr, а не Writeln, поскольку PrintStr не требует использова-
        ния стандартной библиотеки момента исполнения.

             См. также: TApplication.DosShell




         B.Pascal 7 & Objects/TV#2      - 103 -

         TBackground                                              App
        -----------------------------------------------------------------

             TBackground- это  обычный  отображаемый элемент,  содержащий
        однотонно  заполненный  прямоугольник.  Обычно   он   принадлежит
        TDeskTop.


                                        Поля
        -----------------------------------------------------------------


             Pattern                                  (только для чтения)

             Pattern: Char;

             Это битовый шаблон для фона отображаемого элемента.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect; APattern: Char);

             Данный метод  создает объект TBackground с границами Bounds,
        вызывая конструктор Init, унаследованный от TView. GrowMode уста-
        навливается равным gfGrowHiX + gfGrowHiY, а поле Pattern - равным
        APattern.

             См. также: TView.Init, TBackground.Pattern


             Load
                  constructor Load(var S: TStream);

             Создает и загружает объект фона из потока S,  вызывая  конс-
        труктор Load, а затем считывая символ Pattern.

             См. также: TView.Load


             Draw
                  procedure Draw; virtual;

             Переопределяемость: переопределяется редко

             Заполняет прямоугольник   отображаемого   элемента   текущим
        Pattern с цветом, установленным по умолчанию.


             GetPalette
                  function GetPalette: PPalette; virtual;

         B.Pascal 7 & Objects/TV#2      - 104 -


             Переопределяемость: переопределяется редко

             Возвращает указатель на используемую  по  умолчанию  палитру
        CBackground.


             Store
                  procedure Store(var S: TStream);

             Сохраняет отображаемый элемент TBackground в потоке, вызывая
        метод Store,  унаследованный от TView,  а затем записывая  символ
        Pattern.

             См. также: TView.Store, TBackground.Load


                                      Палитра
        -----------------------------------------------------------------

             Объекты фона используют палитру CBackground, определенную по
        умолчанию, для копирования первого элемента палитры программы.


                                      1
                                    ╔═══╗
                     CBackground    ║ 1 ║
                                    ╚═╤═╝
                           Color  ────┘

         B.Pascal 7 & Objects/TV#2      - 105 -

         TBufStream                                              Objects
        -----------------------------------------------------------------

             TBufStream реализует  буферизованную версию TDosStream.  До-
        полнительные поля указывают размер и положение  буфера,  а  также
        текущую и последнюю позицию в буфере. Помимо переопределения вось-
        ми методов TDosStream,  TBufStream определяет  абстрактный  метод
        TStream.Flush.  Конструктор  TBufStream создает и открывает файл,
        вызывая TDosStream.Init,  затем создает буфер с  помощью  GetMem.

             TBufStream значительно эффективнее TDosStream при передаче в
        поток  большого количества малых по размеру данных, как это имеет
        место при сохранении и загрузке объектов с использованием TStrea-
        m.Get и TStream.Put.


                                        Поля
        -----------------------------------------------------------------


             BufEnd                                   (только для чтения)
                  BufEnd: Word;

             Если  буфер  не заполнен, то BufEnd дает смещение последнего
        используемого элемента буфера относительно указателя на Buffer.



             Buffer                                   (только для чтения)
                  Buffer: Pointer;

             Указатель на начало буфера потока.


             BufPtr                                   (только для чтения)
                  BufPtr: Word;

             Смещение текущего положения буфера относительно указателя на
        Buffer.


             BufSize                                  (только для чтения)
                  BufSize: Word;

             Размер буфера в байтах.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(FileName: FNameStr; Mode, Size: Word);


         B.Pascal 7 & Objects/TV#2      - 106 -

             Создает  объект и открывает файл с именем FileName и режимом
        доступа  Mode,  вызывая   конструктор  Init,  унаследованный   от
        TDosStream. Создает в динамической памяти буфер размером SizeBuf.
        Устанавливает  BufPtr  и  BufEnd  равными  нулю  Типичный  размер
        буфера - от 512 до 2048 байт.

             См. также: TDosStream.Init


             Done
                  destructor Done; virtual;

             Переопределяемость: никогда не переопределяется

             Вызывает Flush и сбрасывает содержимое потока на диск, после
        чего уничтожает объект буферизованного потока вызовом деструктора
        Done, унаследованного от TDosStream. Освобождает память, выделен-
        ную под буфер

             См. также: TBufStream.Flush, TDosStream.Done


             Flush
                  procedure Flush; virtual;

             Переопределяемость: никогда не переопределяется

             Сбрасывает  буфер потока на диск, если поток будет в состоя-
        нии  stOK.  Деструктор  Done вызывает Flush для обеспечения того,
        чтобы все данные были записаны на диск перед освобождением объек-
        та потока.

             См. также: TBufStream.Done


             GetPos
                  function GetPos: LongInt; virtual;

             Переопределяемость: никогда не переопределяется

             Возвращает  значение  текущей  позиции  потока (не путайте с
        BufPtr- текущей позицией в буфере).

             См. также: TBufStream.Seek


             GetSize
                  function GetSize: LongInt; virtual;

             Переопределяемость: никогда не переопределяется.

             Сбрасывает  буфер,  а  затем  возвращает  общее число байт в
        потоке.

         B.Pascal 7 & Objects/TV#2      - 107 -



             Read
                  procedure Read(var Buf; Count: Word); virtual;

             Переопределяемость: никогда не переопределяется

             В  состоянии  потока  stOK,  читает  Count байт в буфер Buf,
        начиная с текущей позиции потока.

             Заметим,  что  Buf-  это  не  буфер потока, а внешний буфер,
        содержащий данные, читаемые из потока.

             См. также: TBufStream.Write, stReadError


             Seek
                  procedure Seek(Pos: LongInt); virtual;

             Переопределяемость: никогда не переопределяется

             Сбрасывает  буфер,  а  затем  устанавливает  текущую позицию
        равной  Pos  байт от начала вызывающего потока. Начальная позиция
        потока- 0.

             См. также: TBufStream.GetPos, TBufStream.Flush


             Truncate
                  procedure Truncate; virtual;

             Переопределяемость: никогда не переопределяется

             Сбрасывает буфер, затем удаляет все данные потока от текущей
        позиции до конца потока с использованием метода Truncate, унасле-
        дованного  от  TDosStream. Текущая позиция устанавливается равной
        новому концу потока.

             См. также: TBufStream.GetPos, TBufStream.Seek


             Write
                  procedure Write(var Buf; Count: Word); virtual;

             Переопределяемость: никогда не переопределяется

             В состоянии потока stOK, записывает Count байт из буфера Buf
        в поток, начиная с текущей позиции.

         B.Pascal 7 & Objects/TV#2      - 108 -


             Заметим,  что  Buf-  это  не  буфер потока, а внешний буфер,
        содержащий  данные,  записываемые  в поток. При вызове Write, Buf
        указывает на переменную, значение которой записывается.

             См. также: TBufStream.Read, stWriteError




         B.Pascal 7 & Objects/TV#2      - 109 -

         TButton                                               Dialogs
        -----------------------------------------------------------------

             Объект  TButton  представляет  собой  отображаемый элемент с
        заголовком и "тенью", генерирующий команду при нажатии и наиболее
        часто  встречающийся  в диалоговых окнах. "Кнопку" можно "нажать"
        нажатием подсвеченной буквы, переходом на кнопку с помощью клави-
        ши  Tab и нажатием клавиши пробела, нажатием клавиши Enter, когда
        "кнопка"  используется  по  умолчанию (выделяется подсветкой) или
        перещелкиванием (двойным нажатием) кнопки "мыши".

             При цветной и черно-белой палитрах "кнопка" имеет трехмерный
        отображаемый элемент, который изменяется при нажатии. На монохро-
        мных  системах  Turbo  Vision  выделяет кнопки скобками и другими
        символами ASCII, которые используются для указания того, является
        ли "кнопка" определенной по умолчанию, выбранной и т.д.

             Как  и  другие  элементы  управления,  определенные в модуле
        Dialogs,  TButton- это конечный объект, который может быть встав-
        лен в любую группу и использован без переопределения его методов.

              Вы можете установить в окне или диалоговом окне только одну
        "кнопку" (по умолчанию) в любой момент времени. "Кнопки", которые
        равнозначны  в  группе,  получают и отдают состояние по умолчанию
        посредством  сообщения evBroadcast. Недоступность или доступность
        команды, связанной с кнопкой, делает также недоступной или досту-
        пной саму кнопку.


                                        Поля
        -----------------------------------------------------------------

             AmDefault                               (только для чтения)
                  AmDefault: Boolean;

             В случае значения True "кнопка" используется по умолчанию (и
        следовательно, выбирается при нажатии клавиши Enter). В противном
        случае это "обычная" кнопка.

             См. также: константы флага "кнопки" bfXXXX


             Command                                 (только для чтения)
                  Commаnd: Word;

             Слово команды события, генерируемого при нажатии "кнопки".

             См. также: TButton.Init


             Flags                                    (чтение/запись)
                  Flags: Byte;


         B.Pascal 7 & Objects/TV#2      - 110 -

             Flags-  это  битовое  поле,  используемое для указания того,
        будет ли текст "кнопки" располагаться по центру или выравниваться
        по  левой  границе. Конкретные флаги описаны в разделе "Константы
        флага "кнопки" bfXXXX" в настоящей главе.

             См. так же: TButton.Draw, константы bfXXXX


             Title                                    (только для чтения)
                  Title: PString;

             Указатель на текст "кнопки".


                                       Методы
        -----------------------------------------------------------------

             Init

                  constructor Init(var Bounds: TRect;
                       ATitle: TTitleStr; ACommand: Word; AFlags: Byte);

             Создает  объект кнопки с заданными границами, вызывая конст-
        руктор  Init, унаследованный от TView. Выделяет память под строку
        заголовка  Title,  вызывая NewStr (ATitle). AFlags используется в
        двух  целях:  если  AFlags  и  bfDefault не равны 0, то AmDefault
        устанавливается  равным True; кроме того, AFlags указывает, будет
        заголовок  центрироваться или выравниваться по левой границе про-
        веркой на 0 значения AFlags и bfLeftJust.

             Options  устанавливается равным (ofSelectable + ofFirstClick
        + ofPreProcess + ofPostProcess). EventMask устанавливается равным
        evBroadсast.  Если  данная команда ACommand не разрешена, то поле
        State устанавливается равным sfDisabled.

             Для определения оперативной клавиши кнопки необходимо заклю-
        чить  один из символов из Title в знаки тильд (~), после чего эта
        клавиша станет оперативной.

             См. также: TView.Init, константы флага "кнопки" bfXXXX


             Load
                  constructor Load(var S: TStream);

             Создает  объект  кнопки  и  инициализирует  его из заданного
        потока  S,  вызывая конструктор Load(S), унаследованный от TView.
        Другие  поля  устанавливаются посредством вызовов S.Read, а State
        устанавливается  в соответствии с тем, доступна ли команда в поле
        Command. Используется в сочетании со Store для сохранения и полу-
        чения объектов кнопок из TStream.

             См. также: TView.Load, TButton.Store

         B.Pascal 7 & Objects/TV#2      - 111 -



             Done
                  destructor Done; virtual;

             Переопределяемость: никогда не переопределяется.

             Освобождает  память,  выделенную под Title, а затем вызывает
        деструктор Done, унаследованный от TView, для уничтожения отобра-
        жаемого элемента.

             См. также: TView.Done


             Draw
                  procedure Draw; virtual;

             Переопределяемость: переопределяется редко

             Рисует  "кнопку", используя соответствующую ее текущему сос-
        тоянию палитру (обычная, по умолчанию, недоступная) и располагает
        метку в соответствии с битом bfLeftJust поля Flags.


             DrawState
                  procedure DrawState (Down: Boolean);

             Переопределяемость: иногда переопределяется

             Рисует  "кнопку" либо в нажатом, либо в ненажатом состоянии.
        Если  Down равно True, то DrawState рисует кнопку нажатой, в про-
        тивном  случае  рисует  ее ненажатой. Для рисования отображаемого
        элемента Draw вызывает DrawState со значением Down, равным False.
        В   зависимости  от   положения  мыши  в  момент   перещелкивания
        HandleEvent   вызывает   DrawState  в  ответ  на  перемещение   и
        перещелкивание мыши.

             См. также: TButtonDraw


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: иногда переопределяется

             Возвращает  указатель  на  палитру CButton, установленную по
        умолчанию.


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: иногда переопределяется

         B.Pascal 7 & Objects/TV#2      - 112 -


             Отвечает  на одно из трех способов нажатий: выбор "кнопки" с
        помощью "мыши", нажатие оперативной клавиши или нажатие "кнопки",
        используемой  по  умолчанию  при  получении  сообщения cmDefault.
        Когда  пользователь  нажимает кнопку, кнопка генерирует командное
        событие  с  PutEvent,  устанавливая значение Event.Command равным
        значению поля Command кнопки, а Event.InfoPtr равным @Self.

             "Кнопки"  так  же   распознают  сообщения  cmGrabDefault   и
        cmReleaseDefault,   что   позволяет   им   получать   или  терять
        состояние    "кнопки",    используемой     по    умолчанию,     и
        cmCommandSetChanged,  заставляющее  их  проверять,  разрешены  их
        команды или запрещены.

             Все   остальные   события   обрабатываются   вызовом  метода
        HandleEvent, унаследованного от TView.

             См. так же: TView.HandleEvent


             MakeDefault
                  procedure MakeDefault(Enable: Boolean);

             Этот  метод ничего не делает, если "кнопка" уже используется
        по умолчанию. В противном случае он уведомляет Owner об изменении
        ее статуса "кнопки по умолчанию" с помощью сообщения. Если Enable
        =  True,  то выдается сообщение cmGrabDefault, в противном случае
        посылает  сообщение cmReleaseDefault. "Кнопка" отображается зано-
        во, чтобы показать новое состояние.

             См. так же: TButton.AmDefault, bfDefault


             Press
                  procedure Press; virtual;

             Переопределяемость: иногда переопределяется

             Вызывается  для  генерации  эффекта, связанного с "нажатием"
        объекта кнопки. Существующий по умолчанию метод посылает владель-
        цу   кнопки   сообщение   evBroadcast   с   параметром    команды
        cmRecordHistory  (заставляющее все объекты типа THistory записать
        содержимое объектов  введенных строк, которыми они управляют),  а
        затем используют PutEvent или  Message для генерации сообщения  в
        зависимости  от   значения   флага   bfBroadcast.   Press   можно
        переопределить для  изменения   поведения кнопки  при нажатии, но
        возможно,  что  в  измененном  методе  Press понадобится вызывать
        унаследованный метод.

             См. так же: TView.HandleEvent


             SetState

         B.Pascal 7 & Objects/TV#2      - 113 -

                  procedure SetState(AState:  Word; Enable: Boolean);
                                                               virtual;

             Переопределяемость: переопределяется редко.

             Вызывает  метод SetState, унаследованный от TView, для уста-
        новки  флагов состояния, а затем вызывает DrawView, если "кнопка"
        получила состояние sfSelected или sfActive. Если она стала актив-
        ной  (т. е. если AState содержит sfFocused), то "кнопка" забирает
        или отдает состояние "по умолчанию" кнопке, используемой по умол-
        чанию, с помощью MakeDefault.

             См.   также: TCView.SetState, TButton.MakeDefault


             Store
                  procedure Store(var S: TStream);

             Сохраняет  объект кнопки в потоке S, вызывая метод Store(S),
        унаследованный  от TView, а затем вызывает S.Write для сохранения
        значений  Title  и Command. Используется совместно с TButton.Load
        для сохранения и восстановления объектов TButton из потока.

             См. также: TView.Store, TButton.Load, TStream.Write


         B.Pascal 7 & Objects/TV#2      - 114 -


                                      Палитра
        -----------------------------------------------------------------


             Объект  "кнопки" использует назначенную по умолчанию палитру
        CButton для отображения элементов от 10 до 15 палитры CDialog.

                     1    2    3    4    5    6    7    8
                  ╔════╤════╤════╤════╤════╤════╤════╤════╗
        CButton   ║ 10 │ 11 │ 12 │ 13 │ 14 │ 14 │ 14 │ 15 ║
                  ╚══╤═╧══╤═╧══╤═╧══╤═╧══╤═╧══╤═╧══╤═╧═╤══╝
                     │    │    │    │    │    │    │   │
        Нормальный ──┘    │    │    │    │    │    │   └──Тень
        текст             │    │    │    │    │    │
        Текст по    ──────┘    │    │    │    │    └────  Выделенная
        умолчанию              │    │    │    │       оперативная клавиша
        Выделенный  ───────────┘    │    │    └─────────  Оперативная
        текст                       │    │          клавиша по умолчанию
        Запрещенный ────────────────┘    └──────────────  Оперативная
        текст                                            обычная клавиша


         Тип TByteArray                                         Objects
        -----------------------------------------------------------------

             Описание: TByteArray = array[0..32767] of Byte;

             Функция: Тип массива байт для общего использования при прео-
        бразовании типа.

             См. также: TStringListMaker


         Тип TCharSet                                           Objects
        -----------------------------------------------------------------

             Описание: TCharSet = set of Char;

             Функция: Объекты фильтра определителя допустимости использу-
        ют  поле типа TCharSet для определения допустимых символов, кото-
        рые пользователь может вводить в строке с фильтруемым вводом.

             См. также: TFilterValidator.ValidChars




         B.Pascal 7 & Objects/TV#2      - 115 -

         Объекты TChDirDialog                                   StdDialog
        -----------------------------------------------------------------

             TChDirDialog  реализует  диалоговое окно с названием "Change
        Directory",  обеспечивающее  строку для ввода пользователем имени
        каталога. Строка  ввода  имеет список предыстории и строку-список
        каталога с вертикальным полем прокрутки и деревом структуры ката-
        лога.


                                        Поля
        -----------------------------------------------------------------

             ChDirButton
                  ChDirButton: PButton;

             ChDirButton  указывает на объект кнопки, изменяющий каталог,
        показываемый в текущий момент в строке ввода DirInput.


             DirInput
                  DirInput: PInputLine;

             DirInput  указывает  на  объект  вводимой  строки, в которой
        пользователь  может  печатать  изменяемый  каталог.  По умолчанию
        вводимая  строка показывает имя пути каталога, выбранного в теку-
        щий момент в дереве каталога.


             DirList
                  DirList: PDirListBox;

             DirList указывает на окно-список, содержащее структуру ката-
        лога на текущем диске.


             OkButton
                  OkButton: PButton;

             DirList  указывает  на объект кнопки, закрывающей диалоговое
        окно.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init (AOptions: Word; HistoryId: Word);

             Создает  объект диалогового окна изменения каталога с опция-
        ми, указанными в Options, и связывает список предыстории, обозна-
        ченный HistoryID, с вводимой строкой каталогов, на которую указы-
        вает DirInput. AOptions содержит сочетание констант cdXXXX.

         B.Pascal 7 & Objects/TV#2      - 116 -


             См. также: константы cdXXXX


             Load
                  constructor Load (var S: TStream);

             Создает  и загружает объект диалогового окна изменения ката-
        лога из потока путем вызова конструктора Load, унаследованного от
        TDialog, с последующим чтением дополнительных полей, определенных
        в TChDirDialog.

             См. также: TDialog.Load


             DataSize
                  function DataSize: Word; virtual;

             По  умолчанию  DataSize  возвращает  ноль. Если новый объект
        создается на базе TChDirDialog, использующего для передачи данных
        диалоговому  окну  методы  SetData и GetData, то необходимо также
        переопределить  DataSize,  чтобы  она  возвращала размер в байтах
        данных, используемых SetData и GetData.


             GetData
                  procedure GetData (var Rec); virtual;

             Обрабатывает  события  в  диалоговом  окне,  вызывая сначала
        унаследованный  HandleEvent из TDialog для обработки стандартного
        поведения  диалогового  окна,  после  чего  обрабатывает  команды
        cmRevert   и cmChangeDir,  которые могут  генерироваться кнопками
        диалогового окна.


             SetData
                  procedure SetData (var Rec); virtual;

             По  умолчанию  SetData  не  выполняет никаких действий. Если
        объекты получаются на основе TChDirDialog, имеющему органы управ-
        ления, значения которых необходимо задавать, то необходимо перео-
        пределить  SetData так, чтобы она копировала в Rec DataSize байт.
        При  переопределении  SetData  необходимо  также   переопределять
        DataSize и GetData.


             SetData
                  procedure Store (var S:TStream);

             Сохраняет объект диалогового окна в потоке S, вызывая снача-
        ла  метод  Store,  унаследованный  от  TDialog, а затем записывая
        дополнительные поля, введенные TChDirDialog.


         B.Pascal 7 & Objects/TV#2      - 117 -


             Valid
                  function Valid (Command: Word): Boolean; virtual;

             Возвращает True в случае, если Command отлично от cmOK. Если
        пользователь нажал кнопку Ok, генерирующую команду cmOK, то Valid
        проверяет  содержимое строки ввода DirInput на предмет того, ука-
        зывает  ли  она  правильное  имя  каталога. Если каталог является
        допустимым, то Valid возвращает значение True; в противном случае
        она  вызывает  окно  сообщений  "Invalid  Directory" и возвращает
        False.




         B.Pascal 7 & Objects/TV#2      - 118 -

         TCheckBoxes                                            Dialogs
        -----------------------------------------------------------------

             TCheckBoxes- это специализированный кластер, содержащий от 1
        до  16 элементов управления. В отличие от кнопок с зависимой фик-
        сацией, здесь может выбираться любое количество независимых "кно-
        пок",  поэтому  кластер  содержит кнопки, выбранные по умолчанию.
        Кнопки  можно отмечать "мышью", движением курсора и нажатием ком-
        бинации  Alt-буква. Каждая кнопка может быть подсвечена и ее сос-
        тояние выбранности может быть включено/выключено (клавишей пробе-
        ла). Если кнопка выбрана, то в ней появляется Х.

             Другие  части  Вашей  программы  обычно  проверяют состояние
        независимых "кнопок" для определения того, какая установка выбра-
        на  пользователем  (например,  в  интегрированной среде параметры
        компилятора и компоновщика выбираются именно таким способом).

             Кластеры  независимых  "кнопок"  часто  связаны  с объектами
        TLabel, дающими пользователю обзор выбираемых установок.


                                       Методы
        -----------------------------------------------------------------

             Заметим,  что  TCheckBoxes  не  переопределяет конструкторов
        TCluster, деструктор и обработчик событий. Порожденные типы объе-
        ктов могут, однако, при необходимости переопределить их.


             Draw
                  procedure Draw; virtual;

             Переопределяемость: переопределяется редко.

             Рисует   объект   TCheckBoxes,  вызывая  наследуемый   метод
        TCluster.DrawBox.  По  умолчанию независимая "кнопка" имеет  вид:
        " [ ] ", когда она не выбрана, и " [X] ", когда она выбрана.

             Заметим,  что если границы отображаемого элемента достаточно
        велики,  то  независимые  "кнопки" могут отображаться в несколько
        колонок.

             См. так же: TCluster.DrawBox


             Mark
                  function Mark(Item: Integer) : Boolean; virtual;

             Переопределяемость: переопределяется редко.

             Возвращает  значение True, если бит элемента в Value с номе-
        ром Item взведен, т.е. если данная кнопка нажата. Вы можете пере-
        определить  это,  установив  другую  интерпретацию поля Value. По

         B.Pascal 7 & Objects/TV#2      - 119 -

        умолчанию элементы нумеруются от 0 до 15.

             См. также: TCheckBoxes.Press


             Press
                  procedure Press(Item: Integer); virtual;

             Изменяет  значение  бита  элемента  Value  с номером Item на
        противоположное.  Вы можете переопределить его для другой интерп-
        ретации поля Value. По умолчанию элементы нумеруются от 0 до 15.

             См. также: TCheckBoxes.Mark


                                      Палитра
        -----------------------------------------------------------------

             По   умолчанию   объекты  независимых  "кнопок"   используют
        CCluster-    палитру,   назначаемую   по   умолчанию   для   всех
        объектов-кластеров.


                             1    2    3    4
                          ╔════╤════╤════╤════╗
              CCluster    ║ 16 │ 17 │ 18 │ 18 ║
                          ╚══╤═╧══╤═╧══╤═╧══╤═╝
              Нормальный ────┘    │    │    └───  Выделенная
              текст               │    │          оперативная клавиша
              Выделенный ─────────┘    └────────  Обычная оперативная
              текст                               клавиша




         B.Pascal 7 & Objects/TV#2      - 120 -

         TCluster                                               Dialogs
        -----------------------------------------------------------------

             Кластер - это группа элементов управления, которые "отклика-
        ются" одинаковым образом. TCluster представляет собой абстрактный
        тип объекта,  поведение которого обобщает работу с независимыми и
        зависимыми кнопками.

             В  то время, как "кнопки" используются для генерации команд,
        а строки ввода - для редактирования строк,  кластеры используются
        для  переключения  битовых значений поля Value типа Longint.  Эти
        стандартные наследники TCluster  используют  различные  алгоритмы
        изменения  Value:  TCheckBoxes  просто  изменяет значение бита на
        противоположное,  а TRadioButtons взводит один бит  и  сбрасывает
        предварительно установленный бит. Оба эти объекта наследуют почти
        все свое поведение от TCluster.


                                        Поля
        -----------------------------------------------------------------

             EnableMask
                  EnableMask: Longint;

             EnableMask содержит допустимое состояние первых 32 элементов
        кластера,  причем каждый бит соответствует каждому элементу клас-
        тера. Младший бит управляет состоянием первого элемента кластера.
        Если бит EnableMask взведен, то элемент является доступным. Сбра-
        сывание бита делает соответствующий элемент недоступным. По умол-
        чанию  конструктор  кластера  устанавливает  значение  EnableMask
        равным $FFFFFFFF, что означает тот факт, что доступны все элемен-
        ты.


             Sel                                      (только для чтения)
                  Sel: Integer;

             Выбранный в настоящий момент элемент кластера.


             Strings                                  (только для чтения)
                  Strings: TStringCollection;

             Список элементов кластера.


             Value                                    (только для чтения)
                  Value: Longint;

             Текущие  значения  элемента управления. Действительный смысл
        этого  поля  определяется методами, разработанными в типах объек-
        тов, порожденных от TCluster.


         B.Pascal 7 & Objects/TV#2      - 121 -


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect; AStrings: PSItem);

             Очищает поля Value и Sel. Параметр AStrings обычно представ-
        ляет  собой  набор вложенных вызовов глобальной функции NewSItem,
        позволяющих  создавать  весь  кластер  зависимых  или независимых
        кнопок в одном вызове конструктора:

              var
                Control: PView;
              ...
              R.Assign(30, 5, 52, 7);
              Control := New(PRadioButtons, Init(R,
                NewSItem('~F~orward',
                NewSItem('~B~ackward', nil))));
              ...

             Для  добавления в кластер дополнительных зависимых или неза-
        висимых  "кнопок" просто скопируйте первый вызов NewSItem и заме-
        ните заголовок на требуемый текст. Затем добавляется дополнитель-
        ная  закрывающая  скобка  для  каждой вновь добавленной строки, и
        оператор будет компилироваться без синтаксических ошибок.

             См. так же: тип TSItem


             Load
                  constructor Load(var S: TStream);

             Создает  объект  TCluster, вызывая сначала конструктор Load,
        унаследованный  от  TView,  а  затем  устанавливая значения полей
        Value  и Set вызовом S.Read. Наконец, поле String кластера загру-
        жается  из  S с помощью Strings.Load(S). Используется совместно с
        TCluster.Store  для  сохранения  и получения объектов TCluster из
        потока.

             См. так же: TCluster.Store, TView.Load


             Done
                  destructor Done; virtual;

             Переопределяемость: иногда переопределяется.

             Освобождает  память,  выделенную  под строку кластера, затем
        уничтожает  отображаемый элемент, вызывая метод деструктора Done,
        унаследованный от TView.

             См. также: TView.Done

         B.Pascal 7 & Objects/TV#2      - 122 -



             ButtonState
                  function ButtonState (Item: Integer): Boolean;

             Возвращает  состояние  доступности кнопки кластера с номером
        Item.  Значение  True указывает на тот факт, что кнопка доступна;
        False - недоступна. Объекты кластера вызывают ButtonState в мето-
        дах  Draw  и HandleEvent для обеспечения того,  чтобы недоступные
        элементы выглядели отлично от доступных,  и чтобы пользователь не
        мог работать с ними.

             См. также: TCluster.EnableMask


             DataSize
                  function DataSize: Word; virtual;

             Переопределяемость: используется редко.

             Возвращает размер Value. При создании новых объектов на базе
        TCluster, которые изменяют Value или добавляют другие поля, необ-
        ходимо переопределять DataSize, чтобы она возвращала размер любых
        данных, переданных GetData и SetData.

             См. также: TCluster.GetData, TCluster.SetData


             DrawBox
                  procedure DrawBox(Icon: String; Marker: Char);

             Вызывается  методами  Draw порожденных типов, чтобы рисовать
        прямоугольник перед строкой для каждого элемента кластера. Icon -
        это строка из 5 символов (' [ ] ' для независимых и ' ( )  '  для
        зависимых "кнопок").  Marker- это символ, используемый для указа-
        ния того,  что "кнопка" отмечена ('X' для независимых и  '.'  для
        зависимых "кнопок").

             См. также: TCheckBoxes.Draw, TRadioButtons.Draw


             DrawMultiBox
                  procedure DrawMultiBox(Icon: String; Marker: String);

             Многопозиционные  кнопки  с  независимой  фиксацией вызывают
        вместо  DrawBox  DrawMultiBox,  передавая вместо символа маркеров
        строку маркеров. Символы в Marker соответствуют возможным состоя-
        ниям кнопки.

             См. также: TCluster.DrawBox, TCluster.MultiMark


             GetData

         B.Pascal 7 & Objects/TV#2      - 123 -

                  procedure GetData(var Rec); virtual;

             Переопределяемость: используется редко.

             Записывает поле Value в Rec. Если на базе TCluster создается
        новый объект, изменяющий значение поля Value, то необходимо пере-
        определить  GetData  для  того,  чтобы  она работала с DataSize и
        SetData.

             См. также: TCluster.DataSize, TCluster.GetData,
        TCluster.SetData


             GetHelpCtx
                  function GetHelpCtx: Word; virtual;

             Переопределяемость: используется редко.

             Возвращает  значение Sel, сложенное с HelpCtx. Это позволяет
        задать  отдельный контекст подсказки для каждого элемента класте-
        ра.  Допустимый диапазон контекстов равен HelpCtx + число элемен-
        тов кластера - 1.


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: иногда используется.

             Возвращает  указатель  на палитру (назначенную по умолчанию)
        CCluster.


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: используется редко.

             Вызывает метод HandleEvent, унаследованный от TView, а затем
        обрабатывает  все  события  от "мыши" и клавиатуры, относящиеся к
        этому кластеру. Элементы управления выделяются отметкой с помощью
        "мыши"  или  клавишами  перемещения  курсора (при выборе клавишей
        пробела).  Кластер отображается заново, чтобы показать вновь выб-
        ранные элементы.

             См. так же: TView.HandleEvent


             Mark
                  function Mark(Item: Integer): Boolean; virtual;

             Переопределяемость: всегда переопределяется.


         B.Pascal 7 & Objects/TV#2      - 124 -

             По умолчанию TCluster.Mark возвращает значение False. Каждый
        новый  объект,  созданный на базе TCluster, должен переопределять
        Mark,  возвращая значение True, если элемент управления с номером
        Item в кластере отмечен, и False в противном случае. Draw вызыва-
        ет  Mark для определения отмеченных элементов и рисования для них
        соответствующих окон.


             MovedTo
                  procedure MovedTo(Item: Integer); virtual;

             Переопределяемость: используется редко.

             Перемещает поле выбора к Item-му элементу кластера.  Вызыва-
        ется  из  HandleEvent в ответ на события перещелкивания мышью или
        нажатия клавиш управления курсором.


             MultiMark
                  function MultiMark (Item: Integer): Byte; virtual;

             В  кластере  многопозиционных кнопок с независимой фиксацией
        возвращает состояние отметки для кнопки с номером Item. В обычных
        кластерах кнопка имеет только два состояния, поэтому Mark возвра-
        щает  значение  типа  Boolean. Однако кластеры с многопозиционных
        кнопок должны нести большее количество информации, поэтому вместо
        Mark они вызывают MultiMark.

             См. также: TCluster.Mark


             Press
                  procedure Press(Item: Integer); virtual;

             Переопределяемость: всегда переопределяется.

             Вызывается  из HandleEvent, когда элемент управления с номе-
        ром  Item  в  кластере  выбирается с помощью "мыши", либо нажатия
        клавиши  "пробела".  Press  представляет собой абстрактный метод,
        который должен быть переопределен при создании любого нового типа
        на базе TCluster.


             SetButtonState
                  procedure SetButtonState (AMask: Longint;
                                                     Enable: Boolean);

             Сбрасывает  или  взводит  биты  EnableMask  в соответствии с
        битами  из  AMask. Если Enable равно True, то все взведенные биты
        из  AMask  делаются  доступными  в  EnableMask; если Enable равно
        False,  то биты сбрасываются. Если в результате установки отдель-
        ных  битов  недопустимыми  весь  кластер  состоит из недопустимых
        кнопок, то SetButtonState делает кластер невыбираемым.

         B.Pascal 7 & Objects/TV#2      - 125 -



             SetData
                  procedure SetData(var Rec); virtual;

             Переопределяемость: используется редко.

             Читает  поле  Value из данной записи и вызывает DrawView для
        перерисовки  кластера.  Если  на  базе  TCluster  создается новый
        объект,  изменяющий  значение  поля  Value  или добавляющий новые
        поля,  то  необходимо  переопределить SetData для того, чтобы она
        работала с DataSize и GetData.

             См. также: TCluster.DataSize, TCluster.GetData,
        TView.DrawView


             SetState
                  procedure SetState(AState: Word;
                                           Enable: Boolean); virtual;

             Переопределяемость: используется редко.

             Вызывает метод SetState, унаследованный от TView, для взвода
        или  сброса битов, переданных в AState, а затем вызывает DrawView
        для обновления кластера в случае, если AState равно sfSelected.

             См. также: TView.SetState, TView.DrawView


             Store
                  procedure Store(var S: TStream);

             Сохраняет  объект TCluster в потоке S, вызывая сначала метод
        Store,  унаследованный от TView, а затем записывает Value и Sel в
        S,  после  чего  сохраняет  поле  Strings кластера, используя его
        метод  Store. Используется совместно с TCluster.Load для сохране-
        ния и получения объектов TCluster из потока.

             См. также: TCluster.Load, TStream.Write


                                      Палитра
        -----------------------------------------------------------------

             Объекты  TCluster  используют CCluster (палитру, назначенную
        по  умолчанию) для всех объектов кластера, чтобы отобразить в ней
        элементы с 16 по 18 стандартной палитры диалогового окна:


         B.Pascal 7 & Objects/TV#2      - 126 -


                              1    2    3    4
                           ╔════╤════╤════╤════╗
              CCluster     ║ 16 │ 17 │ 18 │ 18 ║
                           ╚══╤═╧══╤═╧══╤═╧══╤═╝
              Нормальный  ────┘    │    │    └─── Выделенная
              текст                │    │         оперативная клавиша
              Выделенный  ─────────┘    └──────── Обычная оперативная
              текст                               клавиша




         B.Pascal 7 & Objects/TV#2      - 127 -

         TCollection                                           Objects
        -----------------------------------------------------------------

             TCollection-  это  основной тип для реализации любого набора
        элементов,  включающих  другие  объекты. TCollection- это намного
        более  общее  понятие,  чем обычные массив, множество или список.
        Размер  объектов TCollection динамически устанавливается во время
        выполнения, и обеспечивает базовый тип для многих специализирова-
        нных  типов,  таких,  как  TSortedCollection, TStringCollection и
        TResourceCollection. В дополнение к методам добавления и удаления
        элементов,  TCollection представляет несколько итерационных прог-
        рамм, которые вызывают процедуру или функцию для каждого элемента
        набора.

             TCollection  предполагает,  что  элементы  набора получаются
        прямо  или  косвенно из TObject так, что для уничтожения элемента
        он  может вызывать деструктор элемента Done. Если Вы хотите испо-
        льзовать  набор элементов, не происходящих от TObject, то необхо-
        димо  обязательно  переопределить  метод FreeItem для того, чтобы
        правильно уничтожить элемент. Набор строк, например, осуществляет
        набор динамических строк Паскаля.


                                        Поля
        -----------------------------------------------------------------

             Count                                    (только для чтения)
                  Count: Integer;

             Текущее число элементов в наборе, максимальное число которых
        равно MaxCollectionSize. Заметьте, что наборы индексируют элемен-
        ты  с  0,  а  это означает, что Count часто превышает на 1 индекс
        последнего элемента.

             См. также: переменная MaxCollectionSize


             Delta                                    (только для чтения)
                  Delta: Integer;

             Число  элементов,  на которое увеличивается список Items при
        его заполнении. Если Delta равна 0, то набор не может расти боль-
        ше размера, установленного в Limit.

             Примечание: Увеличение размера набора достаточно плохо влия-
        ет  на  производительность. Чтобы минимизировать число раз, когда
        это  происходит,  попытайтесь  установить  начальное Limit равным
        такому  количеству, которого будет достаточно для всех элементов,
        которые  Вы  собираетесь  объединять  в набор, и установите Delta
        так, чтобы его значение допускало расширение на разумное количес-
        тво.

             См. также: Limit, TCollection.Init

         B.Pascal 7 & Objects/TV#2      - 128 -



             Items                                    (только для чтения)
                  Items: PItemList;

             Указатель на массив указателей на элементы.

             См. также: тип TItemList


             Limit                                     (только для чтения)
                  Limit: Integer;

             Выделенный  в  текущий  момент  размер  (в элементах) списка
        Items.

             См. также: Delta, TCollection.Init


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(ALimit, ADelta: Integer);

             Создает  объект набора с Limit, равным ALimit, и Delta, рав-
        ным  ADelta.  Набор  выделяет  объем  памяти, достаточный для для
        работы с ALimit элементов, но набор может расширяться, увеличива-
        ясь  по  ADelta до тех пор, пока будет достаточно памяти или пока
        число элементов не достигнет MaxCollectionSize.

             См. также: TCollection.Limit, TCollection.Delta.


             Load
                  constructor Load(var S: TStream);

             Создает  и  загружает  набор  из  потока S. TCollection.Load
        вызывает метод GetItem для каждого элемента набора.

             См. также: TCollection.GetItem


             Done
                  destructor Done; virtual;

             Переопределяемость: часто используется.

             Удаляет набор и освобождает память, занимаемую всеми элемен-
        тами  набора,  вызывая  метод  TCollection.FreeAll и устанавливая
        Limit равным 0.

             См. также: TCollection.FreeAll

         B.Pascal 7 & Objects/TV#2      - 129 -



             At
                  function At(Index: Integer) : Pointer;

             Возвращает  указатель  на элемент с индексом Index в наборе.
        Этот  метод позволяет интерпретировать набор, как индексированный
        с  0  массив. Если индекс меньше 0 или больше или равен Count, то
        At вызывает Error с аргументом coIndexError, после чего возвраща-
        ет nil.

             См. также: TCollection.IndexOf


             AtDelete
                  procedure AtDelete(Index: Integer);

             Удаляет  элемент в позиции Index и перемещает следующие эле-
        менты  на  одну позицию вверх. Count уменьшается на 1, но память,
        выделенная  для  набора,  не сокращается. Если Index меньше 0 или
        больше  или  равен  Count, то вызывается метод Error с аргументом
        coIndexError.

             AtDelete  не  освобождает  память,  выведенную под удаленный
        элемент.  При  необходимости  одновременно  удалить  и освободить
        элемент используйте AtFree.

             См. также:      TCollection.FreeItem,      TCollection.Free,
        TCollection.Delete


             AtFree
                  procedure TCollection.AtFree (Index: Integer);

             Удаляет и освобождает элемент с индексом Index. Эквивалентно
        следующему:

                  Item := At (Index); {получаем указатель на элемент}
                  AtDelete (Index);   {удаляет указатель из набора}
                  FreeMem (Item);     {освобождает элемент}


             AtInsert
                  procedure AtInsert(Index: Integer; Item: Pointer);

             Вставляет  Item в позицию Index и передвигает следующие эле-
        менты на одну позицию вниз. Если Index меньше 0 или больше Count,
        то  AtInsert  вызывает  метод  Error с аргументом coIndexError, и
        новый Item не вставляется.

             Если Count равен Limit до вызова AtInsert, то набор вызывает
        SetLimit  для  увеличения  выделенной под него памяти. Если вызов
        SetLimit  не  может  расширить набор, то вызывается метод Error с

         B.Pascal 7 & Objects/TV#2      - 130 -

        аргументом coOverflow, и новый Item не вставляется.

             См. также: TCollection.At, TCollection.AtPut,
                                                TCollection.SetLimit


             AtPut
                  procedure AtPut(Index: Integer; Item: Pointer);

             Заменяет элемент в позиции Index элементом, заданным в Item.
        Если  Index  меньше  0  или больше или равен Count, то вызывается
        метод Error с аргументом coIndexError.

             См. также: TCollection.At, TCollection.AtInsert


             Delete
                  procedure Delete(Item: Pointer);

             Удаляет   элемент   Item   из   набора.   Это   эквивалентно
        AtDelete(IndexOf(Item)). Delete не освобождает память, выделенную
        под  Item.   При  необходимости  удалить  элемент с освобождением
        памяти вызывайте Free.

             См. также: TCollection.AtDelete, TCollection.DeleteAll


             DeleteAll
                  procedure DeleteAll;

             Удаляет все элементы из набора, устанавливая Count равным 0.

             См. также: TCollection.Delete, TCollection.AtDelete


             Error
                  procedure Error(Code, Info: Integer); virtual;

             Переопределяемость: иногда используется.

             Вызывается  различными  другими  методами  объектов  набора,
        когда  встречается  ошибка.  По  умолчанию  этот метод генерирует
        ошибку времени выполнения 212 - Code, где Code- это одна из конс-
        тант coXXXX, указывающих природу этой ошибки. Error можно переоп-
        ределить  для  обеспечения  простого  уведомления пользователя об
        ошибке или ее устранения без выхода из программы.

             См. также: константы набора coXXXX


             FirstThat
                  function FirstThat(Test: Pointer) : Pointer;


         B.Pascal 7 & Objects/TV#2      - 131 -

             FirstThat  применяет  булеву функцию, заданную указателем на
        функцию  Test, к каждому элементу набора до тех пор, пока Test не
        возвращает  True.  Возвращает  указатель на элемент, для которого
        Test возвращает True, или nil, если функция Test возвращает False
        для  всех  элементов.  Test должна указывать на локальную функцию
        типа  far, использующую только один параметр типа Pointer и возв-
        ращающую значение типа Boolean. Например:

                 function Matches (Item: Pointer): Boolean; far;

             Внимание ! Функция Test не может быть глобальной функцией.

             Предполагая, что List имеет тип TCollection, оператор:

                 P := List.FirstThat(@Matches);

        соответствует следующему:

                  I := 0;
                  while (I < List.Count) and not Matches(List.At(I))
                  do Inc(I);
                  if I < List.Count then P := List.At(I) else P := nil;

             См. также: TCollection.LastThat, TCollection.ForEach


             ForEarch
                  procedure ForEarch(Action: Pointer);

             ForEach  применяет  действие,  определенное  процедурой,  на
        которую  указывает  Action, для каждого элемента набора. Параметр
        Action  должен указывать на локальную процедуру типа far, исполь-
        зующую один параметр типа Pointer. Например:

                 procedure PrintItem(Item: Pointer); far

             Внимание! Процедура Action не может быть глобальной процеду-
        рой.

             Если List имеет тип TCollection, то оператор:

                 List.ForEach(@PrintItem);

        соответствует следующему:

                 for I := 0 to List.Count - 1 do PrintItem(List.At(I));

             См. также: TCollection.FirstThat, TCollection.LastThat


             Free
                  procedure Free(Item: Pointer);


         B.Pascal 7 & Objects/TV#2      - 132 -

             Удаляет  элемент  Item  из  набора и освобождает память. Это
        эквивалентно следующему:

                 Delete(Item);        {удаляет указатель из набора}
                 FreeItem(Item);      {освобождает Item}

             См. также: TCollection.FreeItem, TCollection.Delete


             FreeAll
                  procedure FreeAll;

             Удаляет  и  освобождает  память  всех  элементов набора. Для
        удаления  всех элементов набора без освобождения памяти вызывайте
        DeleteAll.

             См. также: TCollection.DeleteAll


             FreeItem
                  procedure FreeItem(Item: Pointer); virtual;

             Переопределяемость: иногда переопределяется.

             Метод  FreeItem должен освобождать память Item. По умолчанию
        TCollection.FreeItem  предполагает, что Item указывает на объект,
        порожденный TObject, и поэтому вызывает деструктор Done:

                 if Item <> nil then Dispose(PObject(Item), Done);

             Объекты,  порожденные  набором, и не использующие в качестве
        элементов  наследников  TObject,  таких, как наборы строк, должны
        переопределять FreeMem для освобождения памяти, занятой Item.

             Внимание!  Метод  FreeItem  вызывается из Free и FreeAll, но
        никогда не должен вызываться напрямую.

             См. также: TCollection.Free, TCollection.FreeAll


             GetItem
                  function TCollection.GetItem(var   S:   TStream):
                                                     Pointer; virtual;

             Переопределяемость: иногда используется.

             Читает элемент из потока S. По умолчанию TCollection.GetItem
        предполагает,  что  элементы набора порождены TObject, и вызывает
        для загрузки элемента TStream.Get:

                 GetItem := S.Get;

             Объекты,  порожденные  набором, и не использующие в качестве

         B.Pascal 7 & Objects/TV#2      - 133 -

        элементов  наследников  TObject,  таких, как наборы строк, должны
        переопределять  GetMem  для  чтения  из потока нужного элемента и
        возврата указателя на него.

             Load  вызывает  GetItem  для чтения каждого элемента потока.
        Этот  метод  может  быть  переопределен,  но не должен вызываться
        непосредственно.

                 См. также:        TStream.Get,         TCollection.Load,
        TCollection.Store


             IndexOf
                  functionIndexOf(Item: Pointer): Integer; virtual;

             Переопределяемость: никогда не переопределяется.

             Возвращает   индекс   для  Item.   Преобразует  операцию   в
        TCollection.At.   Если Item  не содержится  в наборе,  то IndexOf
        возвращает -1.

             См. также: TCollection.At


             Insert
                  procedure Insert(Item: Pointer); virtual;

             Переопределяемость: никогда не используется.

             Вставляет  Item  в  набор, перестраивая другие индексы, если
        это  необходимо. По умолчанию вставка производится в конец набора
        вызовом  AtInsert(Count, Item); Типы, порожденные набором, такие,
        как  отсортированные  наборы,  могут  вставлять  элементы в любые
        места.

             См. также: TCollection.AtInsert;


             LastThat
                  function LastThat(Test: Pointer): Pointer;

             LastThat  применяет  булеву  функцию, заданную указателем на
        функцию  Test, к каждому элементу набора в порядке снизу вверх до
        тех  пор,  пока Test не вернет True. Возвращает указатель на эле-
        мент,  для  которого  Test возвращает True, или nil, если функция
        Test  возвращает  False для всех элементов. Test должен указывать
        на  локальную  функцию  типа far, использующую один параметр типа
        Pointer и возвращающую значение типа Boolean, например:

                 function Matches(Item: Pointer): Boolean; far;

             Внимание! Функция Test не может быть глобальной функцией.


         B.Pascal 7 & Objects/TV#2      - 134 -

             Если List имеет тип TCollection, то оператор:

                 P := List.LastThat(@Matches);

        соответствует:

                 I := List.Count - 1;
                 while (I >= 0) and not Matches(List.At(I)) do Dec(I);
                 if I >= 0 then P := List.At(I) else P := nil;

             См. также: TCollection.FirstThat, TCollection.ForEach;


             Pack
                  procedure Pack;

             Удаляет из набора все указатели со значением nil.

             См. также: TCollection.Delete


             PutItem
                  procedure PutItem(var S: TStream;
                                           Item: Pointer); virtual;

             Переопределяемость: иногда используется.

             Пишет   элемент    Item   в    поток   S.    По    умолчанию
        TCollection.PutItem   предполагает,    что    элементы    наборов
        порождаются  TObject,  и  таким  образом, для сохранения элемента
        вызывает TStream.Put:

                 S.Put(Item);

             Объекты,  порожденные  набором, и не использующие в качестве
        элементов  наследников  TObject,  таких, как наборы строк, должны
        переопределять PutItem для записи элемента Item в поток.

             Store  вызывает  PutItem  для  каждого элемента набора. Этот
        метод может переопределяться, но не должен вызываться непосредст-
        венно.

             См. также:      TCollection.GetItem,      TCollection.Store,
        TCollection.Load


             SetLimit
                  procedure SetLimit(ALimit: Integer); virtual;

             Переопределяемость: используется редко.

             Расширяет или сокращает набор,  изменяя память,  необходимую
        для работы с ALimit элементами.  Если ALimit меньше Count, то она

         B.Pascal 7 & Objects/TV#2      - 135 -

        устанавливается равной Count, а если ALimit больше MaxCollection-
        Size,  то она устанавливается равной MaxCollectionSize. Кроме то-
        го,  если  ALimit  отличается  от  текущего  значения  Limit,  то
        SetLimit выделяется новый массив Items из Alimit элементов,  ста-
        рый массив Items копируется в новый массив и  память,  выделенная
        под старый массив, освобождается.

             См.также: TCollection.Limit,  TCollection.Count,  переменная
        MaxCollectionSize

             Store
                  procedure Store(var S: TStream);

             Сохраняет   набор    и  все   его  элементы   в  потоке   S.
        TCollection.Store   вызывает   TCollection.PutItem   для  каждого
        элемента набора.

             См. также: TCollection.PutItem




         B.Pascal 7 & Objects/TV#2      - 136 -

         TColorDialog                                           ColorSel
        -----------------------------------------------------------------

             Диалоговое окно цветов представляет собой специализированное
        диалоговое  окно  с заголовком "Colors", позволяющее пользователю
        изменять цвета палитры во всей программе, одновременно наблюдая в
        диалоговом окне выбранную цветовую схему.

             TColorDialog  использует набор специализированных отображае-
        мых элементов, включающий TColorItem, TColorGroup, TColorSelector
        и  TColorDisplay.  Полное описание использования диалогового окна
        цветов содержится в Главе 14.


                                        Поля
        -----------------------------------------------------------------

             BakLabel
                  BakLabel: PLabel;

             Указывает на метку селектора цвета фона.


             BakSel
                  BakSel: PColorSelector;

             Указывает на селектор цвета фона диалогового окна.


             Display
                  Display: PColorDisplay;

             Указывает на объект цвета дисплея в диалоговом окне. Цветной
        дисплей изображает текст выбранного в настоящий момент цвета.


             ForLabel
                  ForLabel: PLabel;

             Указывает на метку цвета изображения в диалоговом окне.


             ForSel
                  ForSel: PColorSelector;

             Указывает на селектор цвета изображения в диалоговом окне.


             GroupIndex
                  GroupIndex: Byte;

             Указывает  ту  группу  в  списке  групп цветов, которая была
        активна последней.

         B.Pascal 7 & Objects/TV#2      - 137 -



             Groups
                  Groups: PColorGroupList;

             Указывает  на  список  групп цветов диалогового окна. Список
        групп цветов показывает все группы элементов, для которых пользо-
        ватель может выбирать цвета.


             MonoLabel
                  MonoLabel: PMonoSelector;

             Указывает на селектор монохромных атрибутов.


             Pal
                  Pal: TPalett;

             Хранит копию изменяемой палитры.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init (APalette: TPalette;
                                                AGroups: PColorGroup);

             Создает   диалоговое   окно   размером   62х19 с  заголовком
        'Colors',   вызывая    конструктор    Init,   унаследованный   от
        TDialog,  и  добавляя   к  флагам  Options  параметр  ofCentered.
        Устанавливает  Pal  равным  APalette.  Создает и вставляет список
        группы цветов, связанный  с  AGroups, и список элементов  цветов,
        связанный с AGroups^.Items вместе  со связанными с ними  полосами
        прокрутки и метками.   Создает  и   вставляет  селекторы    цвета
        для цветов изображения и фона,  присваивая их ForSel и BakSel,  а
        также  создает  и   вставляет  метки    для   этих    селекторов,
        присваивая  их  ForLabel  и  BakLabel.   Создает   и    вставляет
        скрытый  монохромный селектор и его метку.  Создает  и  вставляет
        кнопки Ok и Cancel, и передает фокус списку группы цветов.

             См. также: TDialog.Init


             Load
                  constructor Load (var S: TStream);

             Создает  и  загружает  диалоговое  окно из потока S, вызывая
        сначала  конструктор Load, унаследованный от TDialog, затем читая
        указатели  на  подэлементы, введенные на основе TColorDialog, и в
        заключение читая палитру.


         B.Pascal 7 & Objects/TV#2      - 138 -

             См. также: TDialog.Load


             DataSize
                  function DataSize: Word; virtual;

             Возвращает  размер  палитры, представляющий собой объем дан-
        ных,  переданных к или от диалогового окна, с помощью SetData или
        GetData.

             См. также: TColorDialog.GetData, TColorDialog.SetData


             GetData
                  procedure GetData (var Rec); virtual;

             Вызывает  GetIndexes  для  копирования  выбранных  пунктов в
        каждой  группе  в ColorIndexes, после чего копирует DataSize байт
        из Rec в Pal, преобразуя тип Rec в тип TPalette.

             См. также: TColorDialog.DataSize


             GetIndexes
                  procedure GetIndexes (var Colors: PColorIndexes);

             Делает  цветовые индексы в Colors индексированными цветами в
        каждой   из  групп  в  Groups.  TColorDialog.GetData   использует
        GetIndexes   для   установки   индексов  в  ColorIndexes  равными
        индексам в каждой   группе  из   Groups. Сохранив ColorIndexes  в
        потоке, можно восстановить  состояние  диалогового окна с помощью
        LoadIndexes и SetData.

             См. также: переменную ColorIndexes


             HandleEvent
                  procedure HandleEvent (var Event: TEvent); virtual;

             Вызывает  метод  HandleEvent, унаследованный от TDialog, для
        обработки стандартного поведения диалогового окна, затем отвечает
        на  команды  cmNewColorIndex,  устанавливая  на  цветовом дисплее
        диалогового окна новый цвет.

             См. также: TDialog.HandleEvent, TColorDisplay.SetColor


             SetData
                  procedure SetData (var Rec); virtual;

             Копирует  DataSize  байт  из Rec в Pal, преобразуя тип Rec в
        тип TPalette. Если ShowMarkers равна True, то показывает монохро-
        мный селектор и прячет цветные селекторы.

         B.Pascal 7 & Objects/TV#2      - 139 -


             См. также: TColorDialog.DataSize, переменную ShowMarkers


             SetIndexes
                  procedure SetIndexes (var Colors: PColorIndexes);
                                                               virtual;

             Устанавливает  индексы в каждой группе цветов из Groups рав-
        ными  соответствующим  индексам  из  Colors. TColorDialog.SetData
        вызывает  SetIndexes  для  установки  индексов  группы  цветов из
        ColorIndexes,  восстанавливая  выбранные  элементы  с  последнего
        момента, когда ColorIndexes устанавливалась из Groups.

             См. также: TColorDialog.SetData


             Store
                  procedure Store (var S: TStream);

             Записывает диалоговое окно цветов в поток S, вызывая сначала
        метод  Store, унаследованный от TDialog, а затем записывая указа-
        тели на подэлементы, введенные с помощью TColorDialog, и в заклю-
        чение записывая палитру, хранимую в Pal.

             См. также: TDialog.Store




         B.Pascal 7 & Objects/TV#2      - 140 -

         TColorDisplay                                          ColorSel
        -----------------------------------------------------------------

             TColorDisplay  представляет  собой обычный отображаемый эле-
        мент, изображающий заданную текстовую строку в цвете, выбранном в
        селекторах цветов диалогового окна. Диалоговые окна выбора цветов
        используют  отображаемый  элемент  образца цвета для демонстрации
        пользователю того, как выглядит его выбор цветов.

             Подробная  информация о полях TColorDisplay и методах приве-
        дена в оперативной подсказке.


         Тип TColorGroup                                        ColorSel
        -----------------------------------------------------------------

             Описание
                TColorGroup = record
                  Name:     PString;
                  Index:    Byte;
                  Items:    PColorItem;
                  Next:     PColorGroup;
                end;

             Функция: Группа цветов определяет именованную группу связан-
        ных  элементов,  для  которых  пользователь может выбирать цвета.
        Name содержит имя группы, Index содержит порядковый номер цвета в
        списке  цветов,  а  Items указывает на первый элемент в связанном
        списке  элементов  цветов.  Next указывает на следующий элемент в
        связанном списке групп цветов.

             Диалоговое  окно цветов содержит окно-список групп, перечис-
        ляющее связанный список записей TColorGroup.

             Для  создания  и инициализации записей группы цветов исполь-
        зуйте функцию ColorGroup.

             См. также: функцию ColorGroup




         B.Pascal 7 & Objects/TV#2      - 141 -

         Объект TColorGroupList                                 ColorSel
        -----------------------------------------------------------------

             Список  групп  цветов  представляет собой специализированный
        объект  окна-списка,  дающий  прокручиваемый  список  именованных
        групп  цветов  для  выбора  в  диалоговом  окне  выбора   цветов.
        TColorGroupList   ведет  себя  как  обычное  диалоговое  окно, но
        представленный в  нем список  является связанным  списком записей
        TColorGroup.

             Подробная  информация о полях TColorGroupList и методах при-
        ведена в оперативной подсказке.


         Тип TColorIndex                                        ColorSel
        -----------------------------------------------------------------

             Описание
                TColorIndex = record
                  GroupIndex:    Byte;
                  ColorSize:     Byte;
                  ColorIndex:    array [0..255] of Byte;
                end;

             Функция:  Диалоговые  окна  выбора  цветов используют записи
        типа  TColorIndex  для  сохранения  порядкового  номера активного
        элемента в списке группы цветов и списке элементов цветов, позво-
        ляя  диалоговому  окну  восстанавливать свое предыдущее состояние
        при  загрузке.  Использовать  этот тип непосредственно никогда не
        приходится.     Он   используется   процедурами   LoadIndexes   и
        StoreIndexes.

             См. также: процедуру LoadIndexes, процедуру  StoreIndexes.


         Тип TColorItem                                         ColorSel
        -----------------------------------------------------------------

             Описание
                TColorItem = record
                  Name:     PString;
                  Index:    Byte;
                  Items:    PColorItem;
                end;


         B.Pascal 7 & Objects/TV#2      - 142 -

             Функция:  Элемент  цвета  определяет  именованный  элемент в
        группе,  для  которого  пользователь  может  выбирать цвета. Name
        содержит  имя  элемента,  Index содержит порядковый номер палитры
        цвета  программы,  определяющей  цвет элемента. Next указывает на
        следующий элемент в связанном списке элементов цветов.

             Диалоговое окно цветов содержит окно-список элементов, пере-
        числяющее связанный список записей типа TColorItem.

             Для  создания  и инициализации новых записей типа TColorItem
        используйте функцию ColorItem.




         B.Pascal 7 & Objects/TV#2      - 143 -

         Объект TColorItemList                                  ColorSel
        -----------------------------------------------------------------

             Список  элементов цветов представляет собой специализирован-
        ный  объект, унаследованный от TListViewer, дающий список элемен-
        тов  в  группе  цветов,  для  которых пользователь может выбирать
        цвета.  Список элементов цветов берется из поля Items записи типа
        TColorGroup.  Диалоговые  окна  выбора  цветов  используют список
        элементов  цветов  для  предоставления  пользователю  возможности
        выбирать группы элементов цветов для выбора цветов.

             Подробная информация о полях TColorItemList и методах приве-
        дена в оперативной подсказке.


         Тип TColorSel                                          ColorSel
        -----------------------------------------------------------------

             Описание
                  TColorSel = (csBackground, csForeground);

             Функция:  Объекты  селектора цветов используют перечисляемый
        тип TColorSel для описания типа селектора: фон или изображение.

             См. также: TColorSelector.SelType


         Объект TColorSelector                                  ColorSel
        -----------------------------------------------------------------

             Объекты  селектора  цветов  показывают  цвета, доступные для
        данного  отображаемого элемента. Существуют два их варианта: один
        для  цветов  фона, другой для цветов изображения. Диалоговые окна
        выбора цветов используют один из этих типов для показа возможного
        выбора цветов и цветов, выбранных в настоящий момент.

             Подробная информация о полях TColorSelector и методах приве-
        дена в оперативной подсказке.


         Тип TCommandSet                                        Views
        -----------------------------------------------------------------

             Описание: TCommandSet = set of Byte;

             Функция:  Тип TCommandSet полезен для хранения произвольного
        множества,  содержащего  до  256  команд.  Он позволяет выполнить
        простое тестирование и определить, соответствует ли данная коман-
        да  определенному критерию в программах обработки событий, и поз-
        воляет установить маски команд.

             Например,  методы  TView:  EnableCommands,  DisableCommands,
        GetCommands  и SetCommands используют аргументы типа TCommandSet.

         B.Pascal 7 & Objects/TV#2      - 144 -

        Набор команд можно описать и инициализировать, используя оператор
        Паскаля:

              CurCommandSet: TCommandSet = [0..255] - [cmZoom, cmClose,
                                           cmResize, cmNext];

             См. также:          cmXXXX,           TView.DisableCommands,
        TView.EnableCommands, TView.GetCommands, TView.SetCommands




         B.Pascal 7 & Objects/TV#2      - 145 -

         TDeskTop                                                  App
        -----------------------------------------------------------------

             TDeskTop-  это  простая группа, которая владеет отображаемым
        элементом  TBackground, на котором появляются окна и другие отоб-
        ражаемые  элементы  программы.  TDeskTop представляет оперативную
        область  экрана,  располагающуюся  между  верхней  полосой меню и
        нижней строкой состояния.

             Внимание! В версии 2.0 у объекта оперативной (рабочей) обла-
        сти появилось новое поле, позволяющее описывать способ мозаичного
        расположения объектов по умолчанию.

                                      Поля
        -----------------------------------------------------------------

             Background
                  Background: PBackground

             Указывает на объект фона оперативной области.


             TileColumnsFirst
                  TileColumnsFirst: Boolean;

             TileColumnsFirst  определяет, каким из окон будет отдаваться
        предпочтение  в случае мозаичного расположения в рабочей области:
        вертикальным  или  горизонтальным.  По умолчанию TileColumnsFirst
        равно  False, сохраняя поведение, принятое в версии 1.0, отдающей
        предпочтение  вертикальному  расположению  окон.  Установка этого
        поля  равным True приводит к отданию предпочтения горизонтальному
        расположению так, что, например, мозаичное расположение двух окон
        поместит их друг рядом с другом, а не одно под другим.

             См. также: TDesktop.Tile


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect);

             Создает группу TDeskTop с размером Bounds, вызывая конструк-
        тор Init, унаследованный от TGroup. Устанавливает GrowMode равной
        gfGrowHiX  +  gfGrowHiY. Для создания отображаемого элемента фона
        вызывает InitBackground, и если Background не равна nil, осущест-
        вляет его вставку.

             См. также:        TDeskTop.InitBackGround,       TGroup.Init,
        TGroup.Insert



         B.Pascal 7 & Objects/TV#2      - 146 -

             Cascade
                  procedure Cascade(var R: TRect);

             Заново отображает все окна, которые можно расположить мозаи-
        чно, и принадлежащие рабочей области экрана, в "каскадном" форма-
        те.  Первое окно в циклическом порядке (самое нижнее) расширяется
        на  всю  панель  экрана,  а каждое последующее окно заполняет об-
        ласть, начинающуюся на одну строку ниже и на одну колонку правее,
        чем предыдущее. Активное окно появляется поверх остальных и имеет
        наименьший размер.

             Если  рабочая область не может расположить окна каскадно, то
        она оставляет их на месте и вызывает TileError.

             См. также: ofTileable, TDeskTop.Tile, TDesktop.TileError


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: переопределяется редко.

             Вызывает  метод  HandleEvent,  унаследованный  от  TGroup, а
        затем отрабатывает команды cmNext (обычно оперативную клавишу F6)
        и  cmPrevious циклическим проходом по окнам (начиная с выбранного
        в  настоящий момент отображаемого элемента), принадлежащим опера-
        тивной области экрана.

             См. также: TGroup.HandleEvent, константы команд cmXXXX


             InitBackGround
                  procedure InitBackGround; virtual;

             Переопределяемость: иногда переопределяется.

             Создает отображаемый элемент фона рабочей области и присваи-
        вает  его  Background.  TDeskTop.Init  вызывает  этот, после чего
        вставляет Background в рабочую область. Наследуемые объекты могут
        переопределять  этот метод и присваивать Background другой объект
        фона.

             См. также: TDeskTop.Init


             Tile
                  procedure Tile(var R: TRect);

             Переопределяемость: иногда переопределяется.

             Заново  отображает  все  отображаемые элементы с ofTileable,
        принадлежащие  рабочей  области экрана, в мозаичном формате. Если
        рабочая  область  не может расположить окна требуемым образом, то

         B.Pascal 7 & Objects/TV#2      - 147 -

        она оставляет их на месте и вызывает TileError.

             См. также: TDeskTop.Cascade, ofTileable, TDeskTop.TileError


             TileError
                  procedure TileError; virtual;

             Переопределяемость: иногда переопределяется.

             Метод  TileError  вызывается,  если возникла ошибка во время
        работы  TDeskTop.Tile или TDeskTop.Cascade. Вы можете переопреде-
        лить  его,  чтобы  указать  пользователю,  что программа не может
        перерасположить окна.

             См. также: TDeskTop.Tile, TDeskTop.Cascade




         B.Pascal 7 & Objects/TV#2      - 148 -

         TDialog                                                Dialogs
        -----------------------------------------------------------------

             TDialog  представляет собой специализированный объект, унас-
        ледованный от  TWindow,  и созданный специально для режимного ис-
        пользования и для хранения органов управления. Объекты диалоговых
        окон  отличаются  от  определенных по умолчанию окон по следующим
        пунктам:

            - GrowMode равна 0, т.е. диалоговые окна могут увеличиваться;

            - флаги  wfMove  и  wfClose установлены, т.е. диалоговые окна
        можно перемещать и закрывать (имеется закрывающая пиктограмма);

            - обработчик событий TDialog вызывает TWindow.HandleEvent, но
        также  дополнительно  отрабатывает ответы на клавиши Esc и Enter.
        Клавиша Esc генерирует команду cmCancel, а Enter генерирует кома-
        нду cmDefault;

            - диалоговые окна не имеют номеров;

            - метод  TDialog.Valid возвращает True на команду cmCancel, в
        противном случае вызывает TGroup.Valid.

             Внимание!  В версии 2.0 в дополнение к существующей по умол-
        чанию  серой палитре диалоговые окна поддерживают синюю и голубую
        палитры.  Предыдущие  версии  TDialog  игнорировали поле Palette.
        Теперь объекты диалогового окна могут указывать палитру, присваи-
        вая Palette константы dpXXXX.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect; ATitle: TTitleStr);

             Создает  диалоговое  окно  с заданным размером и заголовком,
        вызывая  конструктор Init, унаследованный от TWindow, передавая в
        качестве параметров Bounds, ATitle и wnNoNumber. GrowMode устана-
        вливается  равным  0,  а  Flags  устанавливается  равной wfMove +
        wfClose.  Это  означает,  что  по умолчанию диалоговые окна можно
        перемещать и закрывать, но нельзя изменять их размеры.

             Заметим, что TDialog не определяет собственного деструктора,
        а  использует  Close  и Done, наследуемые через TWindow, TGroup и
        TView.

             См. также: TWindow.Init


             Load
                  constructor Load (var S: TStream);

         B.Pascal 7 & Objects/TV#2      - 149 -


             Считывает  объект диалогового окна из потока S, вызывая сна-
        чала  конструктор Load, унаследованный от TWindow, а затем обнов-
        ляя  необходимым  образом  информацию  о  палитре. Load проверяет
        значение  флагов  Options  загруженного  диалогового окна, и если
        биты  ovVersion  равны  ofVersion10,  то  Load устанавливает поле
        Palette  равным  dpGrayDialog и обновляет значение Options, чтобы
        оно включало ofVersion20.

             См. также: TWindow.Load


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: иногда используется.

             Обрабатывает большинство событий, вызывая метод HandleEvent,
        унаследованный от TWindow, а затем обрабатывает события от клавиш
        Enter   и  Esc.  В  частности,  клавиша  Esc  генерирует  команду
        cmCancel, а Enter посылает сообщения cmDeafult.

             Этот  метод также обрабатывает cmOK, cmCancel, cmYes и cmNo,
        прекращая режимное состояние диалогового окна.

             См. также: TWindow.HandleEvent


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: переопределяется редко.

             Этот  метод возвращает указатель на палитру, заданную индек-
        сом палитры в поле Field. В таблице 19.39 показаны палитры, возв-
        ращаемые для различных значений Palette.

             Таблица  19.39 Возвращаемые палитры диалогового окна в зави-
        симости от значения Palette

             ------------------------------------------------------------
             Поле Palette        Возвращенная палитра
             ------------------------------------------------------------
             dpBlueDialog        CBlueDialog

             dpCyanDialog        CCyanDialog

             dpGrayDialog        CGrayDialog
             ------------------------------------------------------------

             Внимание!  В  версии 1.0 GetPalette всегда возвращала указа-
        тель  на палитру, определенную по умолчанию, CDialog. Для обеспе-
        чения  совместимости  с  предыдущими версиями CDialog по прежнему

         B.Pascal 7 & Objects/TV#2      - 150 -

        доступна.   Палитра,   заданная  по  умолчанию   в  версии   2.0,
        CGrayDialog, идентична CDialog.

             См. также: TWindow.Palette


             Valid
                  function Valid(Command: Word): Boolean; virtual;

             Переопределяемость: переопределяется редко.

             Возвращает  значение  True, если заданная команда- cmCancel,
        или если метод Valid, унаследованный от TWindow, возвращает True.

             См. также: TGroup.Valid


                                      Палитра
        -----------------------------------------------------------------


             Объекты  диалогового  окна  используют  различные  палитры в
        зависимости  от  значения  поля Palette. Обратите внимание на то,
        что  палитра  диалоговых окон CDialog, используемая в версии 1.0,
        идентична  палитре,  определенной  по  умолчанию  в  версии  2.0,
        CGrayDialog.


         B.Pascal 7 & Objects/TV#2      - 151 -



                           1   2   3   4   5   6   7   8   9
                         ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CGrayDialog      ║ 32│ 33│ 34│ 35│ 36│ 37│ 38│ 39│ 40║
                         ╠═══╪═══╪═══╪═══╪═══╪═══╪═══╪═══╪═══╣
        CBlueDialog      ║ 64│ 65│ 66│ 67│ 68│ 69│ 70│ 71│ 72║
                         ╠═══╪═══╪═══╪═══╪═══╪═══╪═══╪═══╪═══╣
        CCyanDialog      ║ 96│ 97│ 98│ 99│100│101│102│103│104║
                         ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
                           │   │   │   │   │   │   │   │   │
            Пассивная    ──┘   │   │   │   │   │   │   │   └ Оперативная
            рамка              │   │   │   │   │   │   │    клавиша метки
            Активная     ──────┘   │   │   │   │   │   └─── Подсвеченная
            рамка                  │   │   │   │   │        метка
            Пиктограмма  ──────────┘   │   │   │   └─────── Нормальная
            рамки                      │   │   │            метка
            Страница       ────────────┘   │   └───────────── Статический
            прокрутки                      │                  текст
            Элементы управления ───────────┘
            прокруткой


                       1   2   3   4   5   6   7   8   9
                     ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CGrayDialog  ║ 32│ 33│ 34│ 35│ 36│ 37│ 38│ 39│ 40║
                     ╠═══╪═══╪═══╪═══╪═══╪═══╪═══╪═══╪═══╣
        CBlueDialog  ║ 64│ 65│ 66│ 67│ 68│ 69│ 70│ 71│ 72║
                     ╠═══╪═══╪═══╪═══╪═══╪═══╪═══╪═══╪═══╣
        CCyanDialog  ║ 96│ 97│ 98│ 99│100│101│102│103│104║
                     ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
                       │   │   │   │   │   │   │   │   │
        Нормальная    ─┘   │   │   │   │   │   │   │   └ Оперативная
        "кнопка"           │   │   │   │   │   │   │     клавиша кластера
        "Кнопка" по   ─────┘   │   │   │   │   │   └──── Выбранный
        умолчанию              │   │   │   │   │         кластер
        Выделенная    ─────────┘   │   │   │   └──────── Нормальный
        "кнопка"                   │   │   │             кластер
        Запрещенная   ─────────────┘   │   └──────────── Тень "кнопки"
        "кнопка"                       │
        Оперативная клавиша────────────┘
        "кнопки"


         B.Pascal 7 & Objects/TV#2      - 152 -


                        19  20  21  22  23  24  25
                      ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CGrayDialog   ║ 50│ 51│ 52│ 53│ 54│ 55│ 56║
                      ╠═══╪═══╪═══╪═══╪═══╪═══╪═══╣
        CBrayDialog   ║ 82│ 83│ 84│ 85│ 86│ 87│ 88║
                      ╠═══╪═══╪═══╪═══╪═══╪═══╪═══╣
        CCyanDialog   ║114│115│116│117│118│119│120║
                      ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
                        │   │   │   │   │   │   │
        Нормальная    ──┘   │   │   │   │   │   └── Элементы управления
        строка ввода        │   │   │   │   │       прокруткой в окне
        Выбранная     ──────┘   │   │   │   │       протокола
        строка ввода            │   │   │   │
        Стрелки       ──────────┘   │   │   └────── Страница прокрутки
        строки ввода                │   │           окна протокола
        Стрелка протокола ──────────┘   │
                                        └────────── Стороны протокола



                           19  20  21  22  23  24  25
                         ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╗
           CGrayDialog   ║ 50│ 51│ 52│ 53│ 54│ 55│ 56║
                         ╠═══╪═══╪═══╪═══╪═══╪═══╪═══╣
           CBrayDialog   ║ 82│ 83│ 84│ 85│ 86│ 87│ 88║
                         ╠═══╪═══╪═══╪═══╪═══╪═══╪═══╣
           CCyanDialog   ║114│115│116│117│118│119│120║
                         ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
                           │   │   │   │   │   │   │
        Нормальный просмотр┘   │   │   │   │   │   └── Зарезервировано
        списка                 │   │   │   │   │
        Активный просмотр  ────┘   │   │   │   └────── Зарезервировано
        списка                     │   │   │
        Выделенный просмотр ───────┘   │   └───────── Информационная
                                       │              область
        Разделитель просмотра ─────────┘

             См. также: Метод GetPalette для каждого типа объекта.

         B.Pascal 7 & Objects/TV#2      - 153 -

         Объект TDirCollection                                  StdDlg
        -----------------------------------------------------------------
             TDirCollection  представляет  собой  набор записей DirEntry,
        используемый   TDirListBox.   Подробная   информация   о    полях
        TDirCollection и его методах приведена в оперативной подсказке.


         Тип TDirEntry                                          StdDlg
        -----------------------------------------------------------------
             Описание:
                  TDirEntry = record
                       DisplayText:   PString;
                       Directory:     PString;
                  end;

             Функция:  DirEntry  представляет  собой  простой тип записи,
        содержащий строку с путем к каталогу и описания. Эти записи испо-
        льзуются  в  объектах  TDirCollection  для  хранения информации о
        каталоге для диалогового окна смены каталога.

             См. также: объект TDirCollection


         Объект TDirListBox                                     StdDlg
        -----------------------------------------------------------------
             TDirListBox  представляет  собой  специальный   отображаемый
        элемент  окна-списка, отображающий дерево каталогов, хранящееся в
        объекте TDirCollection для использования в TChDirDialog.

             По  умолчанию  каталоги  появляются  в окне в один столбец с
        вертикальной  полосой  прокрутки.  Подробная  информация  о полях
        TDirListBox и его методах приведена в оперативной подсказке.


         TDosStream                                              Objects
        -----------------------------------------------------------------
             TDosStream- это специализированный производный поток, реали-
        зующий небуфферизованный  поток файла DOS.  Конструктор позволяет
        создать или открыть файл DOS,  задав его  имя  и  режим  доступа:
        stCreate, stOpenRead, stOpenWrite или stOpen. В TDosStream введе-
        но дополнительное поле Handle- традиционный  идентификатор  файла
        DOS, используемый для доступа к открытому файлу.

             Большинство программ будут использовать буферизованный поток
        TBufStream,  порожденный от TDosStream. TDosStream переопределяет
        все абстрактные методы TStream, за исключением TStream.Flush.


                                        Поля
        -----------------------------------------------------------------
             Handle                                   (только для чтения)

         B.Pascal 7 & Objects/TV#2      - 154 -

                  Handle: Word;

             Handle- это идентификатор файла DOS, используемый только для
        доступа к открытому файлу потока.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(FileName: FNameStr; Mode: Word);

             Создает поток файла DOS с именем FileName и заданным режимом
        доступа. В случае успеха поле Handle устанавливается равным иден-
        тификатору файла DOS. Ошибка указывается вызовом Error с аргумен-
        том stInitError.

             Аргумент  Mode  должен принимать одно из значений: stCreate,
        stOpenRead,  stOpenWrite  или  stOpen.  Эти константы объяснены в
        этой главе в разделе "Константы потока stXXXX".


             Done
                  destructor Done; virtual;

             Переопределяемость: не переопределяется.

             Закрывает и освобождает поток файла DOS.

             См. также: TDosStream.Init


             GetPos
                  function GetPos: Longint; virtual;

             Переопределяемость: не используется.

             Возвращает значение текущей позиции в потоке. Первая позиция
        имеет номер 0.

             См. также: TDosStream.Seek


             GetSize
                  function GetSize: Longint; virtual;

             Переопределяемость: не переопределяется.

             Возвращает размер потока в байтах.


         B.Pascal 7 & Objects/TV#2      - 155 -


             Read
                  procedure Read(var Buf; Count: Word); virtual;

             Переопределяемость: не используются.

             Считывает  из потока Count байт в буфер Buf, начиная с теку-
        щей позиции потока.

             См. также: TDosStream.Write, stReadError


             Seek
                  procedure Seek(Pos: Longint); virtual;

             Переопределяемость: не переопределяется.

             Устанавливает  текущую  позицию  равной  Pos  байт от начала
        потока. Первая позиция имеет номер 0.

             См. также: TDosStream.GetPos, TDosStream.GetSize


             Truncate
                  procedure Truncate; virtual;

             Переопределяемость: не переопределяется.

             Удаляет  все  данные  текущего  потока от текущей позиции до
        конца потока.

             См. также: TDosStream.GetPos, TDosStream.Seek


             Write
                  procedure Write(var Buf; Count: Word); virtual;

             Записывает Count байт из буфера Buf в поток, начиная с теку-
        щей позиции.

             См. также: TDosStream.Read, stWriteError


         Тип TDrawBuffer                                        Views
        -----------------------------------------------------------------

             Описание:  TDrawBuffer = array[0..MaxViewWidth-1] of Word;

             Функция: Тип TDrawBuffer используется для объявления буферов
        для  методов Draw различных отображаемых элементов. Обычно данные
        и  атрибуты  сохраняются  и  форматируются  строка  за  строкой в
        TDrawBuffer, а затем выводятся на экран:


         B.Pascal 7 & Objects/TV#2      - 156 -

                  var
                    B: TDrawBuffer;
                  begin
                    MoveChar(B, ' ', GetColor(1), Size.X);
                                           {заполняет буфер пробелами}
                    WriteLine(0, 0, Size.X, Size.Y, B);
                                           {пишет буфер на экран}
                  end;

             См. также: TView.Draw, MoveBuf, MoveChar, MoveCStr, MoveStr


         Тип TEditBuffer                                        Editors
        -----------------------------------------------------------------

             Описание:
                  TEditBuffer = array [0..65519] of Char;

             TEditBuffer  определяет  массив символов для редактирования.
        Объекты TEditor и TMemo используют массивы TEditBuffer для сохра-
        нения буферов для редактирования.


         Объект TEditor                                         Editors
        -----------------------------------------------------------------

             TEditor реализует простой, быстрый редактор с объемом памяти
        64K для использования в программах Turbo Vision. Он имеет поддер-
        жку мыши, отмену изменений, работу с системным буфером, автомати-
        ческие режимы формирования отступов и изменение режимов вставки/-
        замены,  создание  оперативных  клавиш,  а  также поиск и замену.
        Отображаемые элементы редактора можно использовать для редактиро-
        вания файлов и для многостроковых полей комментариев в диалоговых
        окнах или бланках.

             Некоторые  другие  объекты,  такие, как TMemo и TFileEditor,
        моментально дают полезные объекты редактора, но они наследуют все
        основные функции от TEditor.

             Использование  объектов  редактора полностью описано в Главе
        15, "Редактор и текстовые отображаемые элементы".


                                        Поля
        -----------------------------------------------------------------

             AutoIndent
                  AutoIndent: Boolean;

             Если  AutoIndent равно True, то редактор автоматически начи-
        нает  печать  строки  текста  с той колонки, с которой начинается
        предыдущая  строка;  в противном случае новые строки начинаются с
        крайней левой позиции.

         B.Pascal 7 & Objects/TV#2      - 157 -



             Buffer
                  Buffer: PEditBuffer;

             Указывает на буфер, в котором объект редактора хранит редак-
        тируемый текст. Текст может содержать до 64K символов.

             См. также: тип TEditBuffer


             BufLen
                  BufLen: Word;

             BufLen  хранит  количество  символов  между началом буфера и
        текущим положением курсора.


             BufSize
                  BufSize: Word;

             BufSize  представляет  собой размер текстового буфера в бай-
        тах.


             CanUndo
                  CanUndo: Boolean;

             CanUndo  определяет,  поддерживает  ли редактор режим отмены
        изменений.  По  умолчанию  TEditor.Init  устанавливает   значение
        CanUndo   равным  True,  что  указывает  на способность редактора
        отменять изменения.


             CurPos
                  CurPos: TPoint;

             CurPos указывает строку и столбец файла, в которых находится
        курсор.  Cursor.X дает текущий столбец, а Cursor.Y- текущую стро-
        ку.


             CutPtr
                  CutPtr: Word

             CutPtr  представляет собой положение курсора в буфере редак-
        тора.


             DelCount
                  DelCount: Word;

             Количество символов в конце промежутка, которые были удалены

         B.Pascal 7 & Objects/TV#2      - 158 -

        из  текста. DelCount используется для отмены изменений, связанных
        с удалением символов.


             Delta
                  Delta: TPoint;

             Delta  представляет  собой  верхнюю  строку и левый столбец,
        показанные  на  отображаемом элементе. Delta.X- это левый видимый
        столбец, а Delta.Y- верхняя видимая строка.


             DrawLine
                  DrawLine: Integer;

             DrawLine  представляет  собой  положение на экране строки, в
        которую вводятся вставляемые символы. Метод Draw использует Draw-
        Line  для  оптимизации  того,  какую часть отображаемого элемента
        перерисовывать.


             DrawPtr
                  DrawPtr: Word;

             DrawPtr представляет собой положение курсора в буфере, испо-
        льзуемом Draw.


             GapLen
                  GapLen: Word

             GapLen  представляет собой размер "промежутка" между текстом
        до курсора и текстом после курсора. Понятие промежутка объясняет-
        ся в Главе 15.


             HScrollBar
                  HScrollBar: PScrollBar;

             Указывает на объект горизонтальной полосы прокрутки, связан-
        ный  с  редактором.  Значение  nil  указывает на отсутствие такой
        полосы прокрутки.


             Indicator
                  Indicator: PIndicator;

             Указывает  на  объект  индикатора,  связанный  с редактором.
        Объект  индикатора  показывает  редактируемые  в настоящий момент
        строку и столбец.

             См. также: объект TIndicator


         B.Pascal 7 & Objects/TV#2      - 159 -


             InsCount
                  InsCount: Word;

             Количество  символов, вставленных в текст, с момента послед-
        него  перемещения курсора. InsCount используется для отмены изме-
        нений, связанных со вставкой.


             IsValid
                  IsValid: Boolean;

             Содержит  значение  True, если отображаемый элемент является
        допустимым. IsValid используется методом Valid.

             См. также: TEditor.Valid


             Limit
                  Limit: TPoint;

             Limit  содержит  максимальные ширину и длину текста. Limit.X
        дает  длину  самой  длинной строки, а Limit.Y- количество строк в
        файле.


             Modified
                  Modified: Boolean;

                  Имеет значение True, если буфер изменялся.


             OverWrite
                  OverWrite: Boolean

             Если  OverWrite  равно  True, то печатаемые в буфере символы
        замещают существовавшие ранее; в противном случае редактор осуще-
        ствляет вставку вводимых символов.


             Selecting
                  Selecting: Boolean;

             Selecting равно True в том случае, если пользователь отмеча-
        ет блок, как это бывает после отметки начала блока, но до отметки
        его конца. В остальные моменты времени Select равно False.


             SelEnd
                  SelEnd: Word;

             SelEnd  представляет собой положение в буфере конца выделен-
        ного текста.

         B.Pascal 7 & Objects/TV#2      - 160 -



             SelStart
                  SelStart: Word;

             SelStart  представляет собой положение в буфере начала выде-
        ленного текста.


             VScrollBar
                  VScrollBar: PScrollBar;

             Указывает на объект вертикальной полосы прокрутки, связанный
        с  редактором.  Значение nil указывает на отсутствие такой полосы
        прокрутки.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init (var Bounds: TRect;
                       AHScrollBar, AVScrollBar: PScrollBar;
                       AIndicator: PIndicator;
                       ABufSize: Word);

             Создает   отображаемый   элемент с  границами, указанными  в
        Bounds,   путем   вызова  конструктора  Init,  унаследованного от
        TView.  Устанавливает  GrowMode  равным  gfGrowHiX  +  gfGrowHiY,
        Options  равным   Options  или  ofSelectable  и  EventMask равным
        evMouseDown  +  evKeyDown  +  evCommand + evBroadcast. Показывает
        курсор в редакторе и  присваивает полям HScrollBar,   VScrollBar,
        Indicator  и   BufSize   значения,    переданные    в    качестве
        параметров. Устанавливает CanUndo равным True.

             Выделяет    память    под  буфер   редактирования,   вызывая
        InitBuffer. Если  память выделить  не удается,  то Init  вызывает
        EditorDialog    для    выдачи  сообщения   "Out  of   memory"   и
        устанавливает размер  буфера равным  0. Для  инициализации буфера
        вызывает SetBufLen (0).

             См. также: TView.Init, TEditor.InitBuffer, TEditor.SetBufLen


             Load
                  constructor Load (var S: TStream);

             Создает  и  загружает  объект редактора из потока S, вызывая
        сначала конструктор Load, унаследованный от TView, а затем считы-
        вая  поля,  введенные  TEditor.  Выделяет память и инициализирует
        буфер так же, как и TEditor.Init.

             См. также: TView.Load, TEditor.InitBuffer, TEditor.SetBufLen

         B.Pascal 7 & Objects/TV#2      - 161 -



             Done
                  destructor Done; virtual;

             Уничтожает  буфер  редактирования, вызывая DoneBuffer, после
        чего освобождает память из-под объекта редактора вызовом деструк-
        тора Done, унаследованного от TView.

             См. также: TEditor.DoneBuffer, TView.Done


             BufChar
                  function BufChar (P: Word): Char;

             Возвращает символ буфера с номером P.


             BufPtr
                  function BufPtr (P: Word): Word;

             Возвращает  положение  в буфере символа с номером P с учетом
        возможного промежутка за символом.


             ChangeBounds
                  procedure ChangeBounds (var Bounds: TRect); virtual;

             Изменяет  границы отображаемого элемента редактора до значе-
        ния  Bounds,  после  этого  настраивает Delta с целью убедиться в
        том,  что  текст все еще видим, после чего в случае необходимости
        перерисовывает  отображаемый  элемент.  Так  же,  как и с методом
        TView, который он переопределяет, TEditor.ChangeBounds вызывается
        другими методами, но не должен вызываться непосредственно.


             ConvertEvent
                  procedure ConvertEvent (var Event: TEvent); virtual;

             Используется  HandleEvent  для обработки назначения клавиш и
        основных  операций  редактирования.  Если  Вы хотите изменить или
        расширить  существующие по умолчанию назначения клавиш, Вы должны
        переопределить ConvertEvent.

             См. также: TEditor.HandleEvent


             CursorVisible
                  function CursorVisible: Boolean;

             Возвращает значение True, если курсор видим в границах отоб-
        ражаемого элемента.


         B.Pascal 7 & Objects/TV#2      - 162 -


             DeleteSelect
                  procedure DeleteSelect;

             Удаляет выделенный текст, если таковой существует. Например,
        после  того,  как  ClipCut копирует выделенный текст в буфер, она
        удаляет его из буфера с помощью DeleteSelect.


             DoneBuffer
                  procedure DoneBuffer; virtual;

             Освобождает  память,  выделенную под буфер редактирования, и
        устанавливает Buffer равным nil.


             Draw
                  procedure Draw; virtual;

             Изображает  часть редактируемого текста, видимую в настоящий
        момент. То есть, она изображает строки, находящиеся внутри границ
        отображаемого элемента, учитывая значение Delta.


             GetPalette
                  function GetPalette: PPalette; virtual;

             Возвращает  указатель на CEditor- установленную по умолчанию
        палитру отображаемого элемента редактора.


             HandleEvent
                  procedure HandleEvent (var Event: TEvent); virtual;

             Управляет  событиями  для  отображаемого элемента редактора,
        вызывая  сначала  метод  HandleEvent,  унаследованный от TView, а
        затем вызывая ConvertEvent для нового привязывания клавиш к кома-
        ндам, после чего обрабатывая специфическое поведение редактора.

             Обрабатываются следующие специфические события редактора:

               - мышь: Выделение текста;

               - клавиатура: Вставка/замена;

               - команда: перемещение курсора, выбор текста, редактирова-
        ние, работа с системным буфером;

               - сообщение: изменение в полосе прокрутки.


             InitBuffer
                  procedure InitBuffer; virtual;

         B.Pascal 7 & Objects/TV#2      - 163 -


             Вызывает  MemAlloc  для  выделения  BufSize байт динамически
        распределяемой  памяти  для  буфера  редактора, и присваивает ему
        указатель Buffer.


             InsertBuffer
                  function InsertBuffer (var P: PEditBuffer;
                            Offset, Length: Word;
                            AllowUndo, SelectText: Boolean): Boolean;

             Это  процедура  вставки  текста  низкого  уровня, вызываемая
        InsertFrom и InsertText; Вам редко придется использовать ее непо-
        средственно, если вообще придется.

             InserBuffer  производит вставку Length байт текста из P (на-
        чиная с P[Offset]) в позицию текстового буфера CurPtr, удаляя при
        этом  любой  выделенный  текст.  Если  AllowUndo  равна  True, то
        InsertBuffer    записывает    информацию,    которая     позволит
        пользователю отменить  изменения.   Еcли  SelectText равна  True,
        то  вставляемый  текст  будет  появляться  в  виде   вставленного
        выделенного блока.

             Возвращает  значение  True  в  случае успешной вставки. Если
        вставка  не  удалась  (вследствие  превышения размера буфера), то
        InsertBuffer вызывает EditorDialog для вывода предупреждения "Out
        of memory", после чего возвращает False.

             См. также: TEditor.InsertFrom, TEditor.InsertText


             InsertFrom
                  function InsertFrom (Editor: PEditor):
                                                Boolean; virtual;

             Осуществляет  вставку  текста  из  Editor в буфер редактора,
        вызывая InsertBuffer.

             См. также: TEditor.InsertBuffer


             InsertText
                  function InsertText (Text: Pointer; Length: Word;
                                           SelectText: Boolean): Boolean;

             Копирует  Length  байт  из  Text  в буфер редактора, выделяя
        вставленный текст в случае равенства SelectText True.


             ScrollTo
                  procedure ScrollTo (X, Y: Integer);

             Перемещает столбец X и строку Y в левый верхний угол отобра-

         B.Pascal 7 & Objects/TV#2      - 164 -

        жаемого  элемента  редактора  и  при необходимости перерисовывает
        отображаемый элемент.


             Search
                  function Search (const FindStr: String;
                                                Opts: Word): Boolean;

             Осуществляет  поиск  текста из FindStr в буфере редактирова-
        ния,  начиная  с CurPtr. Opts равно нулю для поиска, заданного по
        умолчанию, efCaseSensitive для поиска, чувствительного к регистру
        букв, или WholeWordsOnly для поиска лишь целых слов.

             Возвращает  True  и  отмечает  найденный  текст; в противном
        случае возвращает False.


             SetBufSize
                  function SetBufSize (NewSize: Word): Boolean; virtual;

             Возвращает  значение True в случае, если размер буфера может
        быть  изменен до размера NewSize. По умолчанию SetBufSize возвра-
        щает  True,  если NewSize меньше или равно BufSize. SetBufSize не
        изменяет  реального  размера  буфера; она только указывает на то,
        может  ли быть сделано такое изменение. Собственно изменение раз-
        мера буфера должно осуществляться с помощью SetBufferSize.

             См. также: функцию SetBufferSize


             SelSelect
                  procedure SelSelect (NewStart, NewEnd: Word;
                                                     CurStart: Boolean);

             Делает  текст между положениями NewStart и NewEnd выделенным
        и  при  необходимости  перерисовывает  отображаемый элемент. Если
        CurStart  равно True, то SelSelect помещает курсор в начало выде-
        ленного  блока, в противном случае курсор помещается в конец бло-
        ка.


             SetState
                  procedure SetState (AState: Word;
                                           Enable: Boolean); virtual;

             Вызывает метод SetState, унаследованный от TView, для дейст-
        вительной установки флагов состояния, после чего прячет или пока-
        зывает отображаемые элементы полос прокрутки и индикатора, связа-
        нные  с  редактором, причем показывает их в случае, если редактор
        активен,  и прячет, если он неактивен. После обновления связанных
        отображаемых  элементов SetState вызывает UpdateCommands для раз-
        решения  или запрещения команд в зависимости от того, является ли
        редактор  активным.  При  необходимости  разрешить  или запретить

         B.Pascal 7 & Objects/TV#2      - 165 -

        дополнительные  команды необходимо переопределить UpdateCommands,
        а не SetState.

             См. также: TView.SetState, TEditor.UpdateCommands


             Store
                  procedure Store (var S: TStream);

             Записывает объект редактора в поток S, вызывая сначала метод
        Store, унаследованный от TView, а затем записывая поля, введенные
        TEditor.

             См. также: TView.Store


             TrackCursor
                  procedure TrackCursor (Center: Boolean);

             Заставляет  отображаемый  элемент прокрутить содержимое так,
        чтобы  показать  положение  курсора.  Если  Center равна True, то
        строка, в которой находится курсор, перемещается в середину отоб-
        ражаемого элемента.


             Undo
                  procedure Undo;

             Отменяет изменения, произведенные с момента последнего пере-
        мещения курсора, восстанавливая буфер редактирования к состоянию,
        которое он имел перед последним перемещением курсора.


             UpdateCommands
                  procedure UpdateCommands; virtual;

             Обновляет  команды, основанные на текущем состоянии редакто-
        ра. cmUndo разрешается только в случае, если с момента последнего
        перемещения  курсора  текст  изменялся. Делает доступными команды
        Cut,  Copy  и Paste в том случае, если в системном буфере имеется
        текст. Команда cmClear разрешается в случае, если имеется отмече-
        нный текст. Делает доступными все команды поиска и замены.

             Если  порожденные  объекты переопределяют UpdateCommands, то
        необходимо вызывать порожденный метод TEditor.UpdateCommands.


             Valid
                  function Valid (Command: Word): Boolean; virtual;

             Говорит, является ли отображаемый элемент редактора допусти-
        мым для команды, переданной в Command. По умолчанию Valid игнори-
        рует параметр Command и возвращает значение поля IsValid. IsValid

         B.Pascal 7 & Objects/TV#2      - 166 -

        имеет значение False только в том случае, если конструктор не мог
        выделить память для буфера редактирования.


                                      Палитра
        -----------------------------------------------------------------

             Объекты  редактора  используют  установленную  по  умолчанию
        палитру CEditor для отображения элементов 6 и 7 стандартной пали-
        тры окна.


                       ╔═══╤═══╗
          CEditor      ║ 6 │ 7 ║
                       ╚═╤═╧═╤═╝
                         │   │
          Нормальный  ───┘   └─── Подсвеченный


         B.Pascal 7 & Objects/TV#2      - 167 -

         Тип TEditorDialog                                      Editors
        -----------------------------------------------------------------

             Описание:
                  TEditorDialog = function (Dialog: Integer;
                                                Info: Pointer): Word;

             Функция:  TEditorDialog  представляет собой процедурный тип,
        используемый  объектами  TEditor  для выдачи различных диалоговых
        окон.  Поскольку диалоговые окна зависят от программы, то объекты
        редактора  не изображают своих собственных диалоговых окон непос-
        редственно. Вместо этого они вызывают функцию EditorDialog, выво-
        дящую  на экран соответствующее диалоговое окно в соответствии со
        значением, переданным в параметре Dialog.

             Параметр  Dialog  должен быть одной из констант edXXXX. Info
        может  указывать  на  любые  дополнительные данные, которые могут
        потребоваться функции диалогового окна.

             Функции  диалогового окна должны обеспечить правильное пове-
        дение для всех значений параметра Dialog. Функция StdEditorDialog
        дает  удобный для использования отклик на все допустимые значения
        Dialog. В Таблице 19.40 сведены воедино все значения Info, ожида-
        емые  сообщения и возвращаемые значения для каждого значения Dia-
        log.


             Таблица 19.40. Значения параметра TEditorDialog, сообщения
                                 и возвращаемые значения

        -----------------------------------------------------------------
        Константа Dialog    Значения       Описание
        -----------------------------------------------------------------
        edOutOfMemory       Info           nil
                            Сообщение      Информирует пользователя о
                                           недостатке памяти
                            Возвращаемое   Игнорируется
                            значение


        edReadError         Info           PString, указывающая на имя
                                           файла
                            Сообщение      Информирует пользователя об
                                           ошибке чтения файла
                            Возвращаемое   Игнорируется
                            значение


        edWriteError        Info           PString, указывающая на имя
                                           файла
                            Сообщение      Информирует пользователя об
                                           ошибке записи в файл
                            Возвращаемое   Игнорируется

         B.Pascal 7 & Objects/TV#2      - 168 -

                            значение


        edCreateError       Info           PString, указывающая на имя
                                           файла
                            Сообщение      Информирует пользователя об
                                           ошибке создания файла
                            Возвращаемое   Игнорируется
                            значение


        edSaveModify        Info           PString, указывающая на имя
                                           файла
                            Сообщение      Запрашивает пользователя о
                                           необходимости сохранения
                                           изменений перед закрытием
                                           файла
                            Возвращаемое   cmYes для сохранения изменений,
                            значение       cmNo для отказа от сохранения
                                           изменений, cmCancel для отказа
                                           от закрытия файла


        edSaveUntitled      Info           PString, указывающая на имя
                                           файла
                            Сообщение      Запрашивает пользователя о
                                           необходимости сохранения
                                           безымянного файла
                            Возвращаемое   cmYes для сохранения файла,
                            значение       cmNo для отказа от сохранения
                                           файла, cmCancel для отказа от
                                           закрытия файла


        edSaveAs            Info           PString, указывающая на имя
                                           файла
                            Сообщение      Подсказка пользователю об
                                           имени файла
                            Возвращаемое   cmCancel при отказе от
                            значение       сохранения файла; другие
                                           значения при сохранении файла
                                           под именем из буфера, на
                                           который указывает Info


        edFind              Info           Указывает на тип TFindDialogRec
                            Сообщение      Запрос пользователю об искомом
                                           тексте и опциях поиска
                            Возвращаемое   cmCancel при отказе от поиска;
                            значение       в противном случае заполняет
                                           запись, на которую указывает
                                           Info


         B.Pascal 7 & Objects/TV#2      - 169 -


        edSearchFailed      Info           nil
                            Сообщение      Сообщение пользователю о том,
                                           что текст не найден
                            Возвращаемое   Игнорируется
                            значение


        edReplace           Info           Указывает на тип
                            Сообщение      TReplaceDialogRec
                                           Запрос пользователю об искомом
                                           тексте, тексте для замены и
                                           опциях поиска
                            Возвращаемое   cmCancel при отказе от поиска;
                            значение       в противном случае заполняет
                                           запись, на которую указывает
                                           Info


        edReplacePrompt     Info           Объект типа TPoint с
                                           глобальными координатами
                                           начала найденного текста
                            Сообщение      Запрос пользователю о замене
                                           текста
                            Возвращаемое   cmYes для замены текста и
                            значение       продолжения поиска; cmNo для
                                           отказа от замены, но
                                           продолжения поиска; cmCancel
                                           для отказа от замены и
                                           прекращения поиска
        -----------------------------------------------------------------

             См.  также:  константы   edXXXX,  переменную   EditorDialog,
        функцию DefEditorDialog, функцию StdEditorDialog.




         B.Pascal 7 & Objects/TV#2      - 170 -

         Объект TEditWindow                                     Editors
        -----------------------------------------------------------------

             Окно редактора представляет собой окно, разработанное специ-
        ально для хранения в нем объекта редактора, а именно или редакто-
        ра файла, или системного буфера. Окна редактора меняют свои заго-
        ловки,  чтобы показать, какой файл редактируется, и автоматически
        создают  полосы  прокрутки  и  индикатор для редактора. Если окну
        редактора не передать имени файла, то файл считается безымянным.


                                        Поле
        -----------------------------------------------------------------

             Editor
                  Editor: PFileEditor;

             Указывает на объект редактора, связанный с окном редактора.


                                       Методы
        -----------------------------------------------------------------

              Init
                  constructor Init (var Bounds: TRect;
                                 FileName: FNameStr; ANumber: Integer);

             Создает  объект  окна редактора, вызывая сначала конструктор
        Init,  унаследованный  от TWindow, для создания окна с границами,
        указанными  в  Bounds,  без  заголовка  и с номером, переданным в
        параметре  ANumber,  а затем создавая и вставляя горизонтальные и
        вертикальные  полосы  прокрутки и объект индикатора. В заключение
        Init создает объект редактора файла, передавая ему границы облас-
        ти внутри окна, полосы прокрутки, индикатор и имя файла, передан-
        ное в FileName.

             См. также: TWindow.Init, TFileEditor.Init


             Load
                  constructor Load (var S: TStream);

             Создает  и  загружает  окно  редактора  из потока S, вызывая
        сначала  конструктор  Load,  унаследованный  от  TWindow, а затем
        считывая поле редактора, введенное TEditWindow.

             См. также: TWindow.Load


             Close
                  procedure Close; virtual;

             Вызывает  метод  Close, унаследованный от TWindow, в случае,

         B.Pascal 7 & Objects/TV#2      - 171 -

        если  редактор  не  является  системным буфером, в случае чего он
        вызывает Hide, который прячет редактор системного буфера.

             См. также: TWindow.Close


             GetTitle
                  function GetTitle (MaxSize: Integer):
                                                     TTitleStr; virtual;

             Возвращает  имя  файла  в  редакторе или строку 'Clipboard',
        если редактируется системный буфер.


             HandleEvent
                  procedure HandleEvent (var Event: TEvent); virtual;

             Обрабатывает  события  окна редактора, вызывая сначала метод
        HandleEvent, унаследованный от TWindow, а затем обрабатывая сооб-
        щение  cmUpdateTitle, перерисовывая при этом рамку окна для изме-
        нения заголовка. Сообщение cmUpdateTitle возникает в тех случаях,
        когда имя файла изменяется в процессе его редактирования.

             См. также: TWindow.HandleEvent


             Store
                  procedure Store (var S: TStream);

             Записывает  объект  окна  редактирования  в поток S, вызывая
        сначала метод Store, унаследованный от TWindow, а затем записывая
        редактор в поток с помощью PutSubViewPtr.

             См. также: TWindow.Store, TGroup.PutSubViewPtr




         B.Pascal 7 & Objects/TV#2      - 172 -

         TEmsStream                                             Objects
        -----------------------------------------------------------------

             TEmsStream- это специализированный производный поток, реали-
        зующий  поток в расширенной памяти (EMS), порожденный от TStream.
        Дополнительные поля представляют идентификатор EMS, счетчик стра-
        ниц, размер потока и текущее положение. TEmsStream переопределяет
        6  абстрактных методов TStream, а также предоставляет специальные
        конструктор и деструктор.

             Примечание:  При отладке программы, использующей потоки EMS,
        интегрированная среда не может восстановить память EMS, распреде-
        ленную  Вашей программой в случае, если она преждевременно завер-
        шилась,  или  Вы  забыли  вызвать деструктор Done для потока EMS.
        Только  метод  Done  (или перезагрузка) могут освободить страницы
        EMS, принадлежавшие потоку.


                                        Поля
        -----------------------------------------------------------------

             Handle                                   (только для чтения)
                  Handle: Word;

             Идентификатор EMS для потока.


             PageCount                                (только для чтения)
                  PageCount: Word;

             Число выделенных для потока страниц, по 16К на страницу.


             Position                                 (только для чтения)
                  Position: Longint;

             Текущее положение внутри потока. Первая позиция - 0.


             Size                                      (только для чтения)
                  Size: Longint;

             Размер потока в байтах.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(MinSize, MaxSize: Longint);

             Создает  поток EMS с заданным минимальным размером в байтах.
        Вызывает  конструктор  Init,  унаследованный  от TStream, а затем

         B.Pascal 7 & Objects/TV#2      - 173 -

        устанавливает значения Handle, Size и PageCount. Вызывает Error с
        аргументом stInitError, если инициализация неудачна.

             Драйверы  EMS до версии 4.0 не поддерживают блоков расширен-
        ной памяти с изменяемыми размерами. С драйвером EMS до версии 4.0
        поток  EMS  не  может расширяться более первоначально выделенного
        размера. Для правильной поддержки как старых, так и новых драйве-
        ров  EMS, конструктор Init потока EMS берет два параметра, описы-
        вающие  минимальный  и  максимальный начальный размер выделенного
        блока  памяти  EMS.  Init всегда выделяет по крайней мере MinSize
        байт.

             - Если номер версии драйвера EMS больше или  равен  4.0,  то
        Init  выделяет только MinSize байт памяти EMS,  а затем расширяет
        блок,  как этого потребуют последующие  вызовы  TEmsStream.Write,
        игнорируя параметр MaxSize.

             - Если номер версии драйвера EMS меньше 4.0, то Init выделя-
        ет так много расширенной памяти,  как можно,  вплоть  до  MaxSize
        байт,  а  при  попытке  расширить блок с помощью TEmsStream.Write
        возвращает ошибку.


             Done
                  destructor Done; virtual;

             Переопределяемость: не переопределяется.

             Освобождает поток EMS и используемые EMS страницы.

             См. также: TEmsStream.Init


             GetPos
                  function GetPos: Longint; virtual;

             Переопределяемость: не переопределяется.

             Возвращает  значение  текущей позиции в потоке. Первая пози-
        ция- 0.

             См. также: TEmsStream.Seek


             GetSize
                  function GetSize: Longint; virtual;

             Переопределяемость: не переопределяется.

             Возвращает размер потока в байтах.


             Read

         B.Pascal 7 & Objects/TV#2      - 174 -

                  procedure Read(var Buf; Count: Word); virtual;

             Переопределяемость: не переопределяется.

             Читает  из  потока Count байт в буфер Buf, начиная с текущей
        позиции в потоке.

             См. также: TEmsStream.Write, stReadError


             Seek
                  procedure Seek(Pos: Longint); virtual;

             Переопределяемость: не переопределяется.

             Устанавливает  текущую  позицию в Pos байт от начала потока.
        Начало потока- 0.

             См. также: TEmsStream.GetPos, TEmsStream.GetSize


             Truncate
                  procedure Truncate; virtual;

             Переопределяемость: не переопределяется.

             Удаляет  все  данные из потока, начиная с текущей позиции до
        конца потока. Текущая позиция устанавливается равной новому концу
        потока.

             См. также: TDosStream.GetPos, TDosStream.Seek


             Write
                  procedure Write(var Buf; Count: Word); virtual;

             Переопределяемость: никогда не переопределяется.

             Записывает Count байт из буфера Buf в поток, начиная с теку-
        щей позиции.

             См. также: TStream.Read, TEmsStream.GetPos, TEmsStream.Seek




         B.Pascal 7 & Objects/TV#2      - 175 -

         Тип TEvent                                             Drivers
        -----------------------------------------------------------------

             Описание:  TEvent = record
                           What: Word;
                          case Word of
                            evNothing: ();
                            evMouse: (
                              Buttons: Byte;
                              Double: Boolean;
                              Where: TPoint);
                            evKeyDown: (
                              case Integer of
                                O: (KeyCode: Word);
                                1: (CharCode: Byte);
                            evMessage: (
                              Command: Word;
                              case Word of
                                0: (InfoPtr: Pointer);
                                1: (InfoLong: Longint);
                                2: (InfoWord: Word);
                                3: (InfoInt: Integer);
                                4: (InfoByte: Byte);
                                5: (InfoChar: Char);
                      end;

             Функция: Тип вариантной записи TEvent играет фундаментальную
        роль  в  стратегии  управления  событиями в Turbo Vision. Внешние
        события, такие  как  события  от  клавиатуры  и от "мыши" и собы-
        тия-команды, генерируемые взаимодействием отображаемых элементов,
        сохраняются и передаются в виде записей типа TEvent.

             См.  также: evXXXX, методы HandleEvent, GetKeyEvent,
        GetMouseEvent




         B.Pascal 7 & Objects/TV#2      - 176 -

         Объект TFileCollection                                 StdDlg
        -----------------------------------------------------------------

             TFileCollection  представляет  собой  отсортированный  набор
        записей типа TSearchRec. Диалоговые окна файлов используют объек-
        ты  TFileCollection для получения списков файлов, отсортированных
        в алфавитном порядке.

             Подробности  о полях TFileCollection и его методах приведены
        в оперативной подсказке.


         Объект TFileDialog                                     StdDlg
        -----------------------------------------------------------------

             TFileDialog  представляет  собой стандартное диалоговое окно
        ввода файлов.


                                        Поля
        -----------------------------------------------------------------

             Directory
                  Directory: PString;

             Directory указывает на строку, содержащую имя текущего ката-
        лога.


             FileList
                  FileList: PFileList;

             FileList  указывает  на  объект  списка  файлов в диалоговом
        окне.


             FileName
                  FileName: PFileInputLine;

             FileName  указывает  на  объект  строки  ввода имени файла в
        диалоговом окне.

             См. также: объект TFileInputLine


             WildCard
                  WildCard: TWildStr;

             WildCard хранит текущие диск, путь и имя файла.


                                       Методы
        -----------------------------------------------------------------

         B.Pascal 7 & Objects/TV#2      - 177 -


              Init
                  constructor Init (AWildCard: TWildStr;
                                      const ATitle, InputName: String;
                                      AOptions: Word; HistoryId: Byte);

             Создает  диалоговое  окно  файлов  с  заголовком, заданным в
        ATitle,  вызывая  конструктор  Init,  унаследованный  от TDialog.
        Инициализирует  поле WildCard значением AWildCard. Создает объект
        строки ввода файлов и присваивает его полю FileName, устанавливая
        начальное значение FileName равным WildCard. Создает объект метки
        с  использованием строки, переданной в InputName, и связывает его
        с FileName.

             Создает  объект списка файлов со связанной меткой 'Files', а
        также вертикальную полосу прокрутки.

             В  зависимости  от значений, переданных в битовых параметрах
        AOptions, Init конструирует и вставляет кнопки Ok, Open, Replace,
        Clear и Help. Существует также кнопка Cancel. Если AOptions вклю-
        чает fdNoLoadDir, то диалоговое окно не загружает в список файлов
        содержимое текущего каталога.  Используйте fdNoLoadDir в том слу-
        чае,  когда Вы хотите сохранить диалоговое окно в  потоке,  чтобы
        вместе  с  диалоговым  окном не записывать в поток все содержимое
        каталога.

             Объект панели информации о файлах конструируется и вставляе-
        тся в нижней части диалогового окна.

             См. также: TWindow.Init, константы fdXXXX


             Load
                  constructor Load (var S: TStream);

             Создает  и загружает объект TFileDialog из потока S, вызывая
        сначала  конструктор  Load,  унаследованный  от  TDialog, а затем
        считывая  поля,  введенные  TEditWindow,  и  информацию о текущем
        каталоге.

             См. также: TDialog.Load


             Done
                  destructor Done; virtual;

             Освобождает память от объекта диалогового окна файлов, осво-
        бождая сначала строку Directory, а затем вызывая деструктор Done,
        унаследованный от TDialog.


             GetData
                  function GetData (var: Rec); virtual;

         B.Pascal 7 & Objects/TV#2      - 178 -


             Считывает  строку  из  Rec, преобразует ее к типу PathStr, и
        расширяет ее до полного имени файла, вызывая GetFileName.

             См. также: TFileDialog.GetFileName


             GetFileName
                  procedure GetFileName (var S: PathStr); virtual;

             Расширяет  имя  выбранного в настоящий момент файла в полное
        имя,  включающее имя дисковода, путь и имя файла, и сохраняет его
        в S.


             HandleEvent
                  procedure HandleEvent (var Event: TEvent); virtual;

             Обрабатывает  большую  часть событий, вызывая метод HandleE-
        vent,  унаследованный  от  TDialog,  а  затем обрабатывая команды
        cmFileOpen,  cmFileReplace и cmFileClear вызовом EndModal с конс-
        тантой  команды в качестве параметра, возвращая тем самым команду
        отображаемому элементу, вызвавшему диалоговое окно файлов.

             См. также: TDialog.HandleEvent, TGroupEndModal


             SetData
                  procedure SetData (var Rec); virtual;

             Вызывает метод SetData, унаследованный от TDialog, для того,
        чтобы  обеспечить всем отображаемым элементам возможность считать
        данные  из  Rec,  а  после  этого в случае, если оставшиеся в Rec
        данные представляют собой имя файла, проверяет допустимость этого
        имени, вызывая Valid, и делая FileName выбранным подэлементом.

             См. также: TDialog.SetData


             Store
                  procedure Store (var S: TStream);

             Записывает объект диалогового окна файлов в поток S, вызывая
        сначала метод Store, унаследованный от TDialog, а затем записывая
        поля, введенные TFileDialog.

             См. также: TDialog.Store


             Valid
                  function Valid (Command: Word): Boolean; virtual;

             Возвращает  True  в  случае, если Command равно cmValid, что

         B.Pascal 7 & Objects/TV#2      - 179 -

        указывает  на успешное создание объекта. Для всех других значений
        Command,  Valid вызывает сначала функцию Valid, унаследованную от
        TDialog.  Если  TDialog.Valid возвращает True, то Valid проверяет
        текущую строку FileName на предмет допустимости имени файла. Если
        имя файла является допустимым, то Valid возвращает значение True;
        в  противном случае она выдает окно сообщений "Invalid file name"
        и возвращает False.

             См. также: TDialog.Valid




         B.Pascal 7 & Objects/TV#2      - 180 -

         TFileEditor                                            Editors
        -----------------------------------------------------------------

             Объект  редактора файлов представляет собой специализирован-
        ный  объект, унаследованный от TEditor, и предназначен для редак-
        тирования содержимого текстового файла.


                                        Поле
        -----------------------------------------------------------------

             FileName: FNameStr;

             FileName представляет собой имя редактируемого файла.


                                       Методы
        -----------------------------------------------------------------

              Init
                  constructor Init (var Bounds: TRect;
                                 AHScrollBar, AVScrollBar: PScrollBar;
                                 AIndicator: PIndicator;
                                 AFileName: FNameStr);

             Создает  объект редактора, вызывая сначала конструктор Init,
        унаследованный  от TEditor, передавая параметры Bounds, AHScroll-
        Bar,  AVScrollBar и AIndicator с размером буфера, равным 0, после
        чего  расширяет AFileName до полного имени файла и загружает файл
        с помощью LoadFile.

             См. также: TEditor.Init, TFileEditor.LoadFile


             Load
                  constructor Load (var S: TStream);

             Создает  и  загружает  объект  редактора файлов из потока S,
        вызывая  сначала  конструктор  Load, унаследованный от TEditor, а
        затем  считывая имя файла. Если имя файла является допустимым, то
        Load загружает файл в буфер с помощью LoadFile.

             См. также: TEditor.Load


             DoneBuffer
                  destructor DoneBuffer; virtual;

             Если    буфер  не   равен  nil,   то  DoneBuffer    вызывает
        DisposeBuffer для освобождения буфера.

             См. также: процедуру DisposeBuffer


         B.Pascal 7 & Objects/TV#2      - 181 -


             HandleEvent
                  procedure HandleEvent (var Event: TEvent); virtual;

             Обрабатывает  события  для редактора файлов, вызывая сначала
        метод HandleEvent, унаследованный от TEditor, а затем обрабатывая
        события команд для сохранения редактируемого файла.

             См. также: TEditor.HandleEvent


             InitBuffer
                  procedure InitBuffer; virtual;

             Выделяет  в динамически распределяемой памяти буфер для фай-
        ла, вызывая NewBuffer.

             См. также: процедуру NewBuffer


             LoadFile
                  function LoadFile: Boolean;

             Возвращает True в случае, если файл не существует (это озна-
        чает,  что  пользователь  редактирует  новый файл) или он успешно
        загружен; в противном случае возвращает False. Считывает текст из
        файла  с  именем  FileName  в  буфер редактирования, устанавливая
        длину буфера равной размеру прочитанного файла.


             Save
                  function Save: Boolean;

             Сохраняет  содержимое буфера редактирования на диск, вызывая
        SaveAs  в  случае,  если  файл не имеет имени, или SaveFile, если
        файл уже имеет имя.

             См. также: TFileEditor.Save, TFileEditor.SaveFile


             SaveAs
                  function SaveAs: Boolean

             Вызывает EditorDialog доля вызова диалогового окна получения
        имени  файла для редактируемого текста. Если пользователь не зак-
        роет  диалоговое  окно,  то  SaveAs изменит заголовок диалогового
        окна, чтобы он отражал новое имя файла, а затем вызывает SaveFile
        для  сохранения  содержимого  буфера. SaveAs возвращает значение,
        возвращенное SaveFile.

             См. также: процедуру EditorDialog, TFileEditor.SaveFile



         B.Pascal 7 & Objects/TV#2      - 182 -

             SaveFile
                  function SaveFile: Boolean;

             Если  EditorFlag  содержит  бит  efBackupFiles,  то SaveFile
        переименовывает  первоначальный  файл  в  файл  с тем же именем и
        расширением.BAK.  Записывает  содержимое  буфера редактирования в
        файл  с  именем  FileName и устанавливает значение флага Modified
        равным  False.  Возвращает  True в случае, если сохранение прошло
        удачно, в противном случае возвращает False после выдачи соответ-
        ствующего диалогового окна, объясняющего причину неудачи.


             SetBufSize
                  function SetBufSize (NewSize: Word): Boolean; virtual;

             Увеличивает  или  уменьшает  размер буфера редактирования на
        величину, кратную 4K, при необходимости настраивая GapLen.


             Store
                  procedure Store (var S: TStream);

             Записывает объект редактора в поток S, вызывая сначала метод
        Store,  унаследованный  от TEditor, а затем записывая имя файла и
        выбранные смещения текста.


             UpdateCommands
                  procedure UpdateCommands; virtual;

             Вызывает  метод UpdateCommands, унаследованный от TEditor, а
        затем  делает  доступными  команды cmSave и cmSaveAs, относящиеся
        только к редактору фалов.


             Valid
                  function Valid (Command: Word): Boolean; virtual;

             Если  cmCommand  равно  cmValid,  то  возвращается  значение
        IsValid,  которое  равно False лишь  в том случае,  если редактор
        файлов  не   смог  создать  буфер  или  считать файл. В противном
        случае Valid проверяет  значение   поля  Modified  для   проверки
        того,  нужно  ли  сохранить   измененный   файл  перед  закрытием
        буфера. Если значение Modified   равно  True,  то  Valid вызывает
        диалоговое  окно,  дающее  пользователю   возможность   сохранить
        изменения. Если пользователь закрывает диалоговое окно,  то Valid
        возвращает False,  оставляя редактор открытым; в противном случае
        буфер либо сохраняется,  либо его содержимое теряется,  в зависи-
        мости от выбора пользователя, и Valid возвращает True.




         B.Pascal 7 & Objects/TV#2      - 183 -

         TFileInfoPane                                          StdDlg
        -----------------------------------------------------------------

             TFileInfoPane  представляет  панель  с  информацией о файле,
        отображаемый элемент, отражающий информацию о выбранном в настоя-
        щий момент файле в списке файлов TFileDialog.

             Подробности  о полях TFileInfoPane и его методах приведены в
        оперативной подсказке.


         TFileInputLine                                         StdDlg
        -----------------------------------------------------------------

             TFileInputLine  представляет собой специальную строку ввода,
        используемую  TFileDialog,  которая  обновляет  свое содержимое в
        ответ  на  команду  cmFileFocused от TFileList. Строки ввода имен
        файлов  позволяют редактировать имена файлов, которые могут вклю-
        чать пути и метасимволы.

             Подробности о полях TFileInputLine и его методах приведены в
        оперативной подсказке.


         TFileList                                              StdDlg
        -----------------------------------------------------------------

             TFileList  представляет  собой  отсортированное окно-список,
        которое  предполагает,  что  оно   содержит  в  качестве   набора
        TFileCollection.  При  выборе  имени  файла  объект  списка файла
        выдает  сообщение   cmFileFocused,   которое   извещает   объекты
        TFileInputLine и TFileInfoPane о том, что им необходимо  обновить
        свое  содержимое  в  соответствии  с  вновь  выбранным файлом. По
        умолчанию список файлов является   окном-списком в две колонки  с
        необязательной горизонтальной полосой прокрутки под ним.

             Подробности  о  полях  TFileList  и  его методах приведены в
        оперативной подсказке.


         TFilterValidator                                       Validate
        -----------------------------------------------------------------

             Объект фильтра определителя допустимости осуществляет прове-
        рку  вводимой  пользователем информации. Фильтр проверки содержит
        набор  допустимых  символов.  Если  пользователь печатает один из
        допустимых символов, то фильтр проверки допустимости указывает на
        то,  что  символ  является  допустимым.  Если пользователь вводит
        любой другой символ, то фильтр указывает на недопустимость ввода.


                                        Поле
        -----------------------------------------------------------------

         B.Pascal 7 & Objects/TV#2      - 184 -


             ValidChars
                  ValidChars: TCharSet;

             Содержит  набор  всех  символов,  которые пользователь может
        печатать.  Например,  для разрешения ввода только цифр необходимо
        установить ValidChars равным ['0'..'9']. ValidChars устанавливае-
        тся  равным  параметру  AValidChars,  передаваемому  конструктору
        Init.


                                       Методы
        -----------------------------------------------------------------

              Init
                  constructor Init (AValidChars: TCharSet);

             Создает  объект  фильтра  определителя  допустимости  ввода,
        вызывая сначала конструктор Init, унаследованный от TValidator, а
        затем устанавливая ValidChars равным AValidChars.


             Load
                  constructor Load (var S: TStream);

             Создает и загружает объект фильтра определителя допустимости
        ввода из потока S, вызывая сначала конструктор Load, унаследован-
        ный  от TValidator, а затем считывая набор допустимых символов из
        ValidChars.

             См. также: TValidator.Load


             Error
                  procedure Error; virtual;

             Выдает  окно  сообщений,  уведомляющее  о том, что текстовая
        строка содержит недопустимый символ.


             IsValid
                  function IsValid (const S: string): Boolean; virtual;

             Возвращает  True в случае, если все символы в S содержатся в
        списке  допустимых символов ValidChar; в противном случае возвра-
        щает False.


             IsValidInput
                  function IsValidInput (var S: string;
                            SuppressFill: Boolean): Boolean; virtual;

             Проверяет каждый символ в строке S на предмет его нахождения

         B.Pascal 7 & Objects/TV#2      - 185 -

        в списке допустимых символов ValidChar. Возвращает True в случае,
        если  все  символы  из S являются допустимыми; в противном случае
        возвращает False.

             Store
                  procedure Store (var S: TStream);

             Сохраняет  объект  фильтра определителя допустимости ввода в
        потоке S, записывая ValidChars.




         B.Pascal 7 & Objects/TV#2      - 186 -

         Тип TFindDialogRec                                     Editors
        -----------------------------------------------------------------

             Описание
                  TFindDialogRec = record
                       Find: String [80];
                       Options: Word;
                  end;

             Функция:   Диалоговые   окна   поиска   текста,   вызываемые
        EditorDialog  при   передаче edFind, получают в  качестве второго
        параметра  указатель   на  TFindDialogRec.  Find  содержит строку
        поиска,  заданную   по  умолчанию.  Options  содержит   некоторые
        комбинации констант  флагов   редактора   efXXXX, описывающих то,
        как должен приводиться поиск.

             См. также: тип TEditorDialog


         TFrame                                                   Views
        -----------------------------------------------------------------

             TFrame  предоставляет различные рамки вокруг окон и диалого-
        вых  окон.  Вероятно, что пользователи никогда не будут использо-
        вать  объекты рамок непосредственно, т.к. они добавляются к окнам
        по умолчанию.

                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect);

             Вызывает  конструктор Init, унаследованный от TView, а затем
        устанавливает GrowMode равным gfGrowHiX + gfGrowHiY,  а EventMask
        равным EventMask or evBroadcast,  так, чтобы объекты TFrame обра-
        батывали сообщения-уведомления по умолчанию.

             См. также: TView.Init


             Draw
                  procedure Draw; virtual;

             Переопределяемость: используется редко.

             Рисует рамку с цветовыми атрибутами и пиктограммами, соотве-
        тствующими текущим значениям флагов State (активный, неактивный и
        перемещаемый).  Добавляет  пиктограммы  распахивания,  закрытия и
        изменения размера в зависимости от значений Flags окна-владельца.
        Добавляет  заголовок  из поля Title окна-владельца,  если таковое
        существует.  Активные окна рисуются с двойной рамкой и пиктограм-
        мами, а неактивные окна с одинарной рамкой и без пиктограмм.

         B.Pascal 7 & Objects/TV#2      - 187 -


             См. также: константы флагов состояния sfXXXX, константы фла-
        гов окна wfXХXX


             GetPalette
                  function GetPalette: Palette; virtual;

             Переопределяемость: используется редко.

             Возвращает  указатель  на  палитру  рамки,  установленную по
        умолчанию, CFrame.


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: переопределяется редко.

             Обрабатывает большую    часть    событий,    вызывая   метод
        HandleEvent,  унаследованный от TView, а затем специально обраба-
        тывает  события "мыши".  Если закрывающая пиктограмма выбрана при
        помощи "мыши", то TFrame генерирует событие cmClose. Перещелкива-
        ние  на  пиктограмме распахивания окна или двойное перещелкивание
        на верхней линии рамки генерирует событие cmZoom. При перемещении
        окна за верхнюю строку рамки окно перемещается, а при перемещение
        за пиктограмму изменения размера перемещается правый нижний  угол
        рамки, и соответственно, ее размеры изменяются.

             См. также: TView.HandleEvent


             SetState
                  procedure SetState (AState: Word;
                                           Enable: Boolean); virtual;

             Переопределяемость: переопределяется редко.

             Вызывает TView.SetState,  затем,  если  новое  состояние   -
        sfActive  или  sfDragging,  то  вызывает DrawView для перерисовки
        отображаемого элемента.

             См. также: TView.SetState


                                      Палитра
        -----------------------------------------------------------------

             Объекты рамок используют палитру, определенную по умолчанию,
        CFrame,  для  отображения в нее первых трех элементов стандартной
        палитры окна.



         B.Pascal 7 & Objects/TV#2      - 188 -

                       1   2   3   4   5
                     ╔═══╤═══╤═══╤═══╤═══╗
           CFrame    ║  1│  1│ 1 │ 2 │ 3 ║
                     ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
                       │   │   │   │   │
           Пассивная ──┘   │   │   │   └────── Пиктограммы
           рамка           │   │   │
           Пассивный ──────┘   │   └────────── Активный заголовок
           заголовок           │
           Активная  ──────────┘
           рамка




         B.Pascal 7 & Objects/TV#2      - 189 -

─────────────────────────────────────────────────────────────────────────
         TGroup                                                   Views
        -----------------------------------------------------------------

             Объекты  TGroup  и порожденные ими (которые мы для краткости
        называем  группами)  являются  основной  управляющей  силой Turbo
        Vision.  Группа  представляет собой специальные тип отображаемого
        элемента.  В  дополнение  ко всем полям и методам, порожденным от
        TView,  группа  имеет  добавочные  поля  и методы (включая многие
        переопределения),  позволяющие  управлять  динамически связанными
        списками  отображаемых элементов (включая другие группы) как если
        бы они были одним объектом. Мы часто говорим о подэлементах груп-
        пы, даже если эти подэлементы сами являются группами.

             Хотя  группа  имеет  прямоугольную  границу от своего предка
        TView, группа видима только посредством отображения своих подэле-
        ментов. Группа отображает себя через методы Draw своих подэлемен-
        тов.  Группа  владеет  своими  подэлементами, и вместе они должны
        обеспечивать  зарисовку (заполнение) всего прямоугольника группы,
        определенного  в  Bounds.  Во  время работы программы подэлементы
        создаются,  вставляются в группы и отображаются в результате дея-
        тельности  пользователя и событий, генерируемых программой. Подэ-
        лементы могут быть легко скрыты, а также удалены из группы дейст-
        виями пользователя (такими, как закрытие окна или выход из диало-
        гового окна).

             Три  порожденных  от TGroup типа объектов, а именно TWindow,
        TDeskTop и TApplication (посредством TProgram) иллюстрируют  кон-
        цепцию группы и подгруппы.  TApplication обычно владеет объектами
        оперативной области  TDeskTop,  строки  состояния  TStatusLine  и
        отображаемого  элемента  меню  TMenuView.  TDeskTop  порожден  от
        TGroup и таким образом,  может владеть объектами TWindow, которые
        в свою очередь владеют объектами TFrame, TScrollBar и т.д.

             Объекты  TGroup передают рисование и обработку событий своим
        подэлементам, как это объясняется в Главе 8 "Отображаемые элемен-
        ты" и 9 "Программирование, обусловленное событиями".

             Многие  из  основных методов TView переопределяются в TGroup
        естественным  образом.  Например,  сохранение  и чтение группы из
        потока   может  быть  достигнуто  одним  вызовом  TGroup.Store  и
        TGroup.Load,   которые   в  свою  очередь  итеративно сохраняют и
        загружают подэлементы группы.

             Объекты TGroup обычно не имеют экземпляров; Вы будете созда-
        вать    экземпляры  типов   объектов,  порожденных   от   TGroup:
        TApplication, TDeskTop и TWindow.


                                        Поля
        -----------------------------------------------------------------

             Buffer                                   (только для чтения)
                  Buffer: PVideoBuf;

         B.Pascal 7 & Objects/TV#2      - 190 -


             Указывает  на  буфер,  используемый  для  кэширования образа
        экрана  группы,  или  равен nil, если группа не имеет кэш-буфера.
        Кэш-буфера  создаются  и  уничтожаются  автоматически,  если флаг
        ofBuffered в поле Options не сброшен.

             См. также: TGroup.Draw, TGroup.Lock, TGroup.Unlock


             Current                                   (только для чтения)
                  Current: PView;

             Указывает  на  выбранный  в  настоящий момент подэлемент или
        равен nil, если нет выбранного отображаемого подэлемента.

             См. также: sfSelected, TView.Select


             Last                                     (только для чтения)
                  Last : PView;

             Указывает  на  последний подэлемент группы (самый дальний от
        вершины  в циклическом порядке). Поле Next последнего подэлемента
        указывает  на  первый подэлемент, поле Next которого указывает на
        следующий подэлемент и т.д., формируя циклический список.


             Phase                                    (только для чтения)
                  Phase: (phFocused, phPreProcess, phPostProcess);

             Текущая фаза обработки для активного события. Подэлементы, в
        которых  установлены флаги ofPreProcess и/или ofPostProcess могут
        проверять  значение  Owner^.Phase,  чтобы  определить, в какой из
        фаз:  phPreProcess,  phFocused  или  phPostProcess  был вызван их
        HandleEvent.

             См. также: ofPreProcess, ofPostProcess, TGroup.HandleEvent


                                       Методы
        -----------------------------------------------------------------

             Метод Init
                  constructor Init(var Bounds: TRect);

             Создает объект группы с заданными границами, вызывая сначала
        метод  Init,  унаследованный  от  TView,  а  затем устанавливая в
        Options   флаги   ofSelectable   и  ofBuffered,  и  устанавливает
        EventMask равным $FFFF.

             См. также: TView.Init, TGroup.Load



         B.Pascal 7 & Objects/TV#2      - 191 -

             Load
                  constructor Load(var S: TStream);

             Загружает  всю группу из потока, вызывая сначала метод Load,
        унаследованный  от TView, а затем используя S.Get для чтения каж-
        дого  подэлемента.  После  загрузки  всех  подэлементов выполняет
        проход  по подэлементам для установки всех считанных указателей с
        использованием GetPeerViewPtr.

             Если  тип  объекта,  порожденного  от TGroup, содержит поля,
        которые  указывают  на  подэлементы,  то для чтения этих полей он
        должен использовать GetSubViewPtr внутри Load.

             Если  указатель  на  владельца  равен nil, то после загрузки
        всех подэлементов загружается Awaken.

             См. также:  TView.Load, TGroup.Store,  TGroup.GetSubViewPtr,
        TStream.Get


             Done
                  destructor Done; virtual;

             Переопределяемость: часто переопределяется.

             Скрывает  группу,  используя  метод Hide, освобождает каждый
        элемент  группы, и наконец вызывает деструктор Done, унаследован-
        ный от TView.

             См. также: TView.Done


             Awaken
                  procedure Awaken; virtual;

             Вызывает  методы Awaken для каждого из подэлементов группы в
        циклическом порядке.

             См. также: TView.Awaken


             ChangeBounds
                  procedure ChangeBounds(var Bounds: Trect); virtual;

             Переопределяемость: не переопределяется.

             Изменяет  границы группы в соответствии со значением Bounds,
        а  затем  вызывает CalcBounds и ChangeBounds для каждого элемента
        группы.

             См. также: TView.CalcBounds, TView.ChangeBounds



         B.Pascal 7 & Objects/TV#2      - 192 -

             DataSize
                  function DataSize: Word; virtual;

             Переопределяемость: переопределяется редко.

             Возвращает  общий  размер   группы,  вызывая  и   накапливая
        DataSize для каждого подэлемента.

             См. также: TView.DataSize


             Delete
                  procedure Delete(P: PView);

             Удаляет подэлемент P из группы и перерисовывает другие подэ-
        лементы, если это необходимо. Поля Owner и Next в Р устанавливаю-
        тся  равными nil. Delete, однако, не освобождает память, выделен-
        ную под P.

             См. также: TGroup.Insert


             Draw
                  procedure Draw; virtual;

             Переопределяемость: не переопределяется.

             Если  кэш-буфер существует, то он выводится на экран с испо-
        льзованием WriteBuf. В противном случае вызывает Redraw для рисо-
        вания каждого подэлемента группы.

             См. также: TGroup.Buffer, TGroup.Redraw


             EndModal
                  procedure EndModal(Command: Word); virtual;

             Переопределяемость: никогда не переопределяется.

             Если группа - это текущий режимный отображаемый элемент,  то
        его режимное состояние завершается. Command передается в ExecView
        (который сделал данный отображаемый элемент режимным),  который в
        свою  очередь возвращает Command в качестве результата.  Если эта
        группа не является текущим режимный отображаемый элемент,  то она
        вызывает метод EndModal, унаследованный от TView.

             См. также: TGroup.ExecView, TGroup.Execute


             EventError
                  procedure EventError(var Event: TEvent); virtual;

             Переопределяемость: иногда переопределяется.

         B.Pascal 7 & Objects/TV#2      - 193 -


             EventError  вызывается каждый раз, когда в цикле обработчика
        событий  встречается  событие,  которое  он  не может обработать.
        Действие  по  умолчанию:  Если  Owner  группы  не  равен  nil, то
        EventError  вызывает  EventError   своего  владельца. Обычно  эта
        цепочка  возвращается  назад  к  EventError  из  TApplication. Вы
        можете переопределить EventErrоr, для выполнения требуемого дейс-
        твия.

             См. также: TGroup.Execute, TGroup.ExecView, sfModal


             ExecView
                  function ExecView(P: PView): Word;

             ExecView представляет  собой режимный вариант нережимных ме-
        тодов Insert и Delete. В отличие от Insert, после вставки отобра-
        жаемого  элемента  в  группу ExecView ожидает,  пока отображаемый
        элемент будет выполнен,  а затем удаляет его и возвращает резуль-
        тат выполнения. ExecView используется в ряде мест в Turbo Vision,
        например      для       реализации       TApplication.Run       и
        TProgram.ExecuteDialog.

             ExecView  сохраняет текущий контекст (выбранный отображаемый
        элемент, режимный отображаемый элемент и набор команд),  делает Р
        режимным, вызывая Р^.SetState(sfModal, True), вставляет Р в груп-
        пу (если  он  еще  не  вставлен)  и  вызывает  P^.Execute.  Когда
        P^.Execute возвращает управление, группа восстанавливается в пре-
        дыдущее состояние и результат P^.Execute возвращается как резуль-
        тат вызова ExecView.  Если P равно nil,  то ExecView возвращается
        значение cmCancel.

             См. также: TGroup.Execute, sfModal


             Execute
                  function Execute: Word; virtual;

             Переопределяемость: используется редко.

             Execute  представляет  собой основной цикл обработки событий
        группы.  Она  постоянно  получает  события, используя GetEvent, и
        обрабатывает  их, используя HandleEvent. Цикл событий завершается
        группой  или подэлементом с помощью вызова EndModal. Перед завер-
        шением работы, однако, Exec вызывает Valid для проверки того, что
        режимное состояние в самом деле может быть завершено.

             Реализация   TGroup.Execute  показана  ниже.  Заметим,   что
        EndState-    это    поле    типа    private  в   TGroup,  которое
        устанавливается вызовом EndModal.

                 function TGroup.Execute: Word;
                 var

         B.Pascal 7 & Objects/TV#2      - 194 -

                   E: TEvent;
                 begin
                   repeat
                     EndState := 0;
                     repeat
                       GetEvent(E);
                       HandleEvent(E);
                       if E.What <> evNothing then EventError(E);
                     until EndState <> 0;
                   until Valid(EndState);
                   Execute := EndState;
                 end;

             См. также:        TGroup.GetEvent,       TGroup.HandleEvent,
        TGroup.EndModal, TGroup.Valid


             First
                  function First: PView;

             Возвращает  указатель на первый подэлемент группы (ближайший
        к  вершине  в  циклическом  порядке),  или nil, если в группе нет
        подэлементов.

             См. также: TGroup.Last


             FirstThat
                  function FirstThat(P: Pointer): PView;

             FirstThat  применяет  булеву функцию, заданную указателем на
        функцию  P,  к  каждому  подэлементу в циклическом порядке до тех
        пор, пока P не вернет True.  Результат - указатель на подэлемент,
        для которого P возвращает True, или nil, если функция P возвраща-
        ет  False для всех подэлементов.  P должен указывать на локальную
        функцию типа far, использующую параметр типа Pointer, и возвраща-
        ющую значение типа Boolean. Например:

                 function MyTestFunc(P: PView): Boolean; far;

              Метод  SubViewAt,  показанный ниже, возвращает указатель на
        первый подэлемент, содержащий данную точку.

                 function TMyGroup.SubViewAt(Where: TPoint): PView;

                   function ContainsPoint(P: PView): Boolean; far;
                   var
                     Bounds: TRect;
                   begin
                     P^.GetBounds(Bounds);
                     ContainsPoint := (P^.State and sfVisible <> 0) and
                       Bounds.Contains(Where);
                   end;

         B.Pascal 7 & Objects/TV#2      - 195 -


                 begin
                   SubViewAt := FirstThat(@ContainsPoint);
                 end;

             См. также: TGroup.ForEach


             FocusNext
                  function FocusNext (Forwards: Boolean): Boolean;

             Если  Forwards равно True, то FocusNext передает фокус ввода
        следующему подэлементу, который можно выбрать (у которого устано-
        влен  бит  ofSelectable),  в  циклическом  порядке. Если Forwards
        равно  False,  то  метод  передает фокус предыдущему подэлементу,
        который  может  быть  выбран.  В случае успеха возвращает True; в
        противном случае возвращает False.

             Если  у отображаемого элемента установлен бит ofValidate, то
        она  вызывает  Valid (cmReleaseFocus) для определения того, может
        ли  фокус  быть отобран. Если Valid возвращает значение False, то
        отображаемый  элемент оставляет фокус у себя, и FocusNext возвра-
        щает False.

             См. также: TView.Focus


             ForEach
                  procedure ForEach (P: Pointer);

             ForEach применяет действие, заданное указателем на процедуру
        P, к каждому подэлементу группы в циклическом порядке. Параметр P
        должен  указывать  на локальную процедуру типа far, имеющую пара-
        метр типа Pointer, например:

                 procedure MyActionProc(P: PView); far;

             Метод  MoveSubViews  перемещает  все  подэлементы  группы на
        величину,  заданную  в  Delta. Обратите внимание на использование
        Lock и UnLock для ограничения числа выполняемых операций по пере-
        рисовке для предотвращения неприятного мерцания.

                 procedure TMyGroup.MoveSubViews(Delta: TPoint);

                 procedure DoMoveView(P: PView); far;
                 begin
                 P^.MoveTo(P^.Origin.X + Delta.X, P^.Origin.Y + Delta.Y);
                 end;

                 begin
                   Lock;
                   ForEach(@DoMoveView);
                   UnLock;

         B.Pascal 7 & Objects/TV#2      - 196 -

                 end;

             См. также: TGroup.FirstThat


            GetData
                  procedure GetData(var Rec); virtual;

             Переопределяемость: используется редко.

             Вызывает GetData для каждого подэлемента в обратном цикличе-
        ском,  увеличивая положение, заданное в Rec, на DataSize для каж-
        дого подэлемента.

             См. также: TView.GetData, TGroup.SetData


             GetHelpCtx
                  function GetHelpCtx: Word; virtual;

             Переопределяемость: переопределяется редко.

             Возвращает  контекст  подсказки  для  выбранного в настоящий
        момент  отображаемого элемента, вызывая метод GetHelpCtx выделен-
        ного подэлемента. Если ни один из отображаемых элементов не имеет
        контекста  подсказки, то GetHelpCtx возвращает значение собствен-
        ного поля HelpCtx.


             GetSubViewPtr
                  procedure GetSubViewPtr(var S: TStream; var P);

             Загружает указатель   на   подэлемент   Р   из   потока   S.
        GetSubViewPtr должна использоваться  только  внутри  конструктора
        Load, для чтения значений указателей, которые были записаны вызо-
        вом PutSubViewPtr из метода Store.

             См. также: TView.PutSubViewPtr, TGroup.Load, TGroup.Store


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: часто используется.

             Группа    обрабатывает    события,  передавая   их   методам
        HandleEvent одного или более подэлементов. Однако  действительный
        маршрут зависит от класса события:

             - для активных событий (по умолчанию evKeyDown и  evCommand,
        см. переменную FocusedEvents) обработка событий выполняется в три
        фазы:


         B.Pascal 7 & Objects/TV#2      - 197 -

                - предварительная обработка. Поле Phase группы устанавли-
                  вается равным phPreProcess,  и событие передается мето-
                  дам HandleEvent всех подэлементов, у которых установлен
                  флаг ofPreProcess;

                - основная   обработка.   Phase   устанавливается  равным
                  phFocused,  и событие передается HandleEvent отображае-
                  мого элемента, выбранного в настоящий момент;

                - фаза  после  обработки.  Phase  устанавливается  равным
                  phPostProcess, и событие передается методам HandleEvent
                  всех   подэлементов,   для   которых   установлен  флаг
                  ofPostProcess;

             - для позиционированных событий (по умолчанию  evMouse,  см.
        переменную  PositionalEvents),  событие  передается в HandleEvent
        первого подэлемента (в циклическом порядке),  ограничивающий пря-
        моугольник которого содержит точку в Event.Where.

             Для  событий-уведомлений (т.е. не активных и не позициониро-
        ванных), событие передается методу HandleEvent каждого подэлемен-
        та группы в циклическом порядке.

             Примечание:  Если поле EventMask подэлемента маскирует класс
        события,  то TGroup.HandleEvent никогда не будет посылать события
        этого  класса  подэлементу.  Например,  по умолчанию EventMask из
        TView  запрещает  evMouseUp,  evMouseMove  и evMouseAuto, поэтому
        TGroup.HandleEvent  никогда не будет посылать такие события стан-
        дартному TView.

             См. также:  FocusedEvents, PositionalEvents, константы собы-
        тий evXXXX, методы TView.EventMask, HandleEvent


             Insert
                  procedure Insert(P: PView);

             Вставляет  отображаемый  элемент,  заданный  указателем Р, в
        список  подэлементов  группы.  Новый  подэлемент помещается перед
        всеми  другими  отображаемыми  подэлементами.  Если в подэлементе
        установлены  флаги  ofCenterX или ofCenterY, то он центрируется в
        группе  по  соответствующей  оси. Если отображаемый элемент имеет
        установленный  флаг  sfVisible,  то  он будет показан в группе; в
        противном  случае он остается невидимым до тех пор, пока не будет
        показан специально. Если отображаемый элемент имеет установленным
        флаг  ofSelectable, то он становится текущим выбранным подэлемен-
        том.

             См. также: TGroup.Delete, TGroup.ExecView


             InsertBefore
                  procedure InsertBefore(P, Target: PView);

         B.Pascal 7 & Objects/TV#2      - 198 -


             Вставляет  отображаемый элемент Р перед отображаемым элемен-
        том,  заданным Target. Если Target имеет значение nil, то отобра-
        жаемый элемент размещается после всех других отображаемых элемен-
        тов группы.

             См. также: TGroup.Insert, TGroup.Delete


             Lock
                  procedure Lock;

             Блокирует  группу, задерживая все записи, производимые подэ-
        лементами на экран до тех пор, пока группа не будет разблокирова-
        на.  Lock не имеет действия, если группа не имеет кэш-буфера (см.
        ofBuffered  и  TGroup.Buffer).  Lock работает, увеличивая счетчик
        блокировок,  который соответственно уменьшается с помощью UnLock.
        Когда  вызов UnLock уменьшает счетчик до 0, вся группа пишется на
        экран, используя образ, созданный в кэш-буфере.

             Накапливая частые операции перерисовки между вызовами Lock и
        UnLock,  можно  сократить или полностью избавиться от неприятного
        мерцания экрана. Например, TDeskTop.Tile и TDeskTop.Cascade испо-
        льзуют Lock и UnLock для уменьшения мерцания.

             Примечание:  Количества  вызовов  Lock  и UnLock должны быть
        равны,  иначе  группа  может остаться в постоянно заблокированном
        состоянии,  что  приведет к тому, что она не сможет быть выведена
        на экран, когда это понадобится.

             См. также: TGroup.Unlock


             PutSubViewPtr
                  procedure PutSubViewPtr(var S: TStream; P: PView);

             Сохраняет указатель   подэлемента   Р   в  потоке  S.  Метод
        PutSubViewPtr должен использоваться только  внутри  метода  Store
        для записи значений указателей,  которые позже будут читаться вы-
        зовами GetSubViewPtr в конструкторе Load.

             См. также: TGroup.GetSubViewPtr, TGroup.Store, TGroup.Load


             Redraw
                  procedure Redraw;

             Перерисовывает  подэлементы  группы  в  циклическом порядке.
        TGroup.Redraw  отличается  от  TGroup.Draw  тем,  что перерисовка
        никогда не производится выводом из кэш-буфера.

             См. также: TGroup.Draw


         B.Pascal 7 & Objects/TV#2      - 199 -


             SelectNext
                  procedure SelectNext(Forwards: Boolean);

             Если  Forwards равно True, то SelectNext будет выбирать (де-
        лать  текущим)  следующий  выбираемый  подэлемент  (подэлемент, у
        которого установлен бит ofSelectable) группы в циклическом поряд-
        ке. Если Forwards равно False, то метод выбирает предыдущий выби-
        раемый подэлемент.

             Внимание!  SelectNext игнорирует допустимость и всегда выби-
        рает следующий подэлемент. При необходимости контролировать допу-
        стимость выбора при изменении фокуса, вместо SelectNext необходи-
        мо использовать FocusNext.

             См.    также:    константы    флагов    параметров   ofXXXX,
        TView.FocusNext


             SetData
                  procedure  SetData(var Rec); virtual;

             Переопределяемость: используется редко.

             Вызывает SetData для каждого подэлемента в обратном цикличе-
        ском  порядке,  увеличивая положение, заданное в Rec из DataSize,
        для каждого подэлемента.

             См. также: TGroup.GetData, TView.SetData


             SetState
                  procedure SetState(AState: Word;
                                           Enable: Boolean); virtual;

             Переопределяемость: переопределяется редко.

             Сначала  вызывает  метод  TView,  унаследованный от State, а
        затем обновляет подэлементы следующим образом:

             - если  AState  имеет  значение  sfActive,   sfExposed   или
        sfDragging, то для каждого подэлемента для его обновления вызыва-
        ется SetState;

             - если AState имеет значение  sfFocused,  то  для  установки
        флага  sfFocused  вызывается  SetState для выбранного в настоящий
        момент подэлемента.

             См. также: TView.SetState


             Store
                  procedure Store(var S: TStream);

         B.Pascal 7 & Objects/TV#2      - 200 -


             Сохраняет  всю группу в потоке, сначала вызывая метод Store,
        унаследованный от TView, а затем используя TStream.Put для вывода
        каждого подэлемента.

             Если  тип  объекта,  порожденный  от  TGroup, содержит поля,
        которые  указывают  на  подэлементы,  то для записи этих полей он
        должен использовать PutSubViewPtr внутри его метода Store.

             См. также: TView.Store, TGroup.PutSubViewPtr, TGroup.Load


             Unlock
                  procedure Unlock;

             Разблокирует  группу, уменьшая значение счетчика блокировок.
        Если  счетчик блокировки становится равным 0, то вся группа выво-
        дится на экран, используя образ, созданный в кэш-буфере.

             См. также: TGroup.Lock


             Valid
                  function Valid(Command: Word): Boolean; virtual;

             Вызывает  метод  Valid для каждого подэлемента в циклическом
        порядке  и возвращает True в случае, если вызовы Valid всех подэ-
        лементов  возвращают  True;  в противном случае возвращает False.
        TGroup.Valid  используется  в  конце  цикла  обработки  событий в
        TGroup.Execute   для   подтверждения    того,   что    завершение
        разрешено. Режимное состояние не может быть завершено до тех пор,
        пока все вызовы Valid не вернут True.  Подэлемент  может  вернуть
        False, если он хочет, чтобы управление осталось у него.

             См. также: TView.Valid, TGroup.Execute




         B.Pascal 7 & Objects/TV#2      - 201 -

         THistory                                                Dialogs
        -----------------------------------------------------------------

             Объект  THistory  реализует список ранее выполненных команд,
        действий или выборов для их повтора. Объекты THistory связываются
        с объектом строки ввода TInputLine и со списком протокола. Инфор-
        мация  списка протокола хранится в блоке динамически распределяе-
        мой  области памяти. Когда блок заполняется, наиболее старые эле-
        менты протокола удаляются, а новые добавляются.

             Объект  THistory  показывается  в  виде  пиктограммы (|∙|) в
        конце строки ввода. Когда пользователь выбирает мышью пиктограмму
        протокола,   Turbo  Vision   открывает  окно  протокола   (смотри
        THistoryWindow)  с просмотром протокола (смотри  THistoryViewer),
        содержащем список вводимых ранее команд.

             Различные строки ввода могут использовать один список преды-
        стории, используя одинаковый номер идентификатора ID.


                                        Поля
        -----------------------------------------------------------------

             HistoryID                                (только для чтения)
                  HistoryID: Word;

             Каждый список протокола имеет уникальный номер ID, назначае-
        мый программистом. Различные объекты протоколов в различных окнах
        могут совместно использовать список протокола, используя одинако-
        вый номер ID (идентификатор).


             Link                                     (только для чтения)
                  Link: PInputLine;

             Указатель на связанный объект TInputLine.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var   Bounds:   TRect;
                                 ALink:  PInputLine; AHistoryId: Word);

             Создает объект THistоry заданного размера, вызывая конструк-
        тор  Init,  унаследованный  от  TView, а затем устанавливает поля
        Link и HistoryId равными ALink и AHistoryId. Поле Options устана-
        вливается равным ofPostProcess, а EventMask - равным evBroadcast.

             См. также: TView.Init



         B.Pascal 7 & Objects/TV#2      - 202 -

             Load
                  constructor Load(var S: TStream);

             Создает  и  инициализирует  объект  предыстории из потока S,
        вызывая конструктор Load, унаследованный от TView, и читая Link и
        HistoryId из S.

             См. также: TView.Load


             Draw
                  procedure Draw; virtual;

             Переопределяемость: переопределяется редко.

             Рисует пиктограмму предыстории, используя палитру, назначен-
        ную по умолчанию.


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: иногда переопределяется.

             Возвращает  указатель  на  используемую по умолчанию палитру
        CHistory.


             HandleEvent
                  procedure HandleEvent

             HandleEvent  обрабатывает  большую  часть  событий,  вызывая
        метод  HandleEvent,  унаследованный от TView, а затем отвечает на
        два специальных события:

             - если пользователь перещелкивает на пиктограмме списка пре-
        дыстории мышью  или  нажимает клавишу "стрелку вниз",  находясь в
        связанной строке ввода,  то отображаемый элемент предыстории соз-
        дает окно предыстории.  По умолчанию это окно на один символ шире
        и на 6 строк выше связанной строки ввода,  но  помещается  внутри
        диалогового окна владельца. HandleEvent передает этот ограничива-
        ющий прямоугольник InitHistoryWindow, чтобы она создала окно пре-
        дыстории;

             - если связанная строка ввода теряет фокус ввода или пиктог-
        рамма предыстории получает неявную  команду  cmRecordHistory,  то
        HandleEvent вызывает RecordHistory для записи текущего содержимо-
        го строки ввода в блок предыстории.

             См.  также:  TView.HandleEvent,  THistory.InitHistoryWindow,
        THistory.RecordHistory



         B.Pascal 7 & Objects/TV#2      - 203 -

             InitHistoryWindow
                  function InitHistoryList

             function InitHistory (var Bounds: TRect):
                                                PHistoryWindow; virtual;

             Создает объект окна предыстории с ограничивающим прямоуголь-
        ником,  переданным в Bounds, и ID предыстории из HistoryID, возв-
        ращая  указатель  на  вновь  созданное  окно. Также устанавливает
        контекст  подсказки  для  окна  предыстории на контекст подсказки
        связанной  строки  ввода.  Обработчик  событий  THistory вызывает
        InitHistoryWindow в ответ на нажатия кнопок мыши над пиктограммой
        предыстории  или  нажатия некоторых комбинаций клавиш в связанной
        строке ввода.

             См. также: THistoryWindow.Init, THistory.HandleEvent


             RecordHistory
                  procedure RecordHistory (const S: String); virtual;

             Добавляет  строку S к списку предыстории, связанному с отоб-
        ражаемым элементом, описанным HistoryID.

             См. также: процедуру HistoryAdd


             Store
                  procedure Store(var S:TStream);

             Сохраняет   объект  предыстории  в  потоке  S, вызывая метод
        Store,   унаследованный  от  TView,  а  затем  записывает  Link и
        HistoryId в S.

             См. также: TView.Load


                                      Палитра
        -----------------------------------------------------------------

             Пиктограммы  протокола  используют  палитру, определенную по
        умолчанию, CHistory, для отображения 22 и 23-го элементов станда-
        ртной палитры диалогового окна.

                                 1    2
                              ╔════╤════╗
                 CHistory     ║ 22 │ 23 ║
                              ╚══╤═╧═╤══╝
                 Стрелка ────────┘   └─────── Стороны




         B.Pascal 7 & Objects/TV#2      - 204 -

         THistoryViewer                                          Dialogs
        -----------------------------------------------------------------

             THistoryViewer является прямым потомком TListViewer, исполь-
        зуемым  системой  списка  предыстории.  Он  используется системой
        списка  протокола  и  появляется внутри окна протокола при выборе
        мышью пиктограммы протокола. Для детального описания взаимодейст-
        вия  THistory,  THistoryWindow  и  THistoryViewer смотри описание
        THistory в этой главе.

             Подробности о поле THistoryViewer и его методах приводится в
        контекстной подсказке.


         THistoryWindow                                          Dialogs
        -----------------------------------------------------------------

             THistoryWindow представляет собой специализированный потомок
        (наследник)  TWindow, используемый для хранения объекта просмотра
        списка  протокола,  когда пользователь выбирает мышью пиктограмму
        протокола, расположенную сразу за строкой ввода. По умолчанию это
        окно  не  имеет  заголовка  и  номера. Рамка окна протокола имеет
        закрывающую  пиктограмму,  поэтому окно может быть закрыто, но не
        может изменить размер или "распахиваться".

             Подробности  по использованию списков протоколов и связанных
        с ними объектов см. THistory в этой главе.


         TIndicator                                             Editors
        -----------------------------------------------------------------

             Объект  индикатора  обеспечивает  окно  редактора  счетчиком
        строки  и  столбца, расположенным в его левом нижнем углу. Объект
        окна  редактора  создает индикаторы по умолчанию и связывает их с
        объектами редактора. Индикаторы могут также работать с редактора-
        ми за пределами контекста окна редактора.


                                        Поля
        -----------------------------------------------------------------

             Location
                  Location: TPoint;

             Location  хранит текущие положения строки и столбца, которые
        надо показывать. Объекты редактора автоматически обновляют содер-
        жимое Location.


             Modified
                  Modified: Boolean;


         B.Pascal 7 & Objects/TV#2      - 205 -

             Modified  равно True в случае, если текст в связанном редак-
        торе  изменялся.  Draw  проверяет  значение Modified и показывает
        специальный  символ,  чтобы предупредить пользователя о состоянии
        буфера редактирования.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init (var   Bounds:   TRect);

             Создает  индикатор с границами, указанными в Bounds, вызывая
        конструктор  Init,  унаследованный  от TView, а затем привязывает
        отображаемый  элемент к левому нижнему углу окна владельца, уста-
        навливая GrowMode равным gfGrowLoY + gfGrowHiY.

             См. также: TView.Init


             Draw
                  procedure Draw; virtual;

             Рисует  индикатор в форме: строка: столбец, за которыми сле-
        дует символ  в случае, если Modified равно True.


             GetPalette
                  function GetPalette: PPalette; virtual;

             Возвращает  указатель  на  используемую по умолчанию палитру
        CIndicator.


             SetState
                  procedure SetState (AState: Word;
                                           Enable: Boolean); virtual;

             Вызывает  метод SetState, унаследованный от TView, для обра-
        ботки  нормальной  установки  состояния,  а  затем перерисовывает
        индикатор  в случае, если флаг sfDragging установлен, что означа-
        ет,  что  индикатор  требует  перерисовки  с использованием цвета
        перемещаемой рамки, а не нормального.

             См. также: TView.SetState


             SetValue
                  procedure SetValue (ALocation: TPoint;
                                                     AModified: Boolean);

             Устанавливает значение Location равным ALocation, а Modified
        - равным AModified, и перерисовывает индикатор. Объекты редактора

         B.Pascal 7 & Objects/TV#2      - 206 -

        вызывают  эти  методы для того,  чтобы значения индикаторов соот-
        ветствовали текущим.


                                      Палитра
        -----------------------------------------------------------------

             Пиктограммы  протокола  используют  палитру, определенную по
        умолчанию, CIndicator, для отображения 2 и 3-го элементов станда-
        ртной палитры программы. Это те же самые цвета, которые использу-
        ются рамками окна.

                                 1    2
                              ╔════╤════╗
                 CIndicator   ║  2 │  3 ║
                              ╚══╤═╧═╤══╝
               Нормальная────────┘   └─────── Перемещаемая




         B.Pascal 7 & Objects/TV#2      - 207 -

         TInputLine                                              Dialogs
        -----------------------------------------------------------------

             Объект TInputLine обеспечивает базовый редактор строк ввода.
        Он управляет вводом с клавиатуры, а также нажатием кнопок и пере-
        мещениями "мыши" при отметке блоков и в целом ряде функций редак-
        тирования строки (см. TInputLine.HandleEvent). Существующий ранее
        текст удаляется и заменяется первым вводом, являющимся текстовым.
        Если MaxLen больше размера по Х (Size.X), то поддерживается гори-
        зонтальная прокрутка, которая указывается правой и левой стрелка-
        ми.

             Методы  GetData и SetData доступны для записи и чтения строк
        данных (посредством поля указателя Data) в данную запись.

             Строки  ввода  часто  имеют  связанные с ними объекты меток,
        списков предыстории и, возможно, объектов определителя допустимо-
        сти ввода.

             TInputLine можно изменить для обработки типов данных, отлич-
        ных от строк. Чтобы сделать это, необходимо добавить новые поля и
        переопределяете  методы  Init,  Load,  Store,  Valid,   DataSize,
        GetData и SetData.


                                        Поля
        -----------------------------------------------------------------

             CurPos                                       (чтение/запись)
                  CurPos: Integer;

             Индекс точки вставки текста (т.е.  текущего положения курсо-
        ра).

             См. также: TInputLine.SelectAll


             Data                                         (чтение/запись)
                  Data: PString;

             Указатель на строку, содержащую редактируемую информацию.


             FirstPos                                     (чтение/запись)
                  FirstPos: Integer;

             Индекс первого отображаемого символа.

             См. также: TInputLine.SelectAll


             MaxLen                                   (только для чтения)
                  MaxLen: Integer;

         B.Pascal 7 & Objects/TV#2      - 208 -


             Максимальная  длина,  допустимая  для  строки,  включая байт
        длины.

             См. также: TInputLine.DataSize


             SelEnd                                   (только для чтения)
                  SelEnd: Integer;

             Индекс конца выделенной области (т.е. указатель на последний
        символ отмеченного блока).

             См. также: TInputLine.SelectAll


             SelStart                                 (только для чтения)
                  SelStat: Integer;

             Индекс начала выделенной области (т.е. первый символ отмече-
        нного блока).

             См. также: TInputLine.SelectAll


             Validator
                  Validator: PValidator;

             Указывает на объект определителя допустимости ввода, связан-
        ный со строкой ввода, или nil, если строка ввода не имеет объекта
        определителя  допустимости.  Для  присваивания значения Validator
        необходимо вызвать метод SetValidator, а не делать это напрямую.

             См. также: TInputLine.SetValidator


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect; AMaxLen: Integer);

             Создает прямоугольник  ввода с заданными значениями аргумен-
        тов,  вызывая конструктор  Init,  унаследованный  от  TInputLine.
        State устанавливается равным sfCursorVis, Options устанавливается
        равным (ofSelectable + ofFirstClick),  и  MaxLen  устанавливается
        равным AMaxLen. Выделяет AMaxLen + 1 байт памяти, а поле Data ус-
        танавливается равным указателю на эту память.

             См. также:           TView.Init,          TView.sfCursorVis,
        TView.ofSelectable, TView.ofFirstClick



         B.Pascal 7 & Objects/TV#2      - 209 -

             Load
                  constructor Load(var S: TStream);

             Создает  и  инициализирует  объект строки ввода из потока S,
        вызывая  сначала  конструктор  Load,  унаследованный  от TView, а
        затем  читает  целочисленные  поля  из  потока, используя S.Read.
        Выделяет  MaxLen+1  байт  памяти для Data, а затем считывает из S
        байт длины строки и данные с помощью S.Read. Метод Load использу-
        ется совместно с TInputLine.Store для сохранения и восстановления
        объектов TInputLine из TStream.

             Переопределяйте  этот  метод,  если Вы определяете потомков,
        содержащих дополнительные поля.

             См. также: TView.Load, TInputLine.Store, TStream.Read


             Done
                  destructor Done; virtual;

             Переопределяемость: используется редко.

             Освобождает  память,  выделенную  под  Data,  затем вызывает
        Done,  унаследованный  от  TView,  для уничтожения объекта строки
        ввода.

             См. также: TView.Done


             DataSize
                  function DataSize: Word; virtual;

             Переопределяемость: иногда переопределяется.

             Возвращает  размер  записи для вызовов GetData и SetData. По
        умолчанию  возвращается MaxLen+1. Переопределите этот метод, если
        Вы определили потомков для обработки других типов данных.

             См. также: TInputLine.GetData, TInputLine.SetData


             Draw
                  procedure Draw; virtual;

             Переопределяемость: переопределяется редко.

             Отображает  прямоугольник  ввода и его данные. Прямоугольник
        рисуется  соответствующим  цветом в зависимости от того, является
        ли он sfFocused или нет (т.е. находится ли в отображаемом элемен-
        те курсор или нет), а также рисуются стрелки в случае, если стро-
        ка ввода превышает размер отображаемого элемента (в любом направ-
        лении).  Любые  выделенные  (отмеченный  блок) символы рисуются с
        использованием соответствующей палитры.

         B.Pascal 7 & Objects/TV#2      - 210 -



             GetData
                  procedure GetData(var Rec); virtual;

             Переопределяемость: иногда переопределяется.

             Возвращает значение строки ввода. По умолчанию GetData запи-
        сывает DataSize байт из строки Data^ в Rec. GetData можно переоп-
        ределять  при  определении  порожденных  объектов, обрабатывающих
        нестроковые типы данных. Например, строка ввода чисел может прео-
        бразовать  введенную  строку к числовому отображаемому элементу и
        скопировать  это  число  в Rec. При переопределении GetData нужно
        также  переопределять  SetData,  чтобы  она считывала те же самые
        данные,  которые  вернула  GetData,  а  также DataSize, чтобы она
        возвращала размер переданных данных.

             См. также: TInputLine.DataSize, TInputLine.SetData


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: иногда переопределяется.

             Возвращает  указатель на палитру (используемую по умолчанию)
        CInputLine.


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: иногда используется.

             Вызывает метод HandleEvent, унаследованный от TView, а затем
        обрабатывает  все  события  от "мыши" и клавиатуры в случае, если
        выбрана  строка  ввода.  Этот метод реализует стандартные функции
        редактирования.

             Функции  редактирования  включают в себя: отметку блока "мы-
        шью"  с  помощью нажатия кнопок и ее перемещения; удаление блока;
        управление  режимами вставки и замены с автоматическим изменением
        формы  курсора;  автоматическую  и "ручную" прокрутку (зависит от
        относительных размеров строки Data и Size.X); "ручную" горизонта-
        льную  прокрутку  с  помощью  "мыши"  с использованием пиктограмм
        стрелок;  "ручное"  перемещение курсора с помощью стрелок, клавиш
        Home и End (и их стандартных эквивалентов с использованием клави-
        ши  Ctrl); удаление символа и блока с помощью Del и Ctrl+G. Отоб-
        ражаемый  элемент  перерисовывается,  как  это необходимо, и поля
        TInputLine изменяются соответствующим образом.

             См. также:          sfCursorIns,          TView.HandleEvent,
        TIputLine.SelectAll

         B.Pascal 7 & Objects/TV#2      - 211 -



             SelectAll
                  procedure SelectAll(Enable: Boolean);

             Устанавливает  значения  CurPos, FirstPos и SelStart равными
        0.  Если  Enable  равно  True,  то  SelEnd устанавливается равным
        Length(Data^),  выделяя   таким  образом  всю строку ввода.  Если
        Enable  равно   False,   то   SelEnd  устанавливается  равным  0,
        отменяя  таким  образом   выделение    всей   строки.    Наконец,
        отображаемый элемент перерисовывается вызовом DrawView.

             См. также: TView.DrawView


             SetData
                  procedure SetData(var Rec); virtual;

             Переопределяемость: иногда переопределяется.

             По умолчанию считывает DataSize байт из Rec в строку Data^ и
        вызывает  SelectAll(True)  для того, чтобы сделать вновь заданный
        текст  выделенным. Переопределите этот метод, если Вы определяете
        потомка  для  обработки  нестроковых  типов данных, использующего
        этот  метод  для  преобразования  Вашего типа данных в строку для
        последующего редактирования с помощью TInputLine.

             См. также:      TInputLine.DataSize,     TInputLine.GetData,
        TView.DrawView


             SetState
                  procedure AetState(AState:  Word;
                                           Enable: Boolean); virtual;

             Переопределяемость: используется редко.

             Вызывается  в случае, когда строка ввода должна быть отобра-
        жена  заново вследствие изменения State. Вызывает метод SetState,
        унаследованный от TView, для установки или сброса бит(а), переда-
        нного  в  AState  в  поле  State строки ввода. Затем, если AState
        равно  sfSelected  или  если AState равно sfActive и строка ввода
        является sfSelected, то вызывается SelectAll(Enable).

             См. также: TView.SetState, TView.DrawView


             SetValidator
                  procedure SetValidator (AValid: PValidator);

             Если  со строкой ввода уже связан объект определителя допус-
        тимости  ввода, то SetValidator уничтожает любой такой существую-
        щий   объект,  вызывая  его  метод  Free.  Устанавливает значение

         B.Pascal 7 & Objects/TV#2      - 212 -

        Validator   равным   AValid.  Для  уничтожения  всех существующих
        объектов определителя допустимости без создания нового необходимо
        передать значение nil.


             Store
                  procedure Store(var S: TStream);

             Сохраняет  отображаемый  элемент  в  потоке, вызывая сначала
        метод  Store, унаследованный от TView, а затем записывает 5 цело-
        численных  полей и строку Data с помощью вызовов S.Write. Исполь-
        зуется  совместно с TInputLine.Load для сохранения и чтения всего
        объекта TInputLine. Переопределите этот метод, если Вы определяе-
        те потомка, который содержит дополнительные поля.

             См. также: TView.Store, TInputLine.Load, TStream.Write


             Valid
                  function Valid (Command: Word): Boolean; virtual;

             Если  со  строкой не связан объект определителя допустимости
        ввода или если Command равно cmCancel, то Valid возвращает значе-
        ние,  которое  было  возвращено  методом Valid, унаследованным от
        TView.

             Если  строка  ввода  имеет  объект определителя допустимости
        ввода,  то  она  проверяет возвращенное им значение. Если Command
        равно  cmValid, то Valid возвращает True в случае, если у опреде-
        лителя  допустимости  Status  равен  vsOK; в противном случае она
        возвращает  False.  Если Command отлична от cmValid или cmCancel,
        то  Valid передает Data^ методу Valid объекта определителя допус-
        тимости.  Если  этот  метод  возвращает значение False, то строка
        ввода  вызывает Select для взятия фокуса ввода, и возвращает зна-
        чение False.

             См. также: TView.Valid, TValidator.Valid


                                      Палитра
        -----------------------------------------------------------------

             Строки  ввода используют палитру, определенную по умолчанию,
        CInputLine,  для отображения в элементов с 19 по 21-й стандартной
        палитры диалогового окна.

                             1    2    3    4
                          ╔════╤════╤════╤════╗
              CInputLine  ║ 19 │ 19 │ 20 │ 21 ║
                          ╚══╤═╧══╤═╧══╤═╧══╤═╝
                             │    │    │    │
              Пассивный ─────┘    │    │    └─── Стрелка
              Активный  ──────────┘    └──────── Выделенный

         B.Pascal 7 & Objects/TV#2      - 213 -

         Тип TItemList                                          Objects
        -----------------------------------------------------------------

             Описание: TItemList = array[0..MaxCollectionSize - 1] of
                                                               Pointer;

             Функция:  Массив  общих  указателей,  используемых внутренне
        объектами TCollection.
         TLabel                                                  Dialogs
        -----------------------------------------------------------------

             Объект TLabel представляет собой текст в отображаемом элеме-
        нте,  который  может  быть  выбран  (подсвечен) с помощью "мыши",
        клавишами курсора или клавишами активации Alt-буква. Метка обычно
        присоединяется  с  помощью указателя PView к другому управляющему
        отображаемому  элементу,  такому,  как  строка ввода, кластер или
        объект  просмотр  списка  для  дачи пользователю пояснений. Выбор
        (или  нажатие)  метки  будет  осуществлять  выбор присоединенного
        управляющего элемента. Метка также будет подсвечиваться при выбо-
        ре соответствующего управляющего элемента.


                                        Поля
        -----------------------------------------------------------------

             Light                                    (только для чтения)
                  Light: Boolean;

             Если  True,  то  метка и связанный с ней управляющий элемент
        будут выбираться и подсвечиваться.


             Link                                     (только для чтения)
                  Link: PView;

             Указывает  на элемент управления, связанный с этой меткой.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds:  TRect;
                                           AText:  String; ALink: PView);

             Создает объект метки с заданными размером и текстом, вызывая
        сначала  конструктор Init, унаследованный от TStaticText, а затем
        устанавливает поле Link для связанного элемента управления равным
        ALink.  Поле  Option  устанавливается  равным  ofPreProcess   and
        ofPostProcess.   EventMask  устанавливается  равным  evBroadcast.
        Значение  поля    AText   назначается  полю   Text  через   метод
        TStaticText.Init.  В  AText  можно  задать  клавишу активации для
        метки, окружив соответствующую букву символами тильд "~".

         B.Pascal 7 & Objects/TV#2      - 214 -


             Внимание!  Никогда не следует создавать объект метки со свя-
        зью, равной nil. Для создания меток без связей используйте объек-
        ты со статическим текстом.

             См. также: TStaticText.Init


             Load
                  constructor Load(var S: TStream);

             Создает  и загружает объект TLabel из потока S, вызывая сна-
        чала  конструктор  Load,  унаследованный  от TStaticText, а затем
        вызывая GetPeerViewPtr(S, Link) для переустановки связи со связа-
        нным элементом управления.

             См. также: TLabel.Store


             Draw
                  procedure Draw; virtual;

             Переопределяемость: никогда не используется.

             Рисует  отображаемый  элемент  соответствующими  цветами  из
        палитры, используемой по умолчанию.


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: иногда переопределяется.

             Возвращает  указатель  на  используемую по умолчанию палитру
        CLabel.

             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: не переопределяется.

             Обрабатывает большинство событий, вызывая метод HandleEvent,
        унаследованный  от  TStaticText.  Если  метка  получает сообщение
        evMouseDown  или событие от клавиши активации, то выбирается свя-
        занный элемент управления. Этот метод также отвечает на сообщения
        cmReceivedFocus и cmReleasedFocus от связанного элемента управле-
        ния для настройки значения поля Light и перерисовки метки.

             См. также: TView.HandleEvent, константы команд cmXXXX


             Store
                  procedure Store(var S: TStream);

         B.Pascal 7 & Objects/TV#2      - 215 -


             Сохраняет  отображаемый  элемент в потоке S, вызывая сначала
        метод  Store,  унаследованный  от TStaticText, а затем записывает
        связь со связанным элементом управления, вызывая PutPeerViewPtr.

             См. также: TLabel.Load


                                      Палитра
        -----------------------------------------------------------------

             Метки  используют палитру, назначенную по умолчанию, CLabel,
        для  отображения элементов 7, 8 и 9 палитры стандартного диалого-
        вого окна.

                             1    2    3    4
                          ╔════╤════╤════╤════╗
              CLabel      ║  7 │  8 │  9 │  9 ║
                          ╚══╤═╧══╤═╧══╤═╧══╤═╝
                             │    │    │    │
            Нормальный текст ┘    │    │    └─── Выделенная оперативная
            Выделенный текст ─────┘    │         клавиша
                                       └──────── Обычная оперативная
                                                 клавиша



         B.Pascal 7 & Objects/TV#2      - 216 -

         TListBox                                               Dialogs
        -----------------------------------------------------------------

             TListBox, порожденный от TListViewer, помогает создавать на-
        иболее  часто  используемые  окна  списков,  отображающих  наборы
        строк.  Объекты окон-списков отображают списки таких элементов  в
        одну  или более колонок с возможной вертикальной полосой прокрут-
        ки.  Горизонтальные полосы прокрутки, имеющиеся в TListViewer, не
        поддерживаются. Наследуемые методы TListViewer позволяют выбирать
        (и подсвечивать) элементы с помощью "мыши" или через  клавиатуру.
        TListBox не переопределяет HandleEvent или Draw.

             TListBox  имеет  дополнительное  поле  List,  которого нет в
        TListViewer.  List указывает на объект набора, содержащий выводи-
        мые  и  выбираемые  элементы. Ответственность за вставку данных в
        TCollection  лежит  на Вас также, как и действия, выполняемые при
        выборе элемента.

             TListViewer  наследует метод Done от TView, поэтому Вы также
        отвечаете  за  освобождение содержимого List по окончании работы.
        Вызов  NewList  будет  освобождать  старый  список, поэтому вызов
        NewList(nil) и последующее освобождение окна-списка будут освобо-
        ждать все.


                                        Поле
        -----------------------------------------------------------------

             List                                     (только для чтения)
                  List: PCollection;

             List  указывает  на набор элементов для просмотра. Это может
        быть набор PString, представляющий элементы текста.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect; ANumCols: Word;
                                                AScrollBar: PScrollBar);

             Создает  окно  списка с заданным размером, числом столбцов и
        вертикальной  полосой  прокрутки,  на которую указывает указатель
        AScrollBar.  Этот  метод  вызывает  метод Init, унаследованный от
        TListViewer, с аргументом горизонтальной полосы прокрутки, равным
        nil.

             Поле  List  устанавливается  равным  nil  (пустой список), а
        Range  устанавливается  равным  0.  Ваша  программа должна задать
        подходящий набор, содержащий строки (или другие объекты для выво-
        да). Поле List указывает на этот набор вследствие вызова NewList.


         B.Pascal 7 & Objects/TV#2      - 217 -

             См. также: TListViewer.Init, TListBox.NewList


             Load
                  constructor Load(var S: TStream);

             Создает  объект  окна-списка  и  загружает его значениями из
        потока  S,  вызывая  сначала  конструктор Load, унаследованный от
        TListViewer, а затем считывает List из S с помощью S.Get.

             См. также: TListViewer.Load, TListBox.Store, TStream.Get


             DataSize
                  function DataSize: Word; virtual;

             Переопределяемость: иногда переопределяется.

             Возвращает  размер  считываемых  и  записываемых  данных для
        записей,   передаваемых  в   GetData  и  SetData.  По   умолчанию
        TListBox.DataSize   возвращает   размер   указателя, плюс  размер
        слова (для List и выбранного элемента).

             См. также: TListBox.GetData, TListBox.SetData


             GetData
                  procedure GetData(var Rec); virtual;

             Переопределяемость: иногда переопределяется.

             Записывает  данные  объекта  TListBox в запись. По умолчанию
        этот метод пишет в Rec текущие поля List и Focused.

             См. также: TListBox.DataSize, TListBox.SetData


             GetText
                  function GetText(Item: Integer;
                                      MaxLen: Integer): String; virtual;

             Переопределяемость: иногда переопределяется.

             Возвращает  строку  с  номером  Item из объекта TListBox. По
        умолчанию  возвращаемая  строка  получается из элемента с номером
        Item  в  наборе  строк с использованием PString(List^.At(Item))^.
        Если List содержит не строковые объекты, то Вам необходимо перео-
        пределить  этот метод. Если List равно nil, то GetText возвращает
        пустую строку.

             См. также: TCollection.At



         B.Pascal 7 & Objects/TV#2      - 218 -

             NewList
                  procedure NewList(AList: PCollection); virtual;

             Переопределяемость: переопределяется редко.

             Если AList не равно nil, то новый список, заданный с помощью
        AList,  замещает  текущий список List. Поле Range устанавливается
        равным  полю  Count нового TCollection, и первый элемент получает
        фокус ввода вызовом FocusItem(0). Наконец, новый список отобража-
        ется  вызовом DrawView. Заметим, что если предыдущее поле List не
        равно nil, то перед присваиванием нового значения оно освобождае-
        тся.

             См. также:      TListBox.SetData,      TListViewer.SetRange,
        TListViewer.FocusItem, TView.DrawView


             SetData
                  procedure SetData(var Rec); virtual;

             Переопределяемость: иногда используется.

             Заменяет текущий список значениями List и Focused, считанны-
        ми из Rec. SetData вызывает NewList так, чтобы новый список отоб-
        ражался с правильным активным элементом. Как и в случае с GetData
        и  DataSize, Вам может понадобиться переопределить этот метод для
        своей программы.

             См. также:        TListBox.DataSize,       TListBox.GetData,
        TListBox.NewList


             Store
                  procedure Store(var S:TStream);

             Записывает  окно  списка  в  поток  S, вызывая сначала метод
        Store,  унаследованный  от TListView, а затем выводит набор в по-
        ток, вызывая S.Put(List).

             См. также: TListBox.Load, TListViewer.Store, TStream.Put


                                      Палитра
        -----------------------------------------------------------------

             Окна  списка  используют  палитру (назначенную по умолчанию)
        CListViewеr,  для  отображения  элементов  с 26 по 29 стандартной
        палитры программы.

                          1   2   3   4   5
                        ╔═══╤═══╤═══╤═══╤═══╗
           CListViewer  ║ 25│ 26│ 27│ 28│ 29║
                        ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝

         B.Pascal 7 & Objects/TV#2      - 219 -

                          │   │   │   │   │
           Активный   ────┘   │   │   │   └── Разделитель
           Неактивный ────────┘   │   └────── Выделенный
           Текущий    ────────────┘




         B.Pascal 7 & Objects/TV#2      - 220 -

         TListViewer                                               Views
        -----------------------------------------------------------------

             TListViewer  представляет собой базовый тип, производными от
        которого являются различные объекты просмотра списков, такие, как
        TListBox.  Базовые поля и методы TListViewer обеспечивают следую-
        щие функциональные возможности:

             - отображаемый элемент для вывода связанных списков  элемен-
        тов (но не списков);

             - управление одной или двумя полосами прокрутки;

             - возможности прокрутки списков в двух измерениях;

             - загрузка  и  сохранения отображаемого элемента и его полос
        прокрутки в/из потока;

             - возможность выбора (подсветки) элемента списка  с  помощью
        "мыши" или клавиатуры;

             - метод Draw, выполняющий копирование с изменением размера и
        прокруткой.

             TListViwer  содержит  абстрактный метод GetText, поэтому Вам
        необходимо  обеспечить механизм для создания и обработки текста в
        выводимых элементах.

             TListViewer не располагает собственным механизмом сохранения
        списка. TListViwer можно использовать для вывода на экран прокру-
        чиваемых  списков массивов, связанных списков или подобных струк-
        тур  данных. Можно также использовать потомков TListViwer (таких,
        как  TListBox), которые связывают набор с объектом просмотра (ви-
        зуализатором) списка.


                                        Поля
        -----------------------------------------------------------------

             Focused                                  (только для чтения)
                  Focused: Integer;

             Номер текущего элемента. Элементы нумеруются от 0 до Range -
        1.  Init устанавливает Focused равным 0 (первый элемент), а затем
        его можно изменить с помощью кнопки "мыши" или клавиши пробела.


             HScrollBar                               (только для чтения)
                  HScrollBar: PScrollBar;

             Указатель на связанную с данным отображаемым элементом гори-
        зонтальную полосу прокрутки. В случае значения nil (пусто) полоса
        прокрутки отсутствует.

         B.Pascal 7 & Objects/TV#2      - 221 -



             NumCols                                  (только для чтения)
                  NumCols: Integer;

             Число столбцов в окне просмотра списка.


             Range                                    (только для чтения)
                  Range: Integer;

             Текущее  общее число элементов в списке. Элементы нумеруются
        от 0 до Range - 1.

             См. также: TListViewer.SetRange


             TopItem                                      (чтение/запись)
                  TopItem: Integer;

             Номер  первого  выводимого элемента. Элементы нумеруются с 0
        до Range - 1. Этот номер зависит от числа столбцов, размера обла-
        сти просмотра и значения Range.

             См. также: Range


             VScrollBar                                (только для чтения)
                  VScrollBar: PScrollBar;

             Указатель  на связанную с данным отображаемым элементом вер-
        тикальную  полосу прокрутки. В случае значения nil (пусто) полоса
        прокрутки отсутствует.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect; ANumCols: Integer;
                                 AHscrollBar, AVScrollBar: PScrollBar);

             Создает  и инициализирует объект TListViewer с заданным раз-
        мером, вызывая сначала конструктор Init, унаследованный от TView.
        Поле  NumCols устанавливается равным ANumCols. Options устанавли-
        вается равным (ofFirstClick + ofSelectable), благодаря чему нажа-
        тия  кнопок "мыши", которые используются при выборе отображаемого
        элемента, будут передаваться HandleEvent. EventMask устанавливае-
        тся  равным evBroadcast. Начальные значения Range и Focused равны
        0.  Значения VScrollBar и HScrollBar устанавливаются равными вер-
        тикальным  и/или  горизонтальным  полосам прокрутки, переданным в
        аргументах AVScrollBar и AHScrollBar.


         B.Pascal 7 & Objects/TV#2      - 222 -

             Если  Вы устанавливаете допустимые полосы прокрутки, то Init
        настроит  их  поля  ArStep  и  PgStep  в  соответствии с размером
        TListViewer   и   числом  столбцов.  Например,  для  TListViewer,
        состоящего из   одного   столбца,   по   умолчанию   вертикальное
        значение PgStep равно Size.Y - 1, а вертикальное значение  ArStep
        равно 1.

             См. также: TView.Init, TScrollBar.SetStep.


             Load
                  constructor Load(var S: TStream);

             Создает  и  загружает  объект  просмотра списка из потока S,
        вызывая  сначала  конструктор  Load,  унаследованный  от TView, а
        затем считывает полосы прокрутки с помощью вызова GetPeerViewPtr,
        после чего считывает целочисленные поля с помощью S.Read.

             См. также: TView.Load, TListViewer.Store


             ChangeBounds
                  procedure ChangeBounds(var Bounds: TRest); virtual;

             Переопределяемость: не используется.

             Изменяет  размер  объекта  просмотра  списков, вызывая метод
        ChangeBounds,  унаследованный от TView. В случае наличия горизон-
        тальной полосы прокрутки данный метод настраивает значение PgStep
        как это необходимо.

             См. также: TView.ChangeBounds. TScrollBar.ChangeStep.


             Draw
                  procedure Draw; virtual;

             Переопределяемость: не используется.

             Отображает  объект  просмотра списков, используя назначенную
        по  умолчанию  палитру, вызывая GetText для каждого отображаемого
        элемента. Учитываются текущий и выбранный элемент, а также состо-
        яние sfActive.

             См. также: TListViewer.GetText


             FocusItem
                  procedure FocuseItem(Item: Integer); virtual;

             Переопределяемость: не используется.

             Устанавливая значение поля Focused равным Item, делает зада-

         B.Pascal 7 & Objects/TV#2      - 223 -

        нный  элемент  текущим. Этот метод также устанавливает поле Value
        вертикальной  полосы  прокрутки  (если она имеется) равным Item и
        настраивает поле TopItem.

             См. также: TListViewer.IsSelected, TScrollBar.SetValue.


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: иногда используется.

             Возвращает  указатель  на  используемую по умолчанию палитру
        CTListViewer.


             GetText
                  function GetText(Item: Integer;
                                      MaxLen: Integer): String; virtual;

             Переопределяемость: всегда переопределяется.

             Это  абстрактный метод. Производные типы должны обеспечивать
        механизм  для  возврата строки для элемента (Item), длина которой
        не превышает MaxLen.

             См. также: TListViewer.Draw.


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: используется редко.

             HandleEvent  обрабатывает  большую  часть  событий,  вызывая
        метод HandleEvent, унаследованный от TView. Нажатия кнопок "мыши"
        и  "автоматические"  перемещения по списку будут изменять текущий
        элемент.  Элемент можно выбрать с помощью двойного нажатия кнопки
        "мыши".  Обрабатываются также события от клавиатуры: клавиша про-
        бела  осуществляет  выбор текущего элемента, а клавиши управления
        курсором, PgUp, PgDn, Ctrl+PgDn, Ctrl+PgUp, Home, End используют-
        ся  для  установки  текущего элемента. Наконец события, вызванные
        полосами  прокрутки, обрабатываются путем изменения текущего эле-
        мента  и новым отображением области просмотра, как это потребует-
        ся.

             См. также: TView.HandleEvent, TLiatViewer.FocusItem


             IsSelected
                  function IsSelected(Item: Integer): Boolean; virtual;

             Переопределяемость: иногда переопределяется.

         B.Pascal 7 & Objects/TV#2      - 224 -


             Возвращает значение True, если заданный элемент Item являет-
        ся  текущим, то есть Item = Focused. Может быть переопределен для
        создания объекта просмотра с множественным выбором.

             См. также: TListViewer.FocusItem


             SelectItem
                  procedure SelectItem(Item: Integer); virtual;

             Переопределяемость: иногда используется.

             Осуществляет выбор элемента списка с индексом Item и уведом-
        ляет  об этом равнозначные ему объекты. Метод SelectItem, опреде-
        ленный по умолчанию, посылает своему владельцу cmListItemSelected
        следующим образом:

             Message (Owner, evBroadcast, cmListItemSelected, $Self);

             См. также: TListViever.FocusItem


             SetRange
                  procedure SetRange(ARange: Integer);

             Устанавливает поле Range равным ARange. Если объект просмот-
        ра  использует  вертикальную  полосу  прокрутки,  то ее параметры
        соответствующим  образом  настраиваются.  Если текущий элемент не
        попадает  в новый диапазон Range, то поле Focused устанавливается
        равным нулю.

             См. также: TListViewer.Range, TScrollBar.SetParams


             SetState
                  procedure SetState(AState: Word;
                                           Enable: Boolean); virtual;

             Переопределяемость: используется редко.

             Если Enable имеет значение True, то вызывает метод SetState,
        унаследованный от  TView,   для   изменения   состояния   объекта
        TListViewer.  В зависимости от значения аргумента AState, это мо-
        жет привести к тому,  что область просмотра будет выведена на эк-
        ран   или  "скрыта".  Кроме  того,  если  AState  имеет  значение
        sfSelected and sfActive, то полосы прокрутки отображаются заново.
        Если AState имеет значение sfSelected,  но не sfActive, то полосы
        прокрутки будут "скрыты".

             См. также: TView.SetState, TScrollBar.Show, TScrollBar.Hide



         B.Pascal 7 & Objects/TV#2      - 225 -

             Store
                  procedure Store(var S: TStream);

             Записывает  объект просмотра списка в поток S, вызывая метод
        Store, унаследованный от TView, а затем записывает объекты полосы
        прокрутки  (если  таковые  имеются)  с помощью PutPeerViewPtr, и,
        наконец, используя S.Write, сохраняет целочисленные поля.

             См. также: TView.Store, TListViewer.Load


                                      Палитра
        -----------------------------------------------------------------

             Объекты  просмотра списков используют назначенную по умолча-
        нию палитру CListViewer для отображения элементов 26-29 стандарт-
        ной палитры программы.

                               1   2   3   4   5
                             ╔═══╤═══╤═══╤═══╤═══╗
              CListViewer    ║ 25│ 26│ 27│ 28│ 29║
                             ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
                               │   │   │   │   │
                Активен   ─────┘   │   │   │   └──────── Разделитель
                Неактивен ─────────┘   │   └──────────── Выбранный
                Текущий   ─────────────┘





         B.Pascal 7 & Objects/TV#2      - 226 -

         TLookupValidator                                       Validate
        -----------------------------------------------------------------

             Определитель  допустимости  соответствия  сравнивает строки,
        вводимые    пользователем,   с   перечнем   допустимых  значений.
        TLookupValidator  представляет   собой  абстрактный   тип объекта
        контроля допустимости, на базе которого можно создавать  полезные
        определители   допустимости.   Копии TLookupValidator  никогда не
        создаются.   При   создании    типа   определителя   допустимости
        необходимо   указать   список     допустимых     элементов      и
        переопределить  метод  Lookup  так,  чтобы   он   возвращал  True
        только  в случае совпадения элемента, введенного   пользователем,
        с элементом  списка. Одним  из примеров  работающего определителя
        допустимости,   порожденного   от   TLookupValidator,    является
        TStringLookupValidator.


                                       Методы
        -----------------------------------------------------------------

             IsValid
                  function IsValid (const S: string): Boolean; virtual;

             Вызывает  Lookup  для  поиска  строки  S в списке допустимых
        элементов  ввода.  Возвращает  True  в случае, если Lookup вернет
        True,  что  означает,  что  Lookup  нашла S в списке; в противном
        случае возвращает False.

             См. также: TLookupValidator.Lookup


             Lookup
                  function Lookup (const S: string): Boolean; virtual;

             Производит  поиск  строки  S  в  списке допустимых элементов
        ввода  и  возвращает  True  в случае, если находит S; в противном
        случае  возвращает  False.  Метод  Lookup объекта LookupValidator
        является  абстрактным  методом,  который всегда возвращает False.
        Порожденные  типы  определителя  допустимости соответствия должны
        переопределять  Lookup  для  обеспечения  поиска,  основанного на
        истинном списке приемлемых элементов.




         B.Pascal 7 & Objects/TV#2      - 227 -

         Объект TMemo                                           Editors
        -----------------------------------------------------------------

             Объект  комментария  представляет  собой  специализированный
        объект,  порожденный стандартным объектом редактора, и предназна-
        ченный  быть  управляющим  элементом  внутри диалогового окна или
        бланка.   Он   поддерживает   клавишу   табуляции   и    механизм
        GetData/SetData,   а  также  имеет  палитру,  сходную  с палитрой
        объекта редактора.


                                       Методы
        -----------------------------------------------------------------

             Load
                  constructor Load(var S: TStream);

             Считывает  объект  комментария  из потока S, вызывая сначала
        конструктор  Load,  унаследованный  от TEditor, а затем считывает
        длину буфера текста и текст, связанный с редактором.

             См. также: TEditor.Load


             DataSize
                  function DataSize: Word; virtual;

             Возвращает  размер  данных, переданных GetData и SetData. По
        умолчанию  этот  размер составляет длину буфера плюс размер слова
        длины.

             См. также: TMemo.GetData, TMemo.SetData


             GetData
                  procedure GetData (var Rec); virtual;

             Копирует  DataSize  байт  из  буфера редактора текста в Rec.
        GetData рассматривает Rec как запись TMemoData, устанавливая поле
        Length равным BufLen, а затем копирует текст из текстового буфера
        в поле Buffer. Если текст не заполняет всего буфера, то Rec запо-
        лняется  нулевыми  символами.  GetData позволяет программе читать
        текст из поля комментария в диалоговом окне или бланке с данными.

             См. также: TMemo.DataSize, TMemo.SetData


             GetPalette
                  function GetPalette: PPalette; virtual;

             Возвращает  указатель  на  используемую по умолчанию палитру
        CMemo.


         B.Pascal 7 & Objects/TV#2      - 228 -


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: используется редко.

             Вызывает  метод  HandleEvent,  унаследованный  от  TEditor в
        случае,  если событие не является алфавитно-цифровым символом или
        символом  табуляции.  Это  обеспечивает  тот факт, диалоговое или
        обычное окно, владеющее отображаемым элементом комментария, полу-
        чит символ табуляции для обработки.

             См. также: TEditor.HandleEvent


             SetData
                  procedure SetData (var Rec); virtual;

             Копирует  DataSize  байт информации из Rec для инициализации
        буфера  данных.  SetData  рассматривает Rec как запись TMemoData,
        используя  поле Length для установки размера буфера комментария и
        копируя символы в поле Buffer до конца буфера редактирования.


             Store
                  procedure Store(var S: TStream);

             Записывает  объект  комментария  в  поток S, вызывая сначала
        метод  Store, унаследованный от TEditor, а затем записывает длину
        буфера редактирования и текст из буфера.

             См. также: TEditor.Store


                                      Палитра
        -----------------------------------------------------------------

             Объекты  комментария  используют  назначенную  по  умолчанию
        палитру CMemo для отображения элементов 26-27 стандартной палитры
        диалогового окна.

                               1   2
                             ╔═══╤═══╗
              CMemo          ║ 26│ 27║
                             ╚═╤═╧═╤═╝
                               │   │
                Нормальный─────┘   └─────── Подсвеченный




         B.Pascal 7 & Objects/TV#2      - 229 -

         Тип TMemoData                                          Editors
        -----------------------------------------------------------------

             Описание:
                  TMemoData = record
                       Length:   Word;
                       Buffer:   TEditBuffer;
                  end;

             Функция:  Объекты  TMemo используют записи TMemoData в своих
        методах  GetData и SetData для чтения и записи длины их текстовых
        буферов и реального текста буфера.


         Тип TMenu                                              Menus
        -----------------------------------------------------------------

             Описание:  TMenu = record
                           Items:     PMenuItem;
                           Default:   PMenuItem);
                         end;

             Функция:  Тип  TMenu  представляет один уровень дерева меню.
        Поле Items указывает на список записей TMenuItems, а поле Default
        указывает  на выбираемый по умолчанию элемент внутри этого списка
        (элемент выбирается по умолчанию при открытии этого меню). Объект
        TMenuView (потомками которого являются TMenuBar и TMenuBox) имеет
        поле  Menu,  которое указывает на TMenu. Записи TMenu создаются и
        удаляются с помощью подпрограмм NewMenu и DisposeMenu.

             См. также:  TMebuView,  TMenuItem,   NewMenu,   DisposeMenu,
        поле TMenuView.Menu




         B.Pascal 7 & Objects/TV#2      - 230 -

         TMenuBar                                                 Menu
        -----------------------------------------------------------------

             Объект  TMenuBar  представляет  собой  горизонтальную строку
        меню, из которой элементы меню можно выбирать следующими способа-
        ми:

             - с помощью нажатия кнопки "мыши";

             - с помощью клавиши F10 и клавиш активации;

             - с помощью выбора (подсветки) элемента  и  нажатия  клавиши
        Enter;

             - с помощью оперативных клавиш.

             В  верхней  части  строки  меню  выводятся основные значения
        выбора меню. Это реализуется с помощью объекта TMenuBar, владель-
        цем которого обычно является объект TAplication. Подменю выводят-
        ся  в объектах типа TMenuBox. TMenuBar и TMenuBox являются потом-
        ками  абстрактного  типа  TMenuView (это непосредственный потомок
        TView).

             Для  большинства программ Turbo Vision Вам не придется рабо-
        тать  непосредственно  с  объектами  меню. Переопределив один раз
        метод программы InitMenuBar для введения структуры меню с исполь-
        зованием  вложенных  вызовов  New, NewSubMenu, NewItem и NewLine,
        определенное  по умолчанию поведение меню обрабатывает создание и
        управление отображаемыми элементами меню.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect; AMenu: PMenu);

             Создает  строку  меню  с заданными границами Bounds, вызывая
        конструктор  Init,  унаследованный  от  TMenuView.  Устанавливает
        GrowMode  равным  gfGrowHiX.  Чтобы работали оперативные клавиши,
        поле Options устанавливается равным ofPreProcess. Поле Menu уста-
        навливается равным AMenu, обеспечивая пункты меню.

             См. также:  TMenuView.Init, флаги увеличения размера gfXXXX,
        флаги параметров ofXXXX, TMenuView.Menu


             Done
                  destructor Done; virtual;

             Освобождает память, занимаемую объектом меню, вызывая снача-
        ла деструктор Done, унаследованный от TMenuView, а затем вызывает
        DisposeMenu для освобождения памяти из-под списков пунктов меню.

         B.Pascal 7 & Objects/TV#2      - 231 -


             См. также: TMenuView.Done, процедуру DisposeMenu


             Draw
                  procedure Draw; virtual;

             Переопределяемость: используется редко.

             Отображает  строку  меню, используя назначенную по умолчанию
        палитру.  Чтобы  установить  для меню правильные значения цветов,
        считываются поля Name и Disabled каждой записи TMenuItem в связа-
        нном списке. Текущий (подсвеченный) элемент Current подсвечивает-
        ся.


             GetItemRect
                  procedure GetItemRect(Item: PMenuItem;
                                                var R: TRect); virtual;

             Переопределяемость: не переопределяется.

             Переопределяет абстрактный метод в TMenuView.  Возвращает  в
        параметре   R  прямоугольник,  занятый  текущим  элементом  меню.
        HandleEvent использует GetItemRect для определения  того,  нажата
        ли кнопки "мыши" на данном пункте меню.

             См. также: TMenuView.GetItemRect


                                      Палитра
        -----------------------------------------------------------------

             Строки меню, как и все отображаемые элементы меню, для отоб-
        ражения  2-7  элементов  стандартной палитры программы используют
        назначенную по умолчанию палитру CMenuView.

                                 1    2    3    4    5    6
                              ╔════╤════╤════╤════╤════╤════╗
                CMenuView     ║  2 │  3 │  4 │  5 │  6 │  7 ║
                              ╚══╤═╧══╤═╧══╤═╧══╤═╧══╤═╧══╤═╝
                                 │    │    │    │    │    │
        Обычный текст  ──────────┘    │    │    │    │    └── Выбранная
        Текст запрещен ───────────────┘    │    │    │     клавиша
        Текст клавиши  ────────────────────┘    │    │     активации
        активации                               │    └── Выбранный зап-
                                                │        рещенный текст
                                                └───── Выбранный обычный
                                                       текст




         B.Pascal 7 & Objects/TV#2      - 232 -

         TMenuBox                                                   Menu
        -----------------------------------------------------------------

             Объект  TMenuBox  представляет  собой вертикальное меню. Оно
        может  содержать произвольный список выбираемых действий, включая
        элементы-подменю.  Как  и в строке меню, для указания недоступных
        элементов  используется  отметка  цветом. Вертикальные меню могут
        реализовываться  как  подменю строки меню или других вертикальных
        меню, либо использоваться в качестве всплывающих меню.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect; AMenu: PMenu;
                                                AParentMenu: PMenuView);

             Init  настраивает  параметр  Bounds  таким образом, чтобы он
        соответствовал  длине и высоте элементов в AMenu, а затем создает
        вертикальное  меню,  вызывая  конструктор Init, унаследованный от
        TMenuView.

             Бит ofPreProcess поля Options устанавливается таким образом,
        что  будут  работать  оперативные клавиши. State устанавливается,
        чтобы  включить ofShadow. Поле Menu устанавливается равным AMenu,
        что обеспечивает выбор элементов меню. Поле ParentMenu устанавли-
        вается равным AParentMenu.

             См. также: TMenuView.Init, флаги состояния sfXXXX, флаги па-
        раметров ofXXXX, TMenuView.Menu, TMenuView.ParentMenu.


             Draw
                  procedure Draw; virtual;

             Переопределение: переопределяется редко.

             Отображает  окно меню с рамкой и пункты меню, используя наз-
        наченные по умолчанию цвета.


             GetItemRect
                  procedure GetItemRect(Item:  PMenuItem;
                                                var R: TRect); virtual;

             Переопределение: используется редко.

             Переопределяет  абстрактный  метод  в  TMenuView. Возвращает
        прямоугольник,  занимаемый  данным  элементом  меню.  HandleEvent
        вызывает  GetItemRect  для определения того, произошло ли нажатие
        кнопки "мыши" над данным пунктом меню.


         B.Pascal 7 & Objects/TV#2      - 233 -

             См. также: TMenuView.GetItemRect


                                      Палитра
        -----------------------------------------------------------------

             Вертикальные меню, как и все отображаемые элементы меню, для
        отображения 2-7 элементов стандартной палитры программы использу-
        ют назначенную по умолчанию палитру CMenuView.

                                 1    2    3    4    5    6
                              ╔════╤════╤════╤════╤════╤════╗
                CMenuView     ║  2 │  3 │  4 │  5 │  6 │  7 ║
                              ╚══╤═╧══╤═╧══╤═╧══╤═╧══╤═╧══╤═╝
                                 │    │    │    │    │    │
        Обычный текст  ──────────┘    │    │    │    │    └── Выбранная
        Текст запрещен ───────────────┘    │    │    │     клавиша
        Текст клавиши  ────────────────────┘    │    │     активации
        активации                               │    └── Выбранный зап-
                                                │      рещенный текст
                                                └───── Выбранный обычный
                                                       текст



         B.Pascal 7 & Objects/TV#2      - 234 -

         Тип TMenuItem                                          Menus
        -----------------------------------------------------------------

             Описание:  TMenuItem = record
                           Next: PMenuItem;
                           Name: PString;
                           Command: Word;
                           Disabled: Boolean;
                           KeyCode: Word;
                           HelpCtx: Word;
                           case Integer of
                             0: (Param: PString);
                             1: (SubMenu: PMenu);
                           end;
                         end;

             Функция:  Тип  TMenuItem  представляет  собой  элемент меню,
        который  может быть обычным элементом, подменю или строкой-разде-
        лителем. Next указывает на следующий TMenuItem в списке элементов
        меню, или равен nil, если это последний элемент. Поле Name указы-
        вает  на строку, содержащую имя элемента меню или равно nil, если
        элемент  меню  является  строкой-разделителем.  Command  содержит
        событие-команду  (см.  константы cmXXXX), генерируемую при выборе
        элементов меню или 0, если элемент меню представляет собой подме-
        ню.  Disabled  равно  True, если пункт меню недоступен, и False в
        противном  случае. KeyCode содержит скан-код оперативной клавиши,
        связанной  с  пунктом  меню или 0, если с пунктом меню не связана
        оперативная  клавиша.  HelpCtx содержит номер контекста подсказки
        пункта  меню  (значение  hcNoContext указывает на то, что элемент
        меню не имеет контекста подсказки). Если пункт меню - это обычный
        пункт,  то  поле  Param  содержит  указатель  на строку параметра
        (отображаемый справа от элемента в TMenuBox) или nil,  если  эле-
        мент не имеет строки параметров.  Если элемент меню - это подменю
        (Command = 0), то Submenu указывает на структуру подменю.

             Записи TMenuItem создаются с использованием функций NewItem,
        NewLine и NewSubmenu.

             См. также: TMenu, TMenuView, NewItem, NewLine, NewSubMenu


         Тип TMenuStr                                           Menus
        -----------------------------------------------------------------

             Описание: TMenuStr = string[31];

             Функция:  Тип  строки,  используемый  NewItem  и NewSubMenu.
        Максимальный размер заголовка элемента меню составляет 31 символ.

             См. также: NewItem, NewSubMenu




         B.Pascal 7 & Objects/TV#2      - 235 -

         TMenuView                                                  Menu
        -----------------------------------------------------------------

             TMenuView обеспечивает абстрактный тип меню, производными от
        которого  являются  полосы  меню и вертикальные меню (всплывающие
        или опускающихся). Возможно, Вам никогда не потребуется самостоя-
        тельно создавать экземпляр TMenuView.


                                        Поля
        -----------------------------------------------------------------

             Current                                  (только для чтения)
                  Current: PMenuItem;

             Указатель на выбранный в текущий момент пункт меню.


             Menu                                     (только для чтения)
                  Menu: PMenu;

             Указатель на запись TMenu для данного меню, которая содержит
        связанный  список  элементов меню. Указатель Menu позволяет полу-
        чить  доступ  ко  всем полям элементов меню данного отображаемого
        элемента меню.

             См. также:  TMenuView.FindItem,  TMenuView.GetItemRect,  тип
        TMenu


             ParentMenu                               (только для чтения)
                  ParentMenu: PMenuView;

             Указатель  на  отображаемый  элемент  меню, который является
        владельцем данного меню. Заметим, что TMenuView не является груп-
        пой.  Принадлежность здесь представляет собой гораздо более прос-
        тую концепцию, чем принадлежность в TGroup, и позволяет использо-
        вать  вложенные  меню:  выбирать подменю и возвращаться обратно в
        порождающие меню. Например, выбор в строке меню обычно приводит в
        выводу  "опускающегося"  меню.  Строка  меню представляет собой в
        этом случае порождающее меню для вертикального меню.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect);

             Создает  отображаемый элемент меню с размерами Bounds, вызы-
        вая  конструктор  Init,  унаследованный  от  TView. Устанавливает
        EventMask  равным  evBroadcast.  Данный метод не предназначен для
        создания экземпляров объектов TMenuView. Он разработан скорее для

         B.Pascal 7 & Objects/TV#2      - 236 -

        вызова порожденными типами, такими, как TMenuBar и TMenuBox.

             См.   также:    TView.Init,   evBroadcast,    TMenuBar.Init,
        TMenuBox.Init.


             Load
                  constructor TMenuView.Load(var S: TStream);

             Создает  объект  отображаемого элемента меню и загружает его
        из  потока S, вызывая сначала конструктор Load, унаследованный от
        TView, а затем считывая элементы списка меню.

             См. также: TView.Load, TMenuView.Store


             Execute
                  function Execute: Word; virtual;

             Переопределение: не переопределяется.

             Запускает отображаемый элемент меню до тех пор, пока пользо-
        ватель  не выберет пункт меню или не завершит процесс. Возвращает
        команду,  присвоенную  выбранному  пункту  меню, или 0, если меню
        было  закрыто. Данный метод не должен вызываться иначе, кроме как
        ExecView.

             См. также: TGroup.ExecView


             FindItem
                  function FindItem(Ch: Char): PMenuItem;

             Возвращает  указатель на элемент меню, имеющий клавишу акти-
        вации  Ch  (подсвеченный символ). Если такой пункт меню не найден
        или  данный пункт меню недоступен, возвращает значение nil. Заме-
        тим, что регистр символа Ch (строчная или прописная буква) значе-
        ния не имеет.


             GetItemRect
                  procedure GetIterRect(Item: PMenuItem;
                                                var R: TRect); virtual;

             Переопределение: переопределяется всегда.

             Данный  метод возвращает в R прямоугольник, занимаемый теку-
        щим  пунктом  меню. Он используется для определения того, была ли
        кнопка  "мыши"  нажата  на  данном пункте меню. Чтобы отвечать на
        события  "мыши",  потомки  TMenuView должны переопределять данный
        метод.

             См. также: TMenuBar.GetItemRect, TMenuBox.GetItemRect

         B.Pascal 7 & Objects/TV#2      - 237 -



             GetHelpCtx
                  function GetHelpCtx: Word; virtual;

             Переопределение: иногда переопределяется.

             По  умолчанию данный метод возвращает контекст подсказки для
        данного пункта меню. Если это hcNoContext, то проверяется текущий
        контекст  в  порождающем меню. Если порождающее меню отсутствует,
        то GetHelpCtx возвращает hcNoContext.

             См. также: константы контекста подсказки hcXXXX


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределение: иногда переопределяется.

             Возвращает  указатель  на  заданную  по  умолчанию   палитру
        CMenuBar.


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределение: не переопределяется.

             Вызывается  каждый  раз, когда необходимо обработать событие
        меню.  Определяет,  какой  пункт меню был выбран с помощью "мыши"
        или   клавиатуры   (включая  оперативные  клавиши),  и  с помощью
        PutEvent   генерирует   соответствующую  команду-событие.   Также
        отвечает  на  cmCommandSetChanged,  при  необходимости   обновляя
        активные пункты.

             См. также: TView.HandleEvent, TViewPutEvent


             HotKey
                  function HotKey(KeyCode: Word): PMenuItem;

             Возвращает  указатель на пункт меню, связанный с оперативной
        клавишей,  определяемой параметром KeyCode. Если такого пункта не
        существует  или  пункт  недоступен,  то  возвращает значение nil.
        Оперативные  клавиши  представляют  собой  обычно  функциональные
        клавиши  или  комбинации  с  клавишей  Alt, определяемые вызовами
        NewItem  и  NewSubMenu  в  InitMenuBar. Данный метод используется
        HandleEvent  для определения того, выбирается ли при нажатии кла-
        виши пункт меню.


             NewSubView

         B.Pascal 7 & Objects/TV#2      - 238 -

                  function NewSubView (var Bounds: TRect;
                            AMenu: PMenu; AParentMenu: PMenuView):
                                                PMenuView; virtual;

             Создает новое вертикальное меню с заданными значениями пара-
        метров  Bounds,  AMenu  и  AParentMenu, и возвращает указатель на
        него.


             Store
                  procedure Store(var S: TStream);

             Сохраняет  объект  отображаемого  элемента  меню  (и все его
        подменю)  в потоке S, вызывая сначала метод Store, унаследованный
        от TView, а затем записывает в поток каждый пункт меню.

             См. также: TMenuView.Load


                                      Палитра
        -----------------------------------------------------------------

             Все  отображаемые элементы меню используют для отображения 2
        -  7 записей стандартной палитры прикладной программы назначенную
        по умолчанию палитру CMenuView.

                                 1    2    3    4    5    6
                              ╔════╤════╤════╤════╤════╤════╗
                CMenuView     ║  2 │  3 │  4 │  5 │  6 │  7 ║
                              ╚══╤═╧══╤═╧══╤═╧══╤═╧══╤═╧══╤═╝
                                 │    │    │    │    │    │
        Обычный текст  ──────────┘    │    │    │    │    └── Выбранные
        Текст недоступный─────────────┘    │    │    │     оперативные
        Текст оперативной──────────────────┘    │    │     клавиши
              клавиши                           │    └── Выбранный
                                                │     недоступный текст
                                                └──── Выбранный обычный
                                                      текст



         B.Pascal 7 & Objects/TV#2      - 239 -

         Объект TMonoSelector                                   ColorSel
        -----------------------------------------------------------------

             Отображаемый  элемент монохромного селектора позволяет поль-
        зователю  выбирать монохромные видео-атрибуты для выводимых пунк-
        тов  способом,  сходным  с  тем, каким выбираются соответствующие
        цвета для цветного дисплея. Возможные атрибуты: обычный, выделен-
        ный,  подчеркнутый  и  инверсный. Несмотря на то, что монохромный
        селектор  похож на кнопки с зависимой фиксацией, на самом деле он
        происходит непосредственно от TCluster.

             Подробности  о TMonoSelector включены в оперативную подсказ-
        ку.


         TMultiCheckBoxes                                       Dialogs
        -----------------------------------------------------------------


                                        Поля
        -----------------------------------------------------------------

             Flags
                  Flags: Word;

             Flags  представляет  собой  битовое поле, содержащее одну из
        констант cfXXXX.

             См. также: константы cfXXXX


             SelRange
                  SelRange: Byte;

             SelRange  представляет собой действительное число состояний,
        которое может иметь кластер многопозиционных кнопок с независимой
        фиксацией.


             States
                  States: PString

             States указывает на строку, содержащую символы, представляю-
        щие каждое из возможных состояний многопозиционной кнопки с неза-
        висимой фиксацией.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds:  TRect; AStrings:  PSItem;
                                      ASelRange: Byte; AFlags: Word;

         B.Pascal 7 & Objects/TV#2      - 240 -

                                                const AStates: String);

             Создает кластер многопозиционных кнопок с независимой фикса-
        цией,   вызывая  сначала  конструктор  Init,  унаследованный   от
        TCluster, а затем устанавливает  значения полей SelRange и  Flags
        равными  значениям,  переданным  в  параметрах ASelRange и AFlags
        соответственно, и выделяет динамическую память под копию  AStates
        и присваивает это значение States.

             ASelRange  показывает  число  состояний, которое может иметь
        каждая  кнопка  с независимой фиксацией. AFlags является одной из
        констант  cfXXXX,  указывающих, сколько бит из Value представляют
        каждую  многопозиционную  кнопку  с независимой фиксацией. AState
        содержит символ, показываемый для каждого возможного состояния.

             См. также: TCluster.Init


             Load
                  constructor Load(var S: TStream);

             Создает  и загружает кластер многопозиционных кнопок с неза-
        висимой  фиксацией из потока S, вызывая сначала конструктор Load,
        унаследованный  от  TCluster,  а  затем  считывая значения полей,
        введенных TMultiCheckBoxes.

             См. также: TCluster.Load


             Done
                  destructor Done; virtual;

             Освобождает  память из-под объекта кластера многопозиционных
        кнопок  с  независимой фиксацией, освобождая сначала динамические
        строки States, а затем вызывая деструктор Done, унаследованный от
        TCluster.


             DataSize
                  function DataSize: Word; virtual;

             Возвращает  размер  данных,  переданных  GetData  и SetData,
        который равен SizeOf (Longint).

             См. также: TMultiChechBoxes.GetData, TMultiCheckBoxes.SetData


             Draw
                  procedure Draw; virtual;

             Переопределяемость: никогда не используется.

             Рисует  кластер многопозиционных кнопок с независимой фикса-

         B.Pascal 7 & Objects/TV#2      - 241 -

        цией,  изображая каждую кнопку по порядку, используя ту же рамку,
        что  и для обычной кнопки с независимой фиксацией, но с использо-
        ванием  символов  из  States  для  представления состояния каждой
        кнопки взамен обычных 'X', или пустого поля.


             GetData
                  procedure GetData (var Rec); virtual;

             Преобразует Rec в тип Longint и копирует в него Value.


             MultiMark
                  function MultiMark (Item: Integer): Byte; virtual;

             Возвращает  состояние кнопки с независимой фиксацией с номе-
        ром Item в кластере.


             Press
                  procedure Press (Item: Integer); virtual;

             Изменяет  состояние  многопозиционной  кнопки  с независимой
        фиксацией  с номером Item в кластере. В отличие от обычных кнопок
        с  независимой фиксацией, которые просто изменяют состояние вклю-
        чено/выключено,  многопозиционные кнопки циклически изменяют сос-
        тояние между всеми возможными состояниями.


             SetData
                  procedure SetData (var Rec); virtual;

             Преобразует  Rec  в  тип  Longint  и копирует его значение в
        Value, после чего вызывает DrawView для перерисовки кнопок, чтобы
        отразить их новое состояние.


             Store
                  procedure Store(var S: TStream);

             Записывает  кластер многопозиционных кнопок в поток S, вызы-
        вая  сначала  метод  Store,  унаследованный  от TCluster, а затем
        записывает поля, введенные TMultiCheckBoxes.

             См. также: TCluster.Store




         B.Pascal 7 & Objects/TV#2      - 242 -

         Тип TNode                                              Outline
        -----------------------------------------------------------------

             Описание:
                  TNode = record
                       Next:     PNode;
                       Text:     PString;
                       ChildList:PNode;
                       Expanded: Boolean;
                  end;

             Функция:  Объекты  иерархической структуры используют записи
        типа  TNode  для  хранения  списков связанных строк, составляющих
        иерархическую структуру. Каждая узловая запись содержит текст для
        этого  элемента иерархической структуры в ее поле Text. ChildList
        указывает  на  первый элемент в списке подчиненных узлов или nil,
        если  нет  элементов,  подчиненных  этому узлу. Next указывает на
        следующий узел того же уровня, что и текущий. Expanded равно True
        в случае, если отображаемый элемент иерархической структуры пока-
        зывает   подчиненные   отображаемые  элементы,  перечисленные   в
        ChildList, или False, если подчиненные узлы невидимы.

             При создании Вашего собственного списка иерархической струк-
        туры  необходимо заводить новые узлы с помощью функции NewNode, а
        избавляться от них с помощью DisposeNode.

             См. также: процедуру DisposeNode, функцию NewNode


─────────────────────────────────────────────────────────────────────────
         TObject                                                 Objects
        -----------------------------------------------------------------

             TObject представляет собой начальную точку иерархии объектов
        Turbo  Vision. Как базовый объект, он не имеет порождающих объек-
        тов,   но  имеет  много  порожденных.  Фактически, за исключением
        TPoint   и   TRect,   все   стандартные   объекты  Turbo   Vision
        являются в итоге  производными  от TObject. Любой объект, который
        использует средства  потоков Turbo Vision, должен отлеживать свою
        "родословную" от TObject.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init;

             Выделяет  для  объекта  память  в динамически распределяемой
        области  и  заполняет  ее нулями. Вызывается всеми конструкторами
        производных объектов.

             Заметим,  что TObject.Init будет обнулять все поля потомков,
        поэтому  Вы должны всегда вызывать TObject.Init перед инициализа-

         B.Pascal 7 & Objects/TV#2      - 243 -

        цией любых полей в конструкторах производных объектов.


             Done
                  destructor Done; virtual;

             Выполняет  необходимую  очистку  и  освобождение  памяти для
        динамических объектов.


             Free
                  procedure Free;

             Уничтожает объект и вызывает деструктор Done.




         B.Pascal 7 & Objects/TV#2      - 244 -

         TOutLine                                               OutLine
        -----------------------------------------------------------------

             TOutLine  реализует  простой,  но полезный тип визуализатора
        иерархических структур. Он предполагает, что иерархическая струк-
        тура представляет собой связанный список записей типа TNode, так,
        что  каждый узел состоит из строки текста, указателя на порожден-
        ные узлы и указателя на следующий узел того же уровня.


                                        Поле
        -----------------------------------------------------------------
             Root
                  Root: PNode;

             Указывает на корневой узел дерева иерархии.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init (var Bounds: TRect;
                                 AHScrollBar, AVScrollBar: PScrollBar;
                                                          ARoot: PNode);

             Создает  отображаемый элемент иерархической структуры, пере-
        давая  Bounds, AHScrollBar и AVScrollBar конструктору Init, унас-
        ледованному от TOutlineViewer. Устанавливает Root равным ARoot, а
        затем вызывает Update, для установки пределов прокрутки отобража-
        емого элемента, основываясь на данных, содержащихся в иерархичес-
        кой структуре.

             См. также: TScroller.Init


             Done
                  destructor Done; virtual;

             Уничтожает  отображаемый  элемент  иерархической  структуры,
        уничтожая  сначала корневой узел, который последовательно уничто-
        жает  все  порожденные  узлы,  а  затем вызывает деструктор Done,
        унаследованный от TScroller.

             См. также: TScroller.Done


             Adjust
                  procedure Adjust (Node: Pointer;
                                           Expand: Boolean); virtual;

             Устанавливает  значение  поля Expanded из Node равным значе-
        нию, переданному в Expand. Если Expand равно True, то порожденные

         B.Pascal 7 & Objects/TV#2      - 245 -

        узлы,  связанные  с  Node,  делаются  видимыми. Если Expand равно
        False, то порожденные Node узлы делаются невидимыми.


             GetRoot
                  function GetRoot: Pointer; virtual;

             Возвращает  Root, указывающий на вершину списка узлов иерар-
        хии.


             GetNumChildren
                  function GetNumChildren (Node: Pointer): Integer;
                                                               virtual;

             Возвращает количество узлов в списке ChildList узла Node или
        ноль в случае, если ChildList равно nil.


             GetChild
                  function GetChild (Node: Pointer;
                                           I: Integer): Pointer; virtual;

             GetText
                  function GetText (Node: Pointer): String; virtual;

             Возвращает строку, на которую указывает поле Text узла Node.


             HasChildren
                  function HasChildren (Node: Pointer): Boolean; virtual;

             Возвращает  True в случае, если ChildList узла Node не равен
        nil; в противном случае возвращает False.


             IsExpanded
                  function IsExpanded (Node: Pointer): Boolean; virtual;

             Возвращает значение поля Expanded узла Node.




         B.Pascal 7 & Objects/TV#2      - 246 -

         TOutlineViewer                                         Outline
        -----------------------------------------------------------------

             Тип объекта визуализатора иерархических структур обеспечива-
        ет абстрактные методы для отображения, раскрытия и прохождения по
        элементам  иерархической  структуры.  TOutlineViewer,  однако, не
        делает   предположений    об   элементах    структуры.    Потомки
        TOutlineViewer,  такие,   как TOutline, отображают  иерархические
        структуры со специфическими типами элементов.


                                        Поле
        -----------------------------------------------------------------

             Foc
                  Foc: Integer;

             Указывает номер активного узла иерархической структуры.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init (var Bounds: TRect;
                                 AHScrollBar, AVScrollBar: PScrollBar);

             Создает  объект визуализатора иерархической структуры, вызы-
        вая  сначала конструктор Init, унаследованный от TScroller, пере-
        давая  Bounds,  AHScrollBar и AVScrollBar. Устанавливает GrowMode
        равным gfGrowHiX + gfGrowHiY и устанавливает Foc равным нулю.

             См. также: TScroller.Init


             Adjust
                  procedure Adjust (Node: Pointer;
                                           Expand: Boolean); virtual;

             Adjust  представляет собой абстрактный метод, которые порож-
        денные типы визуализатора иерархических структур должны переопре-
        делять   для   отображения порожденных  узлов в  случае равенства
        Expand  True,  и  скрыть  их  в  случае  равенства  Expand False.
        Вызывается  в случае, когда пользователь раскрывает или  скрывает
        содержимое  узла  Node.   Если  HasChildren  возвращает для  Node
        значение False, то Adjust  никогда не будет вызываться  для этого
        узла.

             См. также: TOutlineViewer.HasChildren


             CreateGraph
                  function CreateGraph (Level: Integer; Lines: Longint;

         B.Pascal 7 & Objects/TV#2      - 247 -

                                Flags: Word; LevWidth, EndWidth: Integer;
                                            const Chars: String): String;

             Выводит   графическую  строку,  пригодную  для  возврата  из
        GetGraph.  Level  указывает   уровень  иерархической   структуры.
        Lines представляет  собой набор бит, описывающих уровень, имеющий
        метку  "продолжение"    (обычно    это    вертикальная    линия).
        Например, если установлен  бит   3,  то  уровень   3 продолжается
        за пределы этого уровня.

             Flags  дает  дополнительную информацию о том, как изображать
        окончания  графика  (см. константы ovXXXX). LevWidth представляет
        собой  число символов, которое надо отступить для каждого уровня.
        EndWidth представляет собой длину последних символов.

             График делится на две части: метки уровня и окончание графи-
        ка узлов. Метки уровня состоят из символа Метки Уровня, разделен-
        ного Заполнителем Уровня. То, какие метки присутствуют, определя-
        ется Lines.

             Окончание  графика  создается  помещением одного из символов
        Конец  первого, за которым следуют EndWidth - 4 символов Заполни-
        теля  конца,  за  которыми  следует  символ Конец порожденного, а
        затем - символ Скрыть/Раскрыть. Если EndWidth равно 2, то исполь-
        зуются  символы  Конец  первого и Скрыть/Раскрыть.  Если EndWidth
        равно 1, то используется только символ Скрыть/Раскрыть. Flags оп-
        ределяет символы, которые будут выбираться.


         B.Pascal 7 & Objects/TV#2      - 248 -


             В строке  Chars содержатся следующие символы:


                     1    2     3     4    5   6    7    8
                   ╔════╤════╤═════╤═════╤═══╤═════╤═══╤════╗
                   ║    │ │  │  ├  │  └  │ - │  -  │ + │  - ║
                   ╚═╤══╧═╪══╧═╤╧══╧══╪══╧═╤═╧══╤══╧═╤═╧═╤══╝
        Заполнитель  │    │    │      │    │    │    │   └ Раскрытый
        уровня  ─────┘    │    │      │    │    │    │
                          │    │      │    │    │    │
        Метка             │    │      │    │    │    └─── Скрытый
        уровня ───────────┘    │      │    │    │
                               │      │    │    │
        Конец                  │      │    │    │           Конец
        первого                │      │    │    └───────────порожденного
        (не последний) ────────┘      │    │
                                      │    │                  Заполнитель
        Конец                         │    └───────────────── конца
        первого                       │
        (последний) ──────────────────┘


        -----------------------------------------------------------------
          Символ      Обычный вид     Описание
        -----------------------------------------------------------------
          Заполнитель         ' '     Используется между маркерами уровня
          уровня

          Метка                '│'    Используется для отметки уровней,
          уровня                      активных в настоящий момент.

          Конец                '├'    Используется в качестве первого
          первого                     символа конечной части изображения
          (не последнего              узла в случае, если узел не является
          порожденного)               последним порожденным узлом.

          Конец                '└'    Используется в качестве первого
          первого                     символа конечной части изображения
          (последнего                 узла в случае, если узел является
          порожденного)               последним порожденным узлом.

          Заполнитель          '-'    Используется в качестве заполнителя
          конца                       концевой части изображения узла

          Конец                '-'    В случае EndWidth>LevWidth этот
          порожденного                символ будет помещен в верхнюю
                                      часть маркеров для следующего
                                      уровня. Если он используется, то
                                      это обычно T.

          Скрытый              '+'    Помещается в качестве последнего
                                      символа последнего узла в случае,

         B.Pascal 7 & Objects/TV#2      - 249 -

                                      если уровень имеет потомков, и они
                                      не раскрыты.

          Раскрытый            '-'    Помещается в качестве последнего
                                      символа последнего узла в случае,
                                      если уровень имеет потомков, и они
                                      раскрыты.
        -----------------------------------------------------------------

             Например,  GetGraph вызывает CreateGraph со следующими пара-
        метрами:

             CreateGraph (Level, Lines, Flags, 3, 3,
                                      ' '#179#195#192#196#196'+'#196);

             Для использования двойной линии вместо одинарной:

             CreateGraph (Level, Lines, Flags, 3, 3,
                                      ' '#186#204#200#205#205'+'#205);

             Для того, чтобы порожденные линии выходили над текстом вмес-
        то того, чтобы выходить под ним, используйте следующий вызов:

             CreateGraph (Level, Lines, Flags, 2, 4,
                                      ' '#179#195#192#196#194'+'#196);


             Draw
                  procedure Draw; virtual;

             Вызывается для изображения отображаемого элемента иерархиче-
        ской  структуры. Draw вызывает GetGraph для получения графической
        части структуры, а затем добавляет строку, возвращенную GetText.

             Строка,  содержащая  активный  узел  структуры, изображается
        более  отчетливым  цветом. Узлы, потомки которых не отображаются,
        показываются выделенными.

             См. также: TOutlineViewer.GetGraph, TOutlineViewer.GetText


             ExpandAll
                  procedure ExpandAll (Node: Pointer);

             Если узел Node имеет порожденные узлы, то ExpandAll последо-
        вательно  раскрывает  Node,  вызывая  Adjust с параметром True, а
        затем  раскрывает  все  порожденные  узлы,  вызывая ExpandAll для
        каждого из них.

             См. также: TOutlineViewer.Adjust


             FirstThat

         B.Pascal 7 & Objects/TV#2      - 250 -

                  function FirstThat (Test: Pointer): Pointer;

             FirstThat последовательно проходит по узлам структуры, вызы-
        вая  функцию, на которую указывает Test, до тех пор, пока Test не
        вернет True. Test должен указывать на локальную функцию типа far,
        имеющую следующий синтаксис:

             function MyIter (Cur: Pointer; Level, Position: Integer;
                                           Lines: LongInt; Flags: Word):
                                                          Boolean; far;

             Параметры означают следующее:

             Cur       Указатель на проверяемый узел.

             Level     Уровень узла (сколько узлов находится над ним),
                       отсчитываемый от  нуля. Может  быть использован  в
                       вызове GetGraph или CreateGraph.

             Position  Порядок узла, в котором он отображается. Может
                       использоваться  в  вызове  Focused  или  Selected.
                       Если находится в диапазоне, то Position -  Delta.Y
                       представляет  собой  положение,  в  котором   узел
                       изображается в отображаемом элементе.

             Lines     Биты, указывающие активные уровни. Может
                       использоваться в вызовах GetGraph или CreateGraph.
                       Указывает, какую  горизонтальную линию  необходимо
                       рисовать.

             Flags     Различные флаги рисования (см. константы ovXXXX).
                       Могут  использоваться  в   вызовах  GetGraph   или
                       CreateGraph.


             Focused
                  procedure Focused (I: Integer); virtual;

             Вызывается  в каждом случае, когда узел становится активным.
        Параметр I указывает положение узла структуры, который стал акти-
        вным. По умолчанию Focused просто устанавливает Foc равным I.


             ForEach
                  function ForEach (Action: Pointer): Pointer;

             Проходит  последовательно по всем узлам. Action указывает на
        локальную процедуру типа far, которую ForEach вызывает для каждо-
        го  узла иерархической структуры. Синтаксис этой итеративной про-
        цедуры следующий:

             procedure MyIter (Cur: Pointer; Level, Position: Integer;
                                      Lines: LongInt; Flags: Word); far;

         B.Pascal 7 & Objects/TV#2      - 251 -


             Параметры означают следующее:

             Cur       Указатель на проверяемый узел.

             Level     Уровень узла (сколько узлов находится над ним),
                       отсчитываемый от нуля.  Может использоваться в вы-
                       зове GetGraph или CreateGraph.

             Position  Порядок узла, в котором он отображается. Может
                       использоваться  в  вызове  Focused  или  Selected.
                       Если находится в диапазоне, то Position -  Delta.Y
                       представляет  собой  положение,  в  котором   узел
                       изображается в отображаемом элементе.

             Lines     Биты, указывающие активные уровни. Может
                       использоваться в вызовах GetGraph или CreateGraph.
                       Указывает, какую  горизонтальную линию  необходимо
                       рисовать.

             Flags     Различные флаги рисования (см. константы ovXXXX).
                       Могут  использоваться  в   вызовах  GetGraph   или
                       CreateGraph.


             GetChild
                  function GetChild (Node: Pointer; I: Integer):
                                                     Pointer; virtual;

             GetChild представляет собой абстрактный метод, который поро-
        жденные типы визуализаторов иерархических структур должны переоп-
        ределять  для  возврата  указателя  на  I-го потомка данного узла
        Node.

             Если  HasChildren  возвращает  False, что означает тот факт,
        что  Node  не имеет порожденных узлов, то GetChild для этого узла
        вызываться не будет. Можно смело надеяться на то, что если визуа-
        лизатор  иерархической  структуры вызывает GetChild, то этот узел
        имеет по крайней мере I порожденных узлов.

             См. также: TOutlineViewer.HasChildren


             GetGraph
                  function GetGraph (Level: Integer;
                                 Lines: Longint; Flags: Word): String;

             Возвращает строку графических символов, которые изображаются
        слева  от  текста,  возвращенного  GetText. По умолчанию GetGraph
        вызывает  CreateGraph  со  значениями символов, установленными по
        умолчанию.  Переопределять GetGraph нужно лишь в том случае, если
        Вы хотите изменить внешний вид отображаемого элемента иерархичес-
        кой структуры.

         B.Pascal 7 & Objects/TV#2      - 252 -


             Например, вместо вызова для отображения иерархии CreateGraph
        Вам может понадобиться вернуть строку символов для простого выра-
        внивания текста на заданные для каждого уровня величины.


             GetNumChildren
                  function GetNumChildren (Node: Pointer):
                                                     Integer; virtual;

             GetNumChildren представляет собой абстрактный метод, который
        порожденные  типы  визуализаторов  иерархических  структур должны
        переопределять  для возврата количества порожденных узлов в Node.
        Если  HasChildren  возвращает  для  Node False, то GetNumChildren
        никогда не будет вызываться.

             См. также: TOutlineViewer.HasChildren


             GetNode
                  function GetNode (I: Integer): Pointer;

             Возвращает  указатель  на  I-й  узел в структуре; т.е. узел,
        изображаемый в I линиях от верхней части всей структуры.


             GetPalette
                  function GetPalette: PPalette; virtual;

             Возвращает  указатель  на установленную по умолчанию палитру
        иерархических структур, COutlineViewer.


             GetRoot
                  function GetRoot: Pointer; virtual;

             GetRoot представляет собой абстрактный метод, который порож-
        денные  типы визуализаторов иерархических структур должны переоп-
        ределять для возврата указателя на корневой элемент структуры.


             GetText
                  function GetText (Node: Pointer): String; virtual;

             GetText представляет собой абстрактный метод, который порож-
        денные  типы визуализаторов иерархических структур должны переоп-
        ределять для возврата текста Node.


             HandleEvent
                  procedure HandleEvent (var Event: TEvent); virtual;

             Обрабатывает    большую    часть  событий,   вызывая   метод

         B.Pascal 7 & Objects/TV#2      - 253 -

        HandleEvent,   унаследованный   от   TScroller,   а  обрабатывает
        некоторые события от мыши и клавиатуры.


             HasChildren
                  function HasChildren (Node: Pointer): Boolean; virtual;

             HasChildren  представляет  собой  абстрактный метод, который
        порожденные  типы  визуализаторов  иерархических  структур должны
        переопределять для возврата True в случае, если Node имеет порож-
        денные узлы, и False, если не имеет.

             Если  HasChildren  возвращает False для данного узла, то для
        этого  узла  никогда  не  вызываются  следующие  функции: Adjust,
        ExpandAll, GetChild, GetNumChildren и IsExpanded.

             Эти  методы  могут предполагать, что коль скоро они вызваны,
        существуют порожденные узлы, с которыми они будут работать.


             IsExpanded
                  function IsExpanded (Node: Pointer): Boolean; virtual;

             IsExpanded  представляет  собой  абстрактный  метод, который
        порожденные  типы  визуализаторов  иерархических  структур должны
        переопределять  для возврата True в случае, если порожденные узлы
        Node  следует  изображать.  Если  HasChildren возвращает для Node
        False, то IsExpanded никогда не будет вызываться для этого узла.


             IsSelected
                  function IsSelected (I: Integer): Boolean; virtual;

             Возвращает  True  в  случае,  если узел выбран. По умолчанию
        TOutlineViewer предполагает, что иерархическая структура допуска-
        ет  выбор  одного элемента, поэтому она возвращает True в случае,
        если  Node является Focused. Для реализации множественного выбора
        необходимо переопределять IsSelected.


             Selected
                  procedure Selected (I: Integer); virtual;

             Вызывается  при  каждом выборе узла пользователем при помощи
        клавиатуры  или  мыши. Параметр I указывает положение в структуре
        вновь выбранного элемента.

             По  умолчанию  Selected  не  делает ничего; порожденные типы
        могут  переопределять Selected для выполнения определенных дейст-
        вий в ответ на выбор.


             SetState

         B.Pascal 7 & Objects/TV#2      - 254 -

                  procedure SetState (AState: Word;
                                           Enable: Boolean); virtual;

             Устанавливает  или  сбрасывает  флаги  состояния  AState для
        отображаемого элемента, вызывая метод SetState, унаследованный от
        TScroller.  Если  новое  состояние  включает изменение фокуса, то
        SetState вызывает DrawView для перерисовки структуры.

             См. также: TScroller.SetState


             Update
                  procedure Update;

             Обновляет  пределы  визуализатора  иерархических   структур.
        Предел  в вертикальном направлении представляет собой число узлов
        в структуре.  Предел в горизонтальном направлении - это длина са-
        мой длинной выводимой строки.

             Программа должна вызывать Update при каждом изменении данных
        в иерархической структуре. TOutlineViewer предполагает, что стру-
        ктура пуста, поэтому если при инициализации она становится непус-
        той,  то  необходимо в явном виде вызвать Update. Если при работе
        визуализатора  выводимые данные изменяются, то необходимо вызвать
        метод Update, унаследованный от DrawView.


                                      Палитра
        -----------------------------------------------------------------

             Объекты  визуализатора иерархических структур используют для
        отображения 6 - 8 записей стандартной палитры окна назначенную по
        умолчанию палитру COutlineViewer.

                                    1    2    3    4
                                 ╔════╤════╤════╤════╗
              COutlineViewer     ║  6 │  7 │  8 │  8 ║
                                 ╚══╤═╧══╤═╧══╤═╧══╤═╝
                                    │    │    │    │
           Обычный цвет   ──────────┘    │    │    └─── Цвет не раскрытого
           Цвет активного   ─────────────┘    └─────────Цвет выбранного




         B.Pascal 7 & Objects/TV#2      - 255 -

         Тип TPalette                                           Views
        -----------------------------------------------------------------

             Описание: TPalette = String;

             Функция:  Тип строки, используемый для описания палитр Turbo
        Vision.

             См. также: методы GetPalette


         TParamText                                              Dialogs
        -----------------------------------------------------------------

             Объект    TParamText    является  производным   от   объекта
        TStaticText,  который  для  форматированного  вывода   использует
        параметризованные текстовые строки, применяя для этого  процедуру
        FormatStr.


                                        Поля
        -----------------------------------------------------------------

             ParamCont
                  ParamCont: Integer;

             ParamCount  указывает  число   параметров,  содержащихся   в
        ParamList.

             См. также: TParamText.ParamList


             ParamList
                  ParamList: Pointer;

             ParamList-  это  нетипизированный  указатель  на  массив или
        запись указателей или значений типа LongInt, используемых в каче-
        стве параметров форматирования для текстовой строки.


                                       Методы
        -----------------------------------------------------------------

             Init

                  constructor Init(var Bounds: TRect; AText: String;
                                                AParamCount: Integer);

             Создает  объект  статического  текста,  вызывая  конструктор
        Init, унаследованный от TStaticText, с заданным параметром Bounds
        и  текстовой  строкой  AText,  которая  может содержать описатели
        формата в форме %[-][nnn]X, и будет замещаться параметрами, пере-
        данными  во  время  выполнения.  Число  параметров,  переданных в

         B.Pascal 7 & Objects/TV#2      - 256 -

        ParamCount, присваивается полю ParamCount.

             Описатели  формата  подробно  описаны в разделе, посвященном
        процедуре FormatStr.

             См. также: TStaticText.Init, процедуру FormatStr


             Load
                  constructor Load(var S: TStream);

             Создает объект TParamText и загружает его значение из потока
        S,   вызывая    сначала  конструктор   Load,  унаследованный   от
        TStaticText, а затем читает из потока поле ParamCount.

             См. также: TStaticText.Load


             DataSize
                  function DataSize: Word; virtual;

             Возвращает  размер  данных,  требуемый  параметрами объекта,
        т.е. ParamCount*SizeOf(LongInt).


             GetText
                  procedure GetText(var S: String); virtual;

             Создает  форматированную строку текста в S, выполняя объеди-
        нение параметров, заданных в ParamList, в текстовую строку Text с
        помощью вызова FormatStr(S, Text^, ParamList^).

             См. также: процедуру FormatStr


             SetData
                  procedure SetData(var Rec); virtual;

             Этот  отображаемый  элемент читает DataSize байт в ParamList
        из Rec.

             См. также: TView.SetData


             Store
                  procedure Store(var S: TStream);

             Сохраняет  объект  в  потоке S, вызывая сначала метод Store,
        унаследованный  от  TStaticText,  а  затем записывая в поток поле
        ParamCount.

             См. также: TStaticText.Store


         B.Pascal 7 & Objects/TV#2      - 257 -


                                      Палитра
        -----------------------------------------------------------------

             Объекты  TParamText используют палитру (назначенную по умол-
        чанию)  CStaticText,  для  отображения  6-го элемента стандартной
        палитры диалогового окна.

                                       1
                                     ╔═══╗
                     CStaticText     ║ 6 ║
                                     ╚═╤═╝
                           Текст  ─────┘




         B.Pascal 7 & Objects/TV#2      - 258 -

         TPoint                                                 Objects
        -----------------------------------------------------------------

             TPoint- это простой объект, представляющий точку на экране.


                                        Поля
        -----------------------------------------------------------------

             X
                  X: Integer;

             Х - это номер столбца точки на экране.


             Y
                  Y: Integer;

             Y - это номер строки точки на экране.


         B.Pascal 7 & Objects/TV#2      - 259 -

         Тип TPicResult                                         Validate
        -----------------------------------------------------------------

             Описание:
                  TPicResult = (prComplete, prIncomplete, prEmpty,
                            prError, prSyntax, prAmbiguous,
                            prIncompNoFill);

             Функция: TPicResult является типом результата, возвращаемого
        методом Picture, унаследованным от TPXPictureValidator.

             См. также: TPXPictureValidator.Picture


         TProgram                                                   App
        -----------------------------------------------------------------

             TProgram  обеспечивает  базовый  шаблон для всех стандартных
        программ  на Turbo Vision. Все такие программы должны порождаться
        от  TProgram  или  порожденной  от нее TApplication. TApplication
        отличается  от TProgram только установленными по умолчанию конст-
        руктором  и деструктором. Оба эти типа объектов созданы для боль-
        шей  гибкости  при создании нестандартных программ. В большинстве
        случаев Ваша программа будет порождаться от TApplication.

             Объект TProgram является производным от TGroup, поскольку он
        должен содержать объекты TDeskTop, TStatusLine и TMenuBar.

             Внимание!  Базовый  объект программы TProgram имеет в версии
        2.0 три новых метода. CanMoveFocus используется внутренне програ-
        ммой  для  определения  того, можно ли открыть окно в тот момент,
        когда  пользователь  находится  в окне определителя допустимости.
        Другие  два  метода представляют собой надежное средство введения
        окон и запуска диалоговых окон в оперативной области экрана.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init;

             Переопределяемость: иногда переопределяется.

             Устанавливает  глобальную  переменную  Application    равной
        @Self;  вызывает InitScreen для инициализации переменных, завися-
        щих  от  режима экрана; вызывает конструктор Init, унаследованный
        от TGroup, передавая прямоугольник Bounds, равный полному экрану;
        устанавливает   поле  State  равным  sfVisible  +  sfSelected   +
        sfFocused   +   sfModal +  sfExposed; устанавливает  поле Options
        равным 0.   Устанавливает   поле Buffer  равным адресу  экранного
        буфера, заданного в ScreenBuffer. Наконец, вызывает  InitDeskTop,
        InitStatusLine   и   InitMenuBar  и  вставляет  эти  отображаемые

         B.Pascal 7 & Objects/TV#2      - 260 -

        элементы в группу TProgram.

             См. также:        TGroup.Init,         TProgram.InitDeskTop,
        TProgram.InitStatusLine, TProgram.InitMenuBar


             Done
                  destructor Done; virtual;

             Переопределяемость: иногда переопределяется.

             Освобождает объекты DeskTop, MenuBar и StatusLine и устанав-
        ливает  глобальную  переменную Application равной nil, после чего
        вызывает деструктор Done, унаследованный от TGroup.

             См. также: TGroup.Done


             CanMoveFocus
                  function CanMoveFocus: Boolean;

             CanMoveFocus  возвращает значение True в случае, если опера-
        тивная  область  экрана может беспрепятственно изменить выбранное
        окно. Этот метод определяет, возможно ли сделать это путем вызова
        оперативной  областью  экрана  метода  Valid  ее активного окна с
        командой cmReleasedFocus.

             Если  окно  содержит недопустимые данные, которые, возможно,
        не будут признаны допустимыми в случае, если пользователь переме-
        стит  фокус из этого окна, то его метод Valid должен вернуть зна-
        чение False, тем самым препятствуя потере окном фокуса.


             ExecuteDialog
                  function ExecuteDialog (P: PDialog;
                                                Data: Pointer): Word;

             Вызывает ValidView с целью удостовериться в том, что P явля-
        ется  допустимым диалоговым окном, после чего запускает P в рабо-
        чей  области.   При  закрытии   диалогового  окна   пользователем
        ExecuteDialog уничтожает  диалоговое окно  и возвращает  команду,
        завершившую режимное  состояние,  возвращенную   ExexView.   Если
        ValidView  возвращает nil,  что означает,  что диалоговое окно не
        было допустимым, ExecuteDialog возвращает cmCancel.

             Если  значение Data отлично от nil, то ExecuteDialog автома-
        тически обрабатывает установку и считывание управляющих элементов
        диалогового  окна, используя в качестве записи данных Data^. Сна-
        чала  для  установки управляющих элементов ExecuteDialog вызывает
        P^.SetData.  Если  пользователь не прекращает работу с диалоговым
        окном,   то   перед   уничтожением   объекта   диалогового   окна
        ExecuteDialog вызывает P^.GetData  для считывания новых  значений
        управляющих элементов диалогового окна.

         B.Pascal 7 & Objects/TV#2      - 261 -


             Внимание! Необходимо вызывать метод объекта прикладной прог-
        раммы  ExecuteDialog,  а  не  непосредственно  Desktop^.ExecView.
        ExecuteDialog  представляет  собой  гораздо  более удобный способ
        обработки  установки  и считывания значений органов управления, и
        также имеет встроенную проверку допустимости.

             См. также: TProgram.ValidView, TGroup.ExecView


             GetEvent
                  procedure GetEvent(var Event: TEvent); virtual;

             Переопределяемость: используется редко.

             По  умолчанию  метод TView.GetEvent просто вызывает GetEvent
        своего владельца и, поскольку TProgram (или TApplication) в коне-
        чном  итоге являются владельцем любого отображаемого элемента, то
        любой  вызов  GetEvent  будет приводить к TProgram.GetEvent (если
        только  какой-либо отображаемый элемент попутно не переопределяет
        GetEvent).

             TРrogram.GetEvent  вначале  проверяет,  не  сгенерировал  ли
        PutEvent  отложенное событие. Если да, то GetEvent возвращает это
        отложенное  событие.  Если  нет  отложенного события, то GetEvent
        вызывает GetMouseEvent. Если возвращается evNothing, то вызывает-
        ся  GetKeyEvent;  если  оба они возвращают evNothing, указывая на
        то,   что  нет  ввода  от  пользователя,  то  GetEvent   вызывает
        TProgram.Idle,  чтобы   запустить  "фоновые" задачи,  выполняемые
        во время ожидания прикладной программой ввода от пользователя. До
        возврата GetEvent передает все события evKeyDown и evMouseDown  в
        StatusLine, для  преобразования  событий  от оперативных клавиш в
        соответствующие evCommand.

             См. также: TProgram.PutEvent, GetMouseEvent, GetKeyEvent


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: иногда переопределяется.

             Возвращает указатель на палитру, заданную индексом палитры в
        глобальной переменной AppPalette. TProgram поддерживает три пали-
        тры:  apColor, apBlackWhite и apMonochrome. Переменная AppPalette
        инициализируется TProgram.InitScreen.

             См. также: TProgram.InitScreen, AppPalette, константы apXXXX


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;


         B.Pascal 7 & Objects/TV#2      - 262 -

             Переопределяемость: всегда переопределяется.

             Обрабатывает    большую    часть  событий,   вызывая   метод
        HandleEvent, унаследованный  от TGroup.  Обрабатывает события  от
        клавиатуры от Alt+1 до Alt+9, генерируя evBroadcast со  значением
        Command,  равным   cmSelectWindowNum   и   значением  InfoInt   в
        диапазоне  1..9.    TWindow.HandleEvent    реагирует  на    такие
        сообщения, выбирая окно с данным номером.

             Обрабатывает  событие evCommand со значением Command, равным
        cmQuit, вызывая EndModal(cmQuit), что приводит к завершению прик-
        ладной программы.

             TProgram.Handle  почти  всегда переопределяется для введения
        обработки команд, специфичных для Вашей прикладной программы.

             См. также: TGroup.HandleEvent


             Idle
                  procedure Idle; virtual;

             Переопределяемость: иногда переопределяется.

             Idle  вызывается из TProgram.GetEvent каждый раз, когда оче-
        редь  событий  пуста, позволяя программе выполнять фоновые задачи
        при ожидании ввода от пользователя.

             По  умолчанию  TProgram.Idle  вызывает   StatusLine^.Update,
        чтобы  разрешить строке состояния обновлять себя в соответствии с
        текущим  контекстом подсказки. Затем, если набор команд изменился
        после  последнего  вызова TProgram.Idle, генерируется evBroadcast
        со значением Command, равным cmCommandSetChanged, чтобы разрешить
        отображаемому  элементу,  который зависит от этого набора команд,
        разрешить или запретить себя.

             Внимание! Если Вы переопределяете Idle, убедитесь в том, что
        Вы вызываете наследуемый метод Idle. Убедитесь также, что задачи,
        выполняемые Вашим методом Idle, не занимают слишком много времени
        в  программе, поскольку это будет блокировать ввод пользователя и
        сильно замедлит время реакции программы.


             InitDeskTop
                  procedure InitDeskTop; virtual;

             Переопределяемость: переопределяется редко.

             Создает объект TDeskTop для прикладной программы и сохраняет
        указатель  на  него  в   глобальной  переменной  DeskTop.   Метод
        InitDeskTop   вызывается   в   TProgram.Init и  никогда не должен
        вызываться  напрямую.  InitDeskTop  может  быть переопределен для
        создания потомка  TDeskTop,  определенного пользователем,  вместо

         B.Pascal 7 & Objects/TV#2      - 263 -

        определенного по умолчанию.

             См. также: TProgram.Init, TDeskTop, TWindow.Init


             InitMenuBar
                  procedure InitMenuBar; virtual;

             Переопределяемость: всегда переопределяется.

             Создает  объект TMenuBar для программы и сохраняет указатель
        на  него в глобальной переменной MenuBar. Метод InitMenuBar вызы-
        вается в TProgram.Init и никогда не должен вызываться непосредст-
        венно.  Программа  почти  всегда  переопределяет  InitMenuBar для
        создания  пользовательской  полосы  меню  вместо  определенной по
        умолчанию пустой.

             См. также: TProgram.Init, TMenuBar, TWindow.Init


             InitScreen
                  procedure InitScreen; virtual;

             Переопределяемость: иногда переопределяется.

             Вызывается  из TProgram.Init и TProgram.SetScreenMode каждый
        раз,  когда  режим  экрана  инициализируется  или изменяется. Это
        метод, который в действительности выполняет обновление и настрой-
        ку  переменных,  определяемых режимом экрана, для размера "тени",
        маркеров и палитры прикладной программы.

             См. также: TProgram.Init, TProgram.SetScreenMode


             InitStatusLine
                  procedure InitStatusLine; virtual;

             Переопределяемость: всегда переопределяется.

             Создает  объект TStatusLine для программы и сохраняет указа-
        тель  на  него в глобальной переменной StatusLine. InitStatusLine
        вызывается  в TProgram.Init и никогда не должен вызываться напря-
        мую.  InitStatusLine  почти  всегда переопределяется для создания
        полосы состояния, определенной пользователем, вместо определенной
        по умолчанию.

             См. также: TProgram.Init, TStatusLine


             InsertWindow
                  function InsertWindow (P: PWindow): PWindow;

             Вызывает  ValidView  с целью убедиться в том, что P является

         B.Pascal 7 & Objects/TV#2      - 264 -

        допустимым окном, и если это так, вызывает CanMoveFocus для того,
        чтобы проверить, вызовет ли введение нового окна проблемы в акти-
        вном окне, связанные с допустимостью. Если CanMoveFocus возвраща-
        ет True, то InsertWindow вводит P в оперативную область и возвра-
        щает P. Если CanMoveFocus возвращает False, то InsertWindow унич-
        тожает P и возвращает nil.

             Внимание! Необходимо вызывать метод объекта прикладной прог-
        раммы  InsertWindow,   а  не   непосредственно   Desktop^.Insert.
        InsertWindow  не  только  осуществляет  автоматическую   проверку
        допустимости объектов окон, но она также использует  CanMoveFocus
        для защиты данных в активном окне.

             См. также: TProgram.CanMoveFocus, TGroup.Insert


             OutOfMemory
                  procedure OutOfMemory; virtual;

             Переопределяемость: часто переопределяется.

             Метод  OutOfMemory  вызывается  из TProgram.ValidView каждый
        раз,  когда  LowMemory  имеет  значение  True. OutOfMemory должна
        предупредить  пользователя  о  том,  что  для выполнения операции
        недостаточно   памяти.   Например,  с  использованием   программы
        MessageBox из модуля StdDlg:

                 procedure TMyApp.OutOfMemory;
                 begin
                   MessageBox('Not enough memory to complete operation.',
                              nil, mfError + mfOKButton);
                 end;

              См. также: TProgram.ValidView, LowMemory


             PutEvent
                  procedure PutEvent(var Event: TEvent); virtual;

             Переопределяемость: переопределяется редко.

             По  умолчанию  TView.PutEvent просто вызывает метод PutEvent
        своего  владельца и, поскольку объект TProgram (или TApplication)
        в конечном счете является владельцем любого отображаемого элемен-
        та,  то каждый вызов PutEvent будет приводить к TProgram.PutEvent
        (если   только  отображаемый  элемент  попутно  не  переопределил
        PutEvent).

             Метод  Program.PutEvent  сохраняет  копию  записи PutEvent в
        буфере, и следующий вызов GetEvent будет возвращать эту копию.

             См. также: TProgram.GetEvent, TView.PutEvent


         B.Pascal 7 & Objects/TV#2      - 265 -


             Run
                  procedure Run; virtual;

             Переопределяемость: используется редко.

             Выполняет  TProgram, вызывая метод Execute (который TProgram
        наследует от TGroup).

             См. также: TGroup.Execute


             SetScreenMode
                  procedure SetScreenMode(Mode: Word);

             Устанавливает режим экрана. Mode - одна из констант (smCO80,
        smBW80 или smMono) с необязательными smFont8x8 для выбора 43- или
        50-строчного режима адаптеров EGA или VGA. SetScreenMode "скрыва-
        ет" курсор "мыши", вызывает SetVideoMode для изменения режима эк-
        рана, вызывает InitScreen для инициализации переменных, зависящих
        от режима экрана, присваивает ScreenBuffer TProgram.Buffer, вызы-
        вает ChangeBounds с новым прямоугольником экрана и,  наконец, по-
        казывает курсор "мыши".

             См. также:  TProgram.InitScreen,   SetVideoMode,   константы
        smXXXX


             ValidView
                  function TProgram.ValidView(P: PView): PView;

             Проверяет допустимость  вновь созданных отображаемых элемен-
        тов, возвращая Р в случае, если отображаемый элемент является до-
        пустимым, и nil - если нет. Во-первых, если Р имеет значение nil,
        возвращается значение nil.  Во-вторых, если LowMemory равно True,
        то при вызове ValidView отображаемый элемент, заданный в Р, осво-
        бождается,  вызывается метод OutOfMemory и возвращается  значение
        nil. В-третьих, если вызов P^.Valid(cmValid) возвращает False, то
        отображаемый элемент освобождается и возвращается значение nil. В
        противном  случае  отображаемый  элемент считается допустимым,  и
        возвращается указатель на этот отображаемый элемент Р.

             ValidView часто используется для проверки допустимости ново-
        го отображаемого элемента до введения его во владельца. И Insert-
        Window, и ExecuteDialog вызывают ValidView. ValidView можно вызы-
        вать  напрямую  в  случаях,  когда  не нужно вводить отображаемый
        элемент немедленно.

             См. также: LowMemory, TProgram.OutOfMemory, методы Valid




         B.Pascal 7 & Objects/TV#2      - 266 -

                                      Палитры
        -----------------------------------------------------------------

             Палитра  для объекта прикладной программы управляет итоговым
        цветом  всех отображаемых элементов программы. Все преобразования
        других  палитр  приводят  к выбору элемента из палитры программы,
        которая задает атрибуты текста.

             Внимание!  В  версии  2.0 стандартные палитры программы были
        расширены,  и включают диалоговые окна синего и голубого цветов в
        дополнение  к существующим по умолчанию серым. Палитры версии 1.0
        CColor,  CBlackWhite и CMonochrome по-прежнему включены в App для
        обеспечения  совместимости  с  существующими программами, которые
        расширили существующие по умолчанию палитры.

             В   версии   2.0   палитры   CAppColor,   CAppBlackWhite   и
        CAppMonochrome  идентичны  палитрам версии 1.0, однако элементы с
        64 по 127 новые.

             Первый  элемент  используется в TBackground для цветов фона.
        Элементы со 2 по 7 используются меню и строкой состояния.

                          1   2   3   4   5   6   7
                        ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor       ║$71│$70│$78│$74│$20│$28│$24║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite  ║$70│$70│$78│$7F│$07│$07│$0F║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome  ║$70│$07│$07│$0F│$70│$70│$70║
                        ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
           Фон        ────┘   │   │   │   │   │   └── Выбор клавиши
           Нормальный текст ──┘   │   │   │   │        активации
           Запрещенный текст ─────┘   │   │   └────── Запрещенный выбор
           Текст клавиши    ──────────┘   └────────── Нормальный выбор
            активации



         B.Pascal 7 & Objects/TV#2      - 267 -


             Элементы в 8 по 15 используются синими окнами.

                          8   9   10  11  12  13  14  15
                        ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor       ║$17│$1F│$1A│$31│$31│$1E│$71│$00║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite  ║$07│$0F│$07│$70│$70│$07│$70│$00║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome  ║$07│$0F│$07│$70│$70│$07│$70│$00║
                        ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
           Рамка пассивна ┘   │   │   │   │   │   │   └─ Зарезервировано
           Рамка активна ─────┘   │   │   │   │   └─ Выделенный текст
                                  │   │   │   │      прокрутки
           Пиктограмма  ──────────┘   │   │   └───── Нормальный текст
           рамки                      │   │          прокрутки
           Страница полосы    ────────┘   └───────── Зарезервировано
           прокрутки


             Элементы с 16 по 23 используются голубыми окнами.

                          16  17  18  19  20  21  22  23
                        ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor       ║$37│$3F│$3A│$13│$13│$3E│$21│$00║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite  ║$07│$0F│$07│$70│$70│$07│$70│$00║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome  ║$07│$0F│$07│$70│$70│$07│$70│$00║
                        ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
           Рамка пассивна ┘   │   │   │   │   │   │   └── Зарезервировано
           Рамка активна ─────┘   │   │   │   │   └─ Выделенный текст
                                  │   │   │   │      элемента прокрутки
           Пиктограмма  ──────────┘   │   │   └──── Нормальный текст
           рамки                      │   │         элемента прокрутки
           Страница полосы    ────────┘   └──────── Зарезервировано
           прокрутки


         B.Pascal 7 & Objects/TV#2      - 268 -



             Элементы с 24 по 31 используются серыми окнами.

                          24  25  26  27  28  29  30  31
                        ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor       ║$70│$7F│$7A│$13│$13│$70│$7F│$00║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite  ║$70│$7F│$7F│$70│$07│$70│$07│$00║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome  ║$70│$70│$70│$07│$07│$70│$07│$00║
                        ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
           Рамка пассивна ┘   │   │   │   │   │   │   └── Зарезервировано
           Рамка активна ─────┘   │   │   │   │   └─ Выделенный текст
                                  │   │   │   │      элемента прокрутки
           Пиктограмма  ──────────┘   │   │   └──── Нормальный текст
           рамки                      │   │         элемента прокрутки
           Страница полосы    ────────┘   └──────── Зарезервировано
           прокрутки

             Элементы  с  32  по  63 используются диалоговыми окнами. См.
        TDialog для отдельных элементов.

                         32  33  34  35  36  37  38  39  40
                       ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor      ║$17│$1F│$1A│$31│$31│$31│$1E│$71│$00║
                       ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                       ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite ║$07│$0F│$07│$70│$70│$70│$07│$70│$00║
                       ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                       ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome ║$07│$0F│$07│$70│$70│$70│$07│$70│$00║
                       ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
          Рамка пассивная┘   │   │   │   │   │   │   │   └── Опер.клавиша
                             │   │   │   │   │   │   │       метки
          Рамка активная─────┘   │   │   │   │   │   └─ Подсвеченная
                                 │   │   │   │   │      метка
          Пиктограмма  ──────────┘   │   │   │   └───── Нормальная
          рамки                      │   │   │          метка
          Страница прокрутки  ───────┘   │   └───────── Статический текст
          Элементы управления ───────────┘
          прокруткой


         B.Pascal 7 & Objects/TV#2      - 269 -



                          41  42  43  44  45  46  47  48  49
                        ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor       ║$17│$1F│$1A│$31│$31│$31│$1E│$71│$00║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite  ║$07│$0F│$07│$70│$70│$70│$07│$70│$00║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome  ║$07│$0F│$07│$70│$70│$70│$07│$70│$00║
                        ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
           Нормальная ────┘   │   │   │   │   │   │   │   └── Оперативная
           "кнопка"           │   │   │   │   │   │   │  клавиша кластера
           "Кнопка" по ───────┘   │   │   │   │   │   └───── Выделенный
           умолчанию              │   │   │   │   │          кластер
           Выбранная  "кнопка" ───┘   │   │   │   └───────── Нормальный
                                      │   │   │             кластер
           Запрещенная "кнопка" ──────┘   │   └──────────── Тень
                                          │                 "кнопки"
           Оперативная клавиша ───────────┘
           "кнопки"

                                50  51  52  53  54  55  56
                              ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor             ║$1F│$2F│$1A│$20│$72│$31│$31║
                              ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                              ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite        ║$0F│$70│$0F│$07│$70│$70│$70║
                              ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                              ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome        ║$07│$70│$07│$07│$70│$07│$07║
                              ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
           Обычная строка ввода ┘   │   │   │   │   │   └─ Элементы
                                    │   │   │   │   │     управления
                                    │   │   │   │   │     прокруткой окна
                                    │   │   │   │   │     протокола
           Выделенная строка ввода ─┘   │   │   │   └───── Страница
                                        │   │   │          прокрутки
                                        │   │   │          окна протокола
           Стрелки строки ввода ────────┘   │   └───────── Стороны
           Стрелка протокола ───────────────┘              протокола


         B.Pascal 7 & Objects/TV#2      - 270 -




                             57  58  59  60  61  62  63
                           ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor          ║$30│$2F│$3E│$31│$13│$00│$00║
                           ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                           ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite     ║$07│$70│$0F│$07│$07│$00│$00║
                           ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                           ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome     ║$07│$70│$0F│$07│$07│$00│$00║
                           ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
        Обычный просмотр  ───┘   │   │   │   │   │   └── Зарезервировано
        списка                   │   │   │   │   │
        Активный просмотр ───────┘   │   │   │   └────── Зарезервировано
        списка                       │   │   │
        Выделенный просмотр списка ──┘   │   └────────── Информационная
        Разделитель просмотра списка ────┘               область


             Элементы  с  64 по 95 используются объектами диалоговых окон
        синего цвета. См. конкретные элементы для TDialog.


                         64  65  66  67  68  69  70  71  72
                       ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor      ║$17│$1F│$1A│$71│$71│$1E│$17│$1F│$1E║
                       ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                       ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite ║$07│$0F│$0F│$70│$70│$70│$07│$0F│$0F║
                       ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                       ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome ║$70│$70│$0F│$70│$0F│$70│$07│$0F│$0F║
                       ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
          Рамка пассивная┘   │   │   │   │   │   │   │   └── Опер.клавиша
                             │   │   │   │   │   │   │       метки
          Рамка активная─────┘   │   │   │   │   │   └─ Подсвеченная
                                 │   │   │   │   │      метка
          Пиктограмма  ──────────┘   │   │   │   └───── Нормальная
          рамки                      │   │   │          метка
          Страница прокрутки  ───────┘   │   └───────── Статический текст
          Элементы управления ───────────┘
          прокруткой


         B.Pascal 7 & Objects/TV#2      - 271 -



                          73  74  75  76  77  78  79  80  81
                        ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor       ║$20│$2B│$2F│$78│$2E│$10│$30│$3F│$3E║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite  ║$70│$78│$7F│$08│$7F│$08│$70│$7F│$7F║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome  ║$07│$07│$0F│$70│$0F│$70│$07│$0F│$0F║
                        ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
           Нормальная ────┘   │   │   │   │   │   │   │   └── Оперативная
           "кнопка"           │   │   │   │   │   │   │  клавиша кластера
           "Кнопка" по ───────┘   │   │   │   │   │   └───── Выделенный
           умолчанию              │   │   │   │   │          кластер
           Выбранная  "кнопка" ───┘   │   │   │   └───────── Нормальный
                                      │   │   │             кластер
           Запрещенная "кнопка" ──────┘   │   └──────────── Тень
                                          │                 "кнопки"
           Оперативная клавиша ───────────┘
           "кнопки"

                                82  83  84  85  86  87  88
                              ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor             ║$70│$2F│$7A│$20│$12│$31│$31║
                              ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                              ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite        ║$7F│$0F│$70│$70│$07│$70│$70║
                              ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                              ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome        ║$07│$70│$07│$07│$70│$07│$07║
                              ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
           Обычная строка ввода ┘   │   │   │   │   │   └─ Элементы
                                    │   │   │   │   │      управления
                                    │   │   │   │   │      прокруткой окна
                                    │   │   │   │   │      протокола
           Выделенная строка ввода ─┘   │   │   │   └───── Страница
                                        │   │   │          прокрутки
                                        │   │   │          окна протокола
           Стрелки строки ввода ────────┘   │   └───────── Стороны
           Стрелка протокола ───────────────┘              протокола


         B.Pascal 7 & Objects/TV#2      - 272 -




                             89  90  91  92  93  94  95
                           ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor          ║$30│$2F│$3E│$31│$13│$38│$00║
                           ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                           ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite     ║$70│$07│$7F│$70│$07│$78│$00║
                           ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                           ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome     ║$07│$70│$0F│$07│$07│$70│$00║
                           ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
        Обычный просмотр  ───┘   │   │   │   │   │   └── Зарезервировано
        списка                   │   │   │   │   │
        Активный просмотр ───────┘   │   │   │   └────── Кластер
        списка                       │   │   │           недоступный
        Выделенный просмотр списка ──┘   │   └────────── Информационная
        Разделитель просмотра списка ────┘               область


             Элементы  с 96 по 127 используются объектами диалоговых окон
        серого цвета. См. конкретные элементы для TDialog.


                         96  97  98  99 100 101 102 103 104
                       ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor      ║$37│$3F│$3A│$13│$13│$3E│$30│$3F│$3E║
                       ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                       ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite ║$07│$7F│$7F│$70│$07│$70│$70│$7F│$7F║
                       ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                       ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome ║$70│$70│$70│$07│$07│$70│$70│$70│$0F║
                       ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
          Рамка пассивная┘   │   │   │   │   │   │   │   └── Опер.клавиша
                             │   │   │   │   │   │   │       метки
          Рамка активная─────┘   │   │   │   │   │   └─ Подсвеченная
                                 │   │   │   │   │      метка
          Пиктограмма  ──────────┘   │   │   │   └───── Нормальная
          рамки                      │   │   │          метка
          Страница прокрутки  ───────┘   │   └───────── Статический текст
          Элементы управления ───────────┘
          прокруткой


         B.Pascal 7 & Objects/TV#2      - 273 -



                         105 106 107 108 109 110 111 112 113
                        ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor       ║$20│$2B│$2F│$78│$2E│$30│$70│$7F│$7E║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite  ║$07│$0F│$0F│$78│$0F│$78│$07│$0F│$0F║
                        ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                        ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome  ║$07│$07│$0F│$70│$0F│$70│$07│$0F│$0F║
                        ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
           Нормальная ────┘   │   │   │   │   │   │   │   └── Оперативная
           "кнопка"           │   │   │   │   │   │   │  клавиша кластера
           "Кнопка" по ───────┘   │   │   │   │   │   └───── Выделенный
           умолчанию              │   │   │   │   │          кластер
           Выбранная  "кнопка" ───┘   │   │   │   └───────── Нормальный
                                      │   │   │             кластер
           Запрещенная "кнопка" ──────┘   │   └──────────── Тень
                                          │                 "кнопки"
           Оперативная клавиша ───────────┘
           "кнопки"

                               114 115 116 117 118 119 120
                              ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor             ║$1F│$2F│$1A│$20│$32│$31│$71║
                              ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                              ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite        ║$0F│$70│$0F│$07│$70│$70│$70║
                              ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                              ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome        ║$07│$70│$07│$07│$70│$07│$07║
                              ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
           Обычная строка ввода ┘   │   │   │   │   │   └─ Элементы
                                    │   │   │   │   │      управления
                                    │   │   │   │   │      прокруткой окна
                                    │   │   │   │   │      протокола
           Выделенная строка ввода ─┘   │   │   │   └───── Страница
                                        │   │   │          прокрутки
                                        │   │   │          окна протокола
           Стрелки строки ввода ────────┘   │   └───────── Стороны
           Стрелка протокола ───────────────┘              протокола


         B.Pascal 7 & Objects/TV#2      - 274 -




                            121 122 123 124 125 126 127
                           ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CAppColor          ║$70│$2F│$7E│$71│$13│$38│$00║
                           ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                           ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppBlackWhite     ║$07│$70│$0F│$07│$07│$78│$00║
                           ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                           ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CAppMonochrome     ║$07│$70│$0F│$07│$07│$70│$00║
                           ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
        Обычный просмотр  ───┘   │   │   │   │   │   └── Зарезервировано
        списка                   │   │   │   │   │
        Активный просмотр ───────┘   │   │   │   └────── Кластер
        списка                       │   │   │           недоступный
        Выделенный просмотр списка ──┘   │   └────────── Информационная
        Разделитель просмотра списка ────┘               область




         B.Pascal 7 & Objects/TV#2      - 275 -

         TPXPictureValidator                                    Validate
        -----------------------------------------------------------------

             Объект  картинки  определителя  допустимости сравнивает ввод
        пользователя  с картинкой формата данных для определения допусти-
        мости  вводимых  данных.  Эти  картинки  совместимы с картинками,
        используемыми  реляционными  базами данных Paradox фирмы Borland,
        служащих для проверки допустимости вводимых данных. Полное описа-
        ние картинок содержится в методе Picture TPXPictureValidator.


                                        Поле
        -----------------------------------------------------------------

             Pic
                  Pic: PString;

             Указывает  на  строку, которая описывает формат для данных в
        связанной строке ввода. Конструктор Init устанавливает Pic равным
        строке, переданной в качестве одного из его параметров.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init (const APic: string;
                                                     AutoFill: Boolean);

             Создает  объект  картинки определителя допустимости, вызывая
        сначала  конструктор  Init, унаследованный от TValidator, а затем
        выделяет  в динамической памяти копию APic и устанавливает значе-
        ние  Pic  равным  указателю  на нее, после чего устанавливает бит
        voFill в Options в случае, если AutoFill равно True.

             См. также: TValidator.Init


             Load
                  constructor Load(var S: TStream);

             Создает и загружает объект картинки определителя допустимос-
        ти  из потока S, вызывая сначала конструктор Load, унаследованный
        от  TValidator,  а  затем  считывая значение поля Pic, введенного
        TPXPictureValidator.

             См. также: TValidator.Load


             Done
                  destructor Done; virtual;

             Уничтожает строку, на которую указывает Pic; затем уничтожа-

         B.Pascal 7 & Objects/TV#2      - 276 -

        ет  объект картинки определителя допустимости, вызывая деструктор
        Done, унаследованный от TValidator.


             Error
                  procedure Error; Virtual;

             Выдает  окно сообщений, указывающее на ошибку в формате кар-
        тинки, отображая строку, на которую указывает Pic.


             IsValidInput
                  function IsValidInput (var S: string;
                                 SupressFill: Boolean): Boolean; virtual;

             Сравнивает  строку,  переданную  в  S,  с картинкой формата,
        описанной  в  Pic, и возвращает True в случае, если Pic равно nil
        или Picture не возвращает prError для S; в противном случае возв-
        ращает  False.  Параметр  SupressFill  переопределяет  значение в
        voFill на время вызова IsValidInput.

             S  является  параметром типа var, поэтому IsValidInput может
        изменять  это  значение. Например, если SupressFill равно False и
        voFill установлено, то вызов Picture возвращает заполненную стро-
        ку,  основанную  на S, поэтому образ в строке ввода автоматически
        отражает формат, указанный в Pic.

             См. также: TPXPictureValidator.Picture


             IsValid
                  function IsValid (const S: string): Boolean; virtual;

             Сравнивает  строку,  переданную  в  S,  с картинкой формата,
        указанной  в  Pic, и возвращает True в случае, если Pic равно nil
        или  Picture  возвращает  для S prComplete, что означает, что для
        удовлетворения  описанного формата S не требует дальнейшего ввода
        данных.

             См. также: TPXPictureValidator.Picture


             Picture
                  function Picture (var Input: string):
                                                     TPicResult; virtual;

             Форматирует  строку,  переданную  в  Input, в соответствии с
        форматом,  указанным в строке картинки, на которую указывает Pic.
        Возвращает prError в случае, если в строке картинки имеется ошиб-
        ка  или  если Input содержит данные, не соответствующие указанной
        картинке. Возвращает prComplete в случае, если Input может полно-
        стью  удовлетворить указанной картинке. Возвращает prIncomplete в
        случае,  если  Input  содержит  данные, соответствующие указанной

         B.Pascal 7 & Objects/TV#2      - 277 -

        картинке, но не полностью.

             В  Таблице 19.41 показаны символы, используемые при создании
        картинок форматов.

                  Таблица 19.41. Символы картинки формата

        -----------------------------------------------------------------
          Тип символа    Символ  Описание
        -----------------------------------------------------------------
          Специальный       #    Вводить только цифру
                            ?    Вводить только букву (не зависит от
                                                               регистра)
                            &    Вводить только букву, преобразовывать
                                 в верхний регистр
                            @    Вводить любой символ
                            !    Вводить любой символ, преобразовывать
                                 в верхний регистр

          Соответствие      ;    Взять следующий символ буквально
                            *    Счетчик повторений
                            []   Опция
                            {}   Операторы группы
                            '    Набор альтернатив

          Все остальные          Берутся буквально
        -----------------------------------------------------------------


             Store
                  procedure Store (var S: TStream);

             Сохраняет объект картинки определителя допустимости в потоке
        S,  вызывая  сначала метод Store, унаследованный от TValidator, а
        затем записывает строку, на которую указывает Pic.




         B.Pascal 7 & Objects/TV#2      - 278 -

         TRadioButtons                                           Dialogs
        -----------------------------------------------------------------

             Объекты  TRadioButtons-  это  кластеры,  содержащие до 65536
        управляющих  элементов,  из  которых в любой момент времени может
        быть  выбрана  только  одна  "кнопка". Выбор невыбранной "кнопки"
        будет  автоматически  освобождать  ранее  выбранную  кнопку. Этот
        объект наследует от TCluster большую часть функций, включая Init,
        Load  и  Done.  С  "кнопками" с зависимой фиксацией часто связаны
        объекты TLabel.

             TRadioButtons интерпретирует наследуемое поле TCluster.Value
        как  номер  "нажатой"  кнопки.  Номер  первой "кнопки" в кластере
        равен 0.


                                       Методы
        -----------------------------------------------------------------

             Draw
                  procedure Draw; virtual;

             Переопределяемость: переопределяется редко.

             Отображает "кнопки" в виде '( ) ', заключенном в прямоуголь-
        ник.


             Mark
                  function Mark(Item: Integer): Boolean; virtual;

             Переопределяемость: никогда не переопределяется.

             Возвращает значение True, если Item = Value, т.е. если "кно-
        пка"  с  номером  Item  представлена текущим значением поля Value
        ("нажатая" кнопка).

             См. также: TCluster.Value, TCluster.Mark


             MovedTo
                  procedure MovedTo(Item: Integer); virtual;

             Переопределяемость: не переопределяется.

             Присваивает Value значение Item.

             См. также: TCluster.MovedTo, TRadioButtons.Mark


             Press
                  procedure Press(Item: Integer); virtual;


         B.Pascal 7 & Objects/TV#2      - 279 -

             Переопределяемость: никогда не переопределяется.

             Присваивает  Value  значение  Item.  Вызывается  при нажатии
        "кнопки" с номером Item.


             SetData
                  procedure SetData(var Rec); virtual;

             Переопределяемость: переопределяется редко.

             Вызывает  метод  SetData,  унаследованный  от  TCluster, для
        установки поля Value, а затем устанавливает поле Sel равным Value
        в  случае,  если выбранный элемент при запуске представляет собой
        "нажатую" кнопку.

             См. также: TCluster.SetData


                                      Палитра
        -----------------------------------------------------------------

             Объекты TRadioButtons используют CCluster-палитру, назначен-
        ную по умолчанию для всех объектов кластера, для отображения эле-
        ментов с 16 по 18 стандартной палитры диалогового окна.

                             1    2    3    4
                          ╔════╤════╤════╤════╗
              CCluster    ║ 16 │ 17 │ 18 │ 18 ║
                          ╚══╤═╧══╤═╧══╤═╧══╤═╝
                             │    │    │    │
            Нормальный текст ┘    │    │    └─── Выбранная оперативная
            Выделенный текст ─────┘    │         клавиша
                                       └──────── Обычная оперативная
                                                 клавиша



         B.Pascal 7 & Objects/TV#2      - 280 -

         TRangeValidator                                        Validate
        -----------------------------------------------------------------

             Объект определителя диапазона допустимости показывает, попа-
        дают ли данные, напечатанные пользователем, в заданный целочисле-
        нный диапазон.


                                        Поля
        -----------------------------------------------------------------

             Max
                  Max: Longint;

             Max  представляет собой максимально допустимое длинное целое
        число в строке ввода.

             Min
                  Min: Longint;

             Min  представляет  собой минимально допустимое длинное целое
        число в строке ввода.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init (const AMin, AMax: Longint);

             Создает  объект определителя диапазона допустимости, вызывая
        сначала  конструктор  Init,  унаследованный  от TFilterValidator,
        передавая  набор символов, содержащий '0..9' и символы '+' и '-'.
        Устанавливает  значение Min равным AMin, а Max равным AMax, уста-
        навливая тем самым диапазон допустимых длинных целых чисел.

             См. также: TFilterValidator.Init


             Load
                  constructor Load (var S: TStream);

             Создает  и  загружает определитель диапазона допустимости из
        потока  S,  вызывая  сначала  конструктор Load, унаследованный от
        TFilterValidator,  а  затем  считывая  поля  Min и Max, введенные
        TRangeValidator.

             См. также: TFilterValidator.Load


             Error
                  procedure Error; virtual;


         B.Pascal 7 & Objects/TV#2      - 281 -

             Выдает  окно  сообщений,  указывающее  на  то, что введенное
        значение не попало в указанный диапазон.


             IsValid
                  function IsValid (var S: string): Boolean; virtual;

             Преобразует  строку  S  в  целое число и возвращает значение
        True  в случае, если результат удовлетворяет следующим трем усло-
        виям:

             - оно является допустимым целым числом;

             - его значение больше или равно Min;

             - его значение меньше или равно Max.

             Если какое-либо из этих условий нарушается, то IsValid возв-
        ращает False.

             Store
                  procedure Store (var S: TStream);

             Сохраняет  определитель  диапазона  допустимости в потоке S,
        вызывая  сначала метод Store, унаследованный от TFilterValidator,
        а затем записывает поля Min и Max, введенные TRangeValidator.

             См. также: TFilterValidator.Store


             Transfer
                  function Transfer (var S: String;
                                                     Buffer: Pointer;
                                      Flag: TVTransfer): Word; virtual;

             Включает  три  функции  DataSize, GetData и SetData, которые
        объект определителя диапазона допустимости может использовать для
        связанной  с ним строки ввода. Вместо установки и чтения значения
        вводимой  числовой строки путем передачи строкового представление
        числа,  Transfer  может использовать в качестве его записи данных
        Longint, что избавляет программу от выполнения преобразования.

         B.Pascal 7 & Objects/TV#2      - 282 -


             S  представляет  собой  значение  введенной строки, а Buffer
        представляет  собой  запись  данных,  переданную  строке ввода. В
        зависимости от значения Flag, Transfer или устанавливает значение
        S  равным значению числа из Buffer, или устанавливает Buffer рав-
        ным значению из S. Если Flag равно vtSetData, то S устанавливает-
        ся равным Buffer. Если Flag равно vtGetData, то Buffer устанавли-
        вается  равным S. Если Flag равно vtDataSize, то Transfer не осу-
        ществляет ни чтения, ни записи данных.

             Transfer  всегда возвращает размер переданных данных, в дан-
        ном случае размер Longint.

             См. также: тип TVTransfer




         B.Pascal 7 & Objects/TV#2      - 283 -

         TRect                                                  Objects
        -----------------------------------------------------------------

                                        Поля
        -----------------------------------------------------------------


             A
                  A: TPoint

             A- это точка, определяющая левый верхний угол прямоугольника
        на экране.

             B
                  B: Point

             В - это точка, определяющая правый нижний угол прямоугольни-
        ка на экране.


                                       Методы
        -----------------------------------------------------------------

             Assign
                  procedure Assign(XA, YA, XB, YB: Integer);

             Этот  метод присваивает значения параметров полям точек пря-
        моугольника. XA становится A.X, XB становится B.X и т.д.


             Contains
                  function Contains(P: TPoint): Boolean;

             Возвращает значение True в случае, если прямоугольник содер-
        жит точку P.


             Copy
                  procedure Copy(R: TRect);

             Copy устанавливает все поля равными полям прямоугольника R.


             Empty
                  function Empty: Boolean;

             Возвращает значение True, если прямоугольник пустой, т.е. не
        содержит  символьного  пространства. Это означает, что поля A и B
        равны.


             Equals
                  function Equals(R: TRect): Boolean;

         B.Pascal 7 & Objects/TV#2      - 284 -


             Возвращает True, если R равен данному прямоугольнику.


             Grow
                  procedure Grow(ADX, ADY: Integer);

             Изменяет размер прямоугольника, вычитая ADX из A.X, и добав-
        ляя ADX к B.X, вычитая ADY из A.Y и добавляя ADY к B.Y.


             Intersect
                  procedure Intersect(R: TRect);

             Изменяет положение и размер области до области, определенной
        пересечением текущей области и R.


             Move
                  procedure Move(ADX, ADY: Integer);

             Перемещает  прямоугольник, добавляя ADX к A.X и B.X и добав-
        ляя ADY к A.Y и B.Y.


             Union
                  procedure Union(R: TRect);

             Изменяет  прямоугольник до его объединения с прямоугольником
        R;  т.е. до наименьшего прямоугольника, содержащего этот объект и
        R.




         B.Pascal 7 & Objects/TV#2      - 285 -

         Тип TReplaceDialogRec                                  Editors
        -----------------------------------------------------------------

             Описание:
                  TReplaceDialogRec = record
                       Find:     String [80];
                       Replace:  String [80];
                       Options:  Word;
                  end;

             Функция: Диалоговые   окна   поиска   и   замены,  вызванные
        EditorDialog при передаче ему edReplace,  используют указатель на
        TReplaceDialogRec  в  качестве второго параметра.  Find и Replace
        содержат строки,  заданные по умолчанию, для поиска и замены, со-
        ответственно. Options содержит некоторую комбинацию констант фла-
        гов редактора efXXXX, описывающих то, как будет происходить поиск
        и замена.

             См. также: тип TEditorDialog


         TResourceCollection                                     Objects
        -----------------------------------------------------------------

             Объект TResourseCollection     является    производным    от
        TStringCollection,  и используется с TSourseFile  для  реализации
        наборов ресурсов. Файл ресурсов - это поток, который индексирует-
        ся ключевыми строками. Следовательно, каждый элемент ресурса име-
        ет целое поле Pos и строковое поле Key.  Переопределяемость мето-
        дов TResourseCollection главным образом связана с обработкой  до-
        полнительных строк в его элементах.

             TResourseCollection       используется    внутри    объектов
        TResourseFile для поддержания индекса файла ресурсов.


         TResourceFile                                           Objects
        -----------------------------------------------------------------

             Объект TResourseFile реализует поток, который может индекси-
        роваться  ключевыми  строками.  Когда объекты сохраняются в файле
        ресурса,  используя  TResourseFile.Put, задается ключевая строка,
        которая идентифицирует этот объект. Объект может быть позже полу-
        чен   обратно   с  указанием  этой   ключевой  строки  в   вызове
        TResourseFile.Get.

             Для  обеспечения быстрого и эффективного доступа к объектам,
        хранящимся  в файле ресурса, TResourseFile хранит ключевые строки
        в    отсортированном   наборе   строк   (с   использованием  типа
        TResourseCollection) вместе с положением и размером данных  этого
        ресурса в файле ресурса.

             Как  и  в  случае  с потоками, типы объектов, записываемые и

         B.Pascal 7 & Objects/TV#2      - 286 -

        читаемые  из файла ресурсов, должны быть зарегистрированы с помо-
        щью RegisterType.


                                        Поля
        -----------------------------------------------------------------

             Modified                                     (чтение/запись)
                  Modified: Boolean;

             Установлен равным значению True, если файл ресурса был изме-
        нен.

             См. также: TResource.Flush


             Stream                                   (только для чтения)
                  Stream: PStream;

             Указатель на поток, связанный с этим файлом ресурса.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(AStream: Pstream);

             Инициализирует   файл  ресурса,  используя  поток,  заданный
        AStream, и устанавливает поле Modified равным False. Например:

             ResFile.Init(New(TBufStream, Init("MYAPP.RES',   stOpenRead,
              1024)));

             Во  время инициализации Init ищет в заголовке файла ресурсов
        текущее  положение  потока. Формат заголовка файла ресурсов имеет
        вид:

                  type
                    TResFileHeader = record
                      Signature: array[1..4] of Char;
                      ResFileSize: Longint;
                      IndexOffset: Longint;
                    end;

        где  Signature содержит 'FBPR', ResFileSize содержит размер всего
        файла  ресурсов,  за  исключением  полей  Signature и ResFileSize
        (т.е.  размер файла ресурса -8 байт), а IndexOffset содержит сме-
        щение набора индексов от начала заголовка.

             Если Init не находит заголовка файла ресурса в текущей пози-
        ции  AStream,  то он считает, что создается новый файл ресурса, и
        создает пустой индекс.

         B.Pascal 7 & Objects/TV#2      - 287 -


             Если Init видит метку.EXE файла в текущей позиции потока, то
        он просматривает поток до конца файла .EXE и ищет заголовок файла
        ресурса  здесь. Аналогично Init будет пропускать оверлейный файл,
        добавленный к .EXE  файлу   (так же, как OvrInit пропускает файл
        ресурса).  Это означает, что Вы можете добавить оверлейный файл и
        файл ресурса  (в  любом  порядке) в конец выполняемого файла. EXE
        Вашей программы. (Именно это делает исполняемый файлом интегриро-
        ванной среды TURBO.EXE).

             См. также: TResourceFile.Done


             Done
                  destructor Done; virtual;

             Переопределяемость: никогда не переопределяется.

             Сбрасывает  файл  ресурса,  используя TResourseFile.Flush, а
        затем  освобождает  индекс  и  поток,  на  который указывает поле
        Stream.

             См. также: TResourceFile.Init, TResourceFile.Flush


             Count
                  function Count: Integer;

             Возвращает число ресурсов, сохраненных в файле ресурсов.

             См. также: TResourceFile.KeyOf


             Delete
                  procedure Delete(Key: String);

             Удаляет ресурс, индексируемый ключом Key, из файла ресурсов.
        Пространство,  ранее занятое удаленным ресурсом, не используется.
        Вы  можете вновь задействовать эту память, используя SwitchTo для
        создания упакованной копии файла в новом потоке.

             См. также: TResourceFile.SwitchTo


             Flush
                  procedure Flush;

             Если  файл  ресурса  был  изменен (проверяется значение поля
        Modified), то Flush сохраняет обновленный индекс в конце потока и
        обновляет заголовок ресурса в начале потока. Затем Modified уста-
        навливается равным False.

             См. также: TResourceFile.Done, TResourceFile.Modified

         B.Pascal 7 & Objects/TV#2      - 288 -



             Get
                  function Get(Key: String): PObject;

             Ищет Key в индексе файла ресурсов. Возвращает значение nil в
        случае, если ключ не найден. В противном случае, производит поиск
        до  позиции, заданной индексом, и вызывает Stream^.Get для созда-
        ния и загрузки объекта, описанного с помощью Key. Например:

             DeskTop^.Insert(ValidView(ResFile.Get('EditorWindow')));

             См. также: TResourceFile.KeyAt, TResourceFile.Put


             KeyAt
                  function KeyAt(I: Integer): String;

             Возвращает ключевую строку для ресурса с номером i в вызыва-
        ющем  файле  ресурса.  Индекс  первого  ресурса равен 0, а индекс
        последнего ресурса равен TResourseFile.Count-1. Используя Count и
        KeyAt, можно последовательно обработать все ресурсы в файле ресу-
        рса.

             См. также: TResourceFile.Count


             Put
                  procedure Put(Item: PObject; Key: String);

             Добавляет  объект,  заданный  Р,  в  файл ресурса с ключевой
        строкой,  заданной  в  Key.  Если  индекс  содержит Key, то новый
        объект  замещает  старый. Объект добавляется в конец существующих
        объектов файла ресурса с использованием Stream^.Put

             См. также: TResourceFile.Get


             SwitchTo
                  function SwitchTo(AStream: PStream;
                                                Pack: Boolean): PStream;

             Переключает файл ресурса из его потока в поток, переданный в
        AStream, и возвращает в качестве результата указатель на исходный
        поток.

             Если  параметр  Pack  равен  True,  то перед записью в новый
        поток  он  будет отбрасывать пустое и неиспользуемое пространство
        из  файла  ресурса.  Это  единственный способ сжать файл ресурса.
        Копирование  с параметром Pack = False будет выполняться быстрее,
        но без сжатия.



         B.Pascal 7 & Objects/TV#2      - 289 -

         TScrollBar                                                Views
        -----------------------------------------------------------------


                                        Поля
        -----------------------------------------------------------------

             ArStep                                   (только для чтения)
                  ArStep: Integer;

             ArStep  представляет собой число, добавляемое или вычитаемое
        из  поля  Value  полосы прокрутки в случае, когда область стрелок
        выбрана мышью (sbLeftArrow, sbRightArrow, sbUpArrow, sbDownArrow)
        или обнаружены  эквивалентные  нажатия  клавиш.   По   умолчанию,
        TScrollBar.Init устанавливает ArStep равным 1.

              См. также:      TScrolBar.SetStep,     TScrollBar.SetParam,
        TScrollBarScrollStep


             Max                                      (только для чтения)
                  Max: Integer;

             Поле  Max  представляет собой максимальное значение поля Va-
        lue. По умолчанию, TScrollBar устанавливает Max равным 0.

             См. также: TScrollBar.SetRange, TScrollBar.SetParams


             Min                                      (только для чтения)
                  Min: Integer;

             Поле Min представляет собой минимальное значение поля Value.
        По умолчанию, TScrollBar устанавливает Min равным 0.

             См. также: TScrollBar.SetRange, TScrollBar.SetParams


             PgStep                                   (только для чтения)
                  PgStep: Integer;

             PgStep представляет собой число,  добавляемое или вычитаемое
        из поля Value полосы прокрутки, когда событие перещелкивания "мы-
        ши" возникает в любой области страницы (sbPageLeft,  sbPageRight,
        sbPageUp,  sbPageDown)  или  обнаруживаются эквивалентные нажатия
        клавиш (Ctrl-Ў, Ctrlў, PgUp, PgDn). По умолчанию, TScrollBar.Init
        устанавливает  PgStep равным 1.  PgStep можно изменять при помощи
        TScrollBar.SetStep, TScrollBar.SetParams и TScroller.SetLimit.

             См. также:     TScrollBar.SetStep,     TScrollBar.SetParams,
        TScroller.SetLimit, TScrollBar.ScrollStep



         B.Pascal 7 & Objects/TV#2      - 290 -

              Value                                   (только для чтения)
                  Value : Integer;

             Поле  Value  представляет  собой  текущую позицию индикатора
        полосы  прокрутки.  Этот  маркер,  выделенный специальным цветом,
        перемещается  по полосе прокрутки, указывая относительную позицию
        (горизонтальную  или  вертикальную,  в зависимости от типа полосы
        прокрутки)  видимого текста относительно всего текста, доступного
        для  просмотра.  Многие события могут прямо или косвенно изменять
        значение  Value (такие, как отметки с помощью "мыши" на элементах
        полосы прокрутки, изменение размера окна или изменение текста при
        прокрутке). Аналогично, изменения в Value могут потребовать запу-
        ска  других  событий.  По умолчанию TScroolBar.Init устанавливает
        Value равным 0.

             См. также:     TScrollBar.SetValue,    TScrollBar.SetParams,
        TScrollBar.ScrollDraw, TScroller.HandleEvent, TScrollBar.Init


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect);

             Создает  и  инициализирует  полосу прокрутки с границами Bo-
        unds,  вызывая  конструктор Init, унаследованный от TView. Value,
        Max и Min устанавливаются равными 0. PgStep и ArStep устанавлива-
        ются  равными 1. Формы элементов полосы прокрутки устанавливаются
        равными определенным по умолчанию в TScrollChars.

             Если  Bounds  задает Size.X = 1, то Вы получите вертикальную
        полосу прокрутки, в противном случае - горизонтальную. Вертикаль-
        ные  полосы  прокрутки  имеют  поле GrowMode,  равное gfGrowLoX +
        gfGrowHiX + gfGrowHiY;  вертикальные полосы прокрутки имеют  поле
        GrowMode, равное gfGrowLoY + gfGrouHiX + gfGrowHiY.


             Load
                  constructor Load(var S: TStream);

             Создает  и  загружает  полосу прокрутки из потока S, вызывая
        конструктор  Load,  унаследованный  от  TView, а затем считывая 5
        целочисленных полей с помощью метода S.Read.

             См. также: TScrollBar.Store


             Draw
                  procedure Draw; virtual;

             Переопределяемость: никогда не переопределяется.


         B.Pascal 7 & Objects/TV#2      - 291 -

             Рисует  полосу  прокрутки  в зависимости от текущих значений
        Bounds, Value и палитры.

             См. также: TScrollBar.ScrollDraw, TScrollBar.Value


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: не переопределяется.

             Возвращает указатель на CScrollBar, палитру, используемую по
        умолчанию, для полосы прокрутки.


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: никогда не используется.

             Обрабатывает события полосы прокрутки, вызывая метод Handle-
        Event,  унаследованный от TView, затем анализируя Event.What. Со-
        бытия  "мыши" передаются владельцу полосы прокрутки (см.  функцию
        Message),  который должен изменять  полосы  прокрутки,  например,
        прокруткой текста. Метод TScrollBar.HandleEvent также определяет,
        какая часть полосы прокрутки была выбрана  "мышью"  (или  эквива-
        лентной комбинацией клавиш). Поле Value настраивается в соответс-
        твии с текущими значениями ArStep и PgStep,  и  индикатор  полосы
        прокрутки перерисовывается.

             См. также: TView.HandleEvent


             ScrollDraw
                  procedure ScrollDraw; virtual;

             Переопределяемость: используется редко.

             Метод  ScrollDraw вызывается каждый раз при изменении значе-
        ния  поля  Value.  По  умолчанию  ScrollDraw  посылает  сообщение
        cmScrollBarChanged владельцу полосы прокрутки:

                 Message(Owner, evBoadcast, cmScrollBarChanged, @Self);

             См. также: TScrollBar.Value, функция Message


             ScrollStep
                  function ScrollStep(Part: Integer): Integer; virtual;

             Переопределяемость: не переопределяется.

             По умолчанию ScrollStep возвращает положительное или отрица-

         B.Pascal 7 & Objects/TV#2      - 292 -

        тельное  значение  шага, в зависимости от части полосы прокрутки,
        заданной  в  Part,  и  текущих значений ArStep и PgStep. Аргумент
        Part  должен  быть  одной  из  констант  частей  полосы прокрутки
        sbXXXX, описанных в Главе 19.

             См. также: TScrollBar.SetStep, TScrollBar.SetParams, конста-
        нты sbXXXX


             SetParams
                  procedure SetParams(AValue, AMin, AMax,
                                           APgStep, AArStep: Integer);

             Метод SetParams устанавливает поля Value, Min, Max, PgStep и
        ArStep   равными  значениям,  переданным  в  AValue,  AMin, AMax,
        APgStep  и  AArStep.  Если  аргументы конфликтуют, то выполняются
        некоторые  настройки.  Например,   Min не может быть больше  Max,
        поэтому  если  AMax  <  AMin,  то Max устанавливается равным Min.
        Value должно лежать   в  диапазоне   [Min,  Max],  поэтому,  если
        Value < AMin, то Value  устанавливается  равным  Min; если AValue
        > AMax, то Value устанавливается  равным Max. DrawView отображает
        полосу прокрутки заново. Если Value изменяется, то будет  вызвана
        ScrollDraw.

             См. также:      TView.DrawView,       TScrollBar.ScrollDraw,
        TScrollBar.SetRange, TScrollBar.SetValue


             SetRange
                  procedure SetRange(AMin, AMax: Integer);

             Метод  SetRange  задает  допустимый диапазон для поля Value,
        устанавливая  Min  и  Max  равными AMin и AMax. SetRange вызывает
        SetParams,  поэтому  DrawView и ScrollBar будут вызываться в слу-
        чае, если изменения требуют перерисовки полосы прокрутки.

             См. также: TScrollBar.SetParams, TScrollBar.ScrollStep


             SetStep
                  procedure SetStep(APgStep, AArStep: Integer);

             SetStep устанавливает поля PgStep и ASrStep равным APgStep и
        AArStep,  соответственно. Этот метод вызывает SetParams с осталь-
        ными аргументами, равными их текущим значениям.

             См. также: TScrollBar.SetParams, TScrollBar.ScrollStep


             SetValue
                  procedure SetValue(AValue: Integer);

             Метод SetValue устанавливает поле Value равным AValue, вызы-

         B.Pascal 7 & Objects/TV#2      - 293 -

        вая SetParams с остальными аргументами, равными их текущим значе-
        ниям.  DrawView и ScrollDraw вызываются в случае, если этот вызов
        изменяет значение Value.

             См. также:     TScrollBar.SetParams,    TView.DrawView,
        TScrollBar.ScrollDraw, TScroller.ScrollTo


             Store
                  procedure Store(var S:TStream);

             Сохраняет  объект  TScrollBar  в  потоке  S, вызывая сначала
        метод Store, унаследованный от TView, а затем записывая 5 целочи-
        сленных полей в поток, используя S.Write.

             См. также: TScrollBar.Load


                                      Палитра
        -----------------------------------------------------------------

             Объекты полосы прокрутки используют палитру (определенную по
        умолчанию) CScrollBar, для отображения 4 и 5-го элементов станда-
        ртной палитры прикладной программы.

                                1   2   3
                              ╔═══╤═══╤═══╗
                 CScrollBar   ║ 4 │ 5 │ 5 ║
                              ╚═╤═╧═╤═╧═╤═╝
                 Страница ──────┘   │   └───── Индикатор
                 Стрелки  ──────────┘





         B.Pascal 7 & Objects/TV#2      - 294 -

         Тип TScrollChars                                       Views
        -----------------------------------------------------------------

             Описание: TScrollChars = array[0..4] of Char;

             Функция:  Массив,  представляющий  символы, используемые для
        рисования TScrollBar.

             См. также: TScrollBar


         TScroller                                                 Views
        -----------------------------------------------------------------

             TScroller задает виртуальное окно для прокрутки отображаемо-
        го  элемента,  имеющего  больший  размер.  Это означает, что этот
        отображаемый элемент позволяет пользователю просматривать большой
        отображаемый элемент в определенных границах. Он задает смещение,
        с  которого  метод  Draw  заполняет  видимую область. Все методы,
        необходимые для реализации прокрутки с помощью полосы прокрутки и
        клавиатуры, встроены в TScroller.

             Этот  базовый элемент прокрутки обеспечивает полезную основу
        для прокрутки таких отображаемых элементов, как текстовые отобра-
        жаемые элементы.


                                        Поля
        -----------------------------------------------------------------

             Delta                                    (только для чтения)
                  Delta: TPoint;

             Содержит  Х (горизонтальную) и Y (вертикальную) составляющие
        положения элемента прокрутки относительно виртуального отображае-
        мого  элемента.  Автоматическая  прокрутка достигается изменением
        одной  или  обоих  компонент в ответ, например, на события полосы
        прокрутки,  изменяющие  значения  поля  Value. "Ручная" прокрутка
        изменяет значение Delta, отображает изменения в поле Value полосы
        прокрутки и приводит к обновлению индикаторов полосы прокрутки.

             См. также: TScroller.ScrollDraw, TScroller.ScrollTo


             HScrollBar                               (только для чтения)
                  HScrollBar: PScrollBar;

             Указывает  на  горизонтальную  полосу прокрутки, связанную с
        этим  элементом  прокрутки.  Если  такой полосы прокрутки нет, то
        HScroolBar равен nil.

             Limit                                    (только для чтения)
                  Limit: TPoint;

         B.Pascal 7 & Objects/TV#2      - 295 -


             Limit.X  и  Limit.Y- это максимально допустимые значения для
        Delta.X и Delta.Y.

             См. также: TScroller.Delta


             VScrollBar                               (только для чтения)
                  VScrollBar: PScrollBar;

             Указывает на вертикальную полосу прокрутки, связанную с этим
        элементом  прокрутки.  Если  такой   полосы  прокрутки  нет,   то
        VScrollBar равно nil.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect;
                                 AHScrollBar, AVScrollBar: PScrollBar);

             Создает  и инициализирует объект TScroller с заданным разме-
        ром и полосами прокрутки. Вызывает конструктор Init, унаследован-
        ный  от  TView,  для  установки  размера  отображаемого элемента.
        Options   устанавливается   равным   ofSelectable,   а  EventMask
        устанавливается  равным evBroadcast. AHScrollBar должен быть nil,
        если  Вы  не  хотите   иметь  горизонтальную  полосу   прокрутки;
        аналогично, AVScrollBar должен быть nil, если Вы не хотите  иметь
        вертикальную полосы прокрутки.

            См. также: TView.Init, TView.Options, TView.EventMask


             Load
                  constructor Load(var S: TStream);

             Загружает  отображаемый элемент прокрутки из потока S, вызы-
        вая  сначала  конструктор  Load, унаследованный от TView, а затем
        восстанавливает указатели на полосы прокрутки, используя GetPeer-
        ViewPtr, и читает поля Delta и Limit, используя S.Read.

             См. также: TScroller.Store


             ChangeBounds
                  procedure ChangeBounds(var Bounds: TRect); virtual;

             Переопределяемость: не переопределяется.

             Изменяет  размер  элемента прокрутки, вызывая SetBounds. При
        необходимости элемент и полосы прокрутки перерисовываются вызовом
        DrawView и SetLimit.

         B.Pascal 7 & Objects/TV#2      - 296 -


             См. также:         TView.SetBounds,          TView.DrawView,
        TScroller.SetLimit


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: иногда переопределяется.

             Возвращает  указатель  на  используемую по умолчанию палитру
        элемента прокрутки CScroller.


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: используется редко.

             Обрабатывает большинство событий, вызывая метод HandleEvent,
        унаследованный   от   TView.    События-извещения   с    командой
        cmScrollBarChanged,    если   они   пришли   от   HScrollBar  или
        VScrollBar, приводят к вызову TScroller.ScrollDraw.

             См. также: TView.HandleEvent, TScroller.ScrollDraw


             ScrollDraw
                  procedure ScrollDraw; virtual;

             Переопределяемость: не переопределяется.

             Проверяет,  удовлетворяет  ли Delta соответствующим позициям
        полос прокрутки. Если нет, то Delta устанавливается равным прави-
        льному  значению,  и вызывается DrawView для перерисовки элемента
        прокрутки.

             См. также:         TView.DrawView,          TScroller.Delta,
        TScroller.HscrollBar, TScroller.VScrollBar


             ScrollTo
                  procedure ScrollTo(X, Y: Integer);

             Устанавливает  полосы  прокрутки  равными  (X,  Y),  вызывая
        HScrollBar^.SetValue(X)  и VScrollBar^.SetValue(Y), и перерисовы-
        вает отображаемый элемент, вызывая DrawView.

             См. также: TView.DrawView, TScroller.SetValue


             SetLimit
                  procedure SetLimit(X, Y: Integer);

         B.Pascal 7 & Objects/TV#2      - 297 -


             Устанавливает  Limit.X равным X, а Limit.Y равным Y, а затем
        вызывает  HScrollBar^.SetParams и VScrollVar^.SetParams (если эти
        полосы  прокрутки  существуют),  чтобы настроить их поля Max. Эти
        вызовы  могут  привести  к перерисовке полосы прокрутки. Наконец,
        вызывается DrawView для повторного отображения элемента прокрутки
        (если это необходимо).

             См. также:       TScroller.Limit,       TScroller.HScroller,
        TScroller.VScrollBar, TScrollBar.SetParams


             SetState
                  procedure SetState(AState: Word;
                                           Enable: Boolean); virtual;

             Переопределяемость: используется редко.

             Этот  метод  вызывается  каждый  раз при изменении состояния
        элемента  прокрутки.  Вызывает  метод SetState, унаследованный от
        TView,  для установки или сброса флагов состояния из AState. Если
        новое  состояние- sfSelected and sfActive, то SetState отображает
        полосы прокрутки, в противном случае они "скрываются" (становятся
        невидимыми).

             См. также: TView.SetState


             Store
                  procedure Store(var S: TStream);

             Записывает  элемент  прокрутки  в  поток  S, вызывая сначала
        метод Store, унаследованный от TView, а затем сохраняет ссылки на
        полосы прокрутки, используя PutPeerViewPtr, и, наконец, записыва-
        ет значения Delta и Limit, с помощью S.Write.

             См. также: TScroller.Load, TStream.Write


                                      Палитра
        -----------------------------------------------------------------

             Объекты  элемента прокрутки используют палитру, определенную
        по умолчанию, CScroller, для отображения 6 и 7 элементов стандар-
        тной палитры окна.

                               1   2
                             ╔═══╤═══╗
                 CScroller   ║ 6 │ 7 ║
                             ╚═╤═╧═╤═╝
                 Обычный ──────┘   └──── Подсвеченный



         B.Pascal 7 & Objects/TV#2      - 298 -

         Тип SearchRec                                          StdDlg
        -----------------------------------------------------------------

             Описание:  TSearchRec = record
                           Attr: Byte;
                           Time: Longint;
                           Size: Longint;
                           Name: string [12];
                        end;

             Функция:  Записи  TSearchRec  используются в объектах набора
        файлов  для  хранения  информации  о собранных файлах. TSearchRec
        реально представляет собой подмножество типа SearchSet, определе-
        нного  в  модуле  Dos, с отброшенными 21 байтами неиспользованной
        информации.  Attr представляет собой байт битов, содержащий атри-
        буты  файлов,  как это определено в модуле Dos. Time представляет
        собой  отметку  даты  и времени DOS, которую можно расшифровать с
        помощью  процедуры  UnpackTime  из  модуля  Dos. Size- это размер
        файла в байтах. Name- это строка, содержащая имя файла.

             См. также: модуль Dos в описании языка


         Тип TSItem                                             Dialogs
        -----------------------------------------------------------------

             Описание:  TSItem = record
                           Value: PString;
                           Next:  PSItem;
                        end;

             Функция:  Запись типа TSItem обеспечивает односвязный список
        из PString. Подобные списки могут быть полезны во многих програм-
        мах  на  Turbo  Vision,  где не требуется полная гибкость наборов
        строк  (см.  TCluster,  например). Функция NewSItem предназначена
        для добавления записей в список TSItem.


         TSortedCollection                                       Objects
        -----------------------------------------------------------------

             Объект  TSortedCollection является специализированным произ-
        водным  от  TCollection,  и  реализует  набор, отсортированный по
        ключу. Сортировка производится методом Compare, который Вы перео-
        пределяете,  чтобы задать свое определение упорядочивания элемен-
        тов. Когда новые элементы добавляются, они автоматически вставля-
        ются  в  порядке,  заданном методом Compare. Элементы можно нахо-
        дить,  используя  метод  Search.  В  случае, если Compare требует
        дополнительной   информации,  переопределите  виртуальный   метод
        KeyOf, возвращающий указатель для Compare.

             TSortedCollection  осуществляет  создание    отсортированных
        наборов  как  с  дублированием  ключей,  так  и  без  него.  Поле

         B.Pascal 7 & Objects/TV#2      - 299 -

        Duplicates определяет, допускается ли дублирование. По умолчанию,
        оно равно False, что указывает на тот факт, что дублирование зап-
        рещено, однако после создания отсортированного набора можно уста-
        новить Duplicates равным True для того,  чтобы допустить в наборе
        элементы с повторяющимися ключами.


                                        Поле
        -----------------------------------------------------------------

             Duplicates: Boolean;

             Определяет, допускаются ли в наборе элементы с повторяющими-
        ся  ключами.  По умолчанию Duplicates равно False, и вызов Insert
        для  элемента, ключ которого совпадает с уже существующим, приво-
        дит  к  тому, что новый элемент не вводится в набор; набор хранит
        только первый элемент с данным значением ключа.

             Если  установить  значение  Duplicates равным True, то набор
        вводит  элементы  с  повторяющимися ключами непосредственно перед
        первым существующим элементом с тем же значением ключа.

             См. также: TSortedCollection.Insert, TSortedCollection.Search


                                       Методы
        -----------------------------------------------------------------

             Load
                  consrtuctor Load (var S: TStream);

             Создает и загружает отсортированный набор из потока S, вызы-
        вая  сначала  конструктор  Load, унаследованный от TCollection, а
        затем считывает поле Duplicates, введенное TSortedCollection.

             См. также: TCollection.Load


             Compare
                  function Compare(Key1, Key2: Pointer): Integer;
                                                               virtual;

             Переопределяемость: всегда переопределяется.

             Compare-  это абстрактный метод, который должен быть переоп-
        ределен  во  всех  порожденных типах. Compare должен сравнивать 2
        ключевых значения и возвращать результат:

             ────────────────────────────────────────────
                  -1   если Key1 < Key2
                   0   если Key1 = Key2
                   1   если Key1 > Key2
             ────────────────────────────────────────────

         B.Pascal 7 & Objects/TV#2      - 300 -


             Key1 и Key2- это значения указателей, извлеченных из соотве-
        тствующего  набора  элементов  методом   TSortedCollection.KeyOf.
        Метод TSortedCollection.Search реализует двоичный поиск элементов
        набора, используя Compare для сравнения элементов.

             Внимание! Убедитесь в том, чтобы Compare вернула все возмож-
        ные значения: -1, 0 и 1. Даже наборы, которые никогда не содержат
        совпадающих элементов, должны возвращать 0 в случае, если Compare
        получает совпадающие ключи. Если Compare никогда не возвращает 0,
        то Search не будет работать правильно.

             См. также: TSortedCollection.KeyOf, TSortedCollection.Compare


             IndexOf
                  function IndexOf(Item: Pointer): Integer; virtual;

             Переопределяемость: не переопределяется.

             Использует  TSortedCollection.Search  для нахождения индекса
        элемента  Item.  Если  элемент не содержится в наборе, то IndexOf
        возвращает            -1.        Действительная        реализация
        TSortedCollection.IndexOf имеет вид:

                 if Search(KeyOf(Item), I) then IndexOf := I
                 else IndexOf := -1;

             См. также: TSortedCollection.Search


             Insert
                  procedure Insert(Item: Pointer); virtual;

             Переопределяемость: никогда не используется.

             Вызывает  TSortedCollection.Search  для  определения   того,
        существует  ли уже элемент, и если нет, то куда его вводить. Если
        элемент  с  ключом  Item  не найден в наборе, то он вставляется в
        позицию,  определенную  текущим индексом. Если элемент с таким же
        ключом существует, но Duplicates равно False, то набор игнорирует
        парный  элемент.  Если  Duplicates равно True, то набор вставляет
        Item перед первым существующим элементом с тем же ключом.

             Реализация TSortedCollection.Insert имеет вид:

                 if nоt Search(KeyOf(Item), I) then AtInsert(I, Item)

             См. также: TSortedCollection.Search


             KeyOf
                  function KeyOf(Item: Pointer): Pointer; virtual;

         B.Pascal 7 & Objects/TV#2      - 301 -


             Переопределяемость: иногда переопределяется.

             Для  данного элемента Item в наборе метод KeyOf должен возв-
        ращать    соответствующий    ключ    элемента.    По    умолчанию
        TSortedCollection.KeyOf     просто    возвращает   Item.    KeyOf
        переопределяется в  случае, когда  ключ элемента  не совпадает  с
        элементом.

             См. также: TSortedCollection.IndexOf


             Search
                  function Search(Key:  Pointer;
                                 var Index: Integer): Boolean; virtual;

             Переопределяемость: используется редко.

             Возвращает  значение  True  в случае, если элемент, заданный
        ключом  Key,  не  найден  в  отсортированном наборе. Если элемент
        найден,  то  Index  устанавливается  равным найденному индексу. В
        противном случае Index устанавливается равным индексу, куда будет
        помещаться  элемент  при  вставке. При поиске указанного элемента
        Search пользуется методом Compare.

            См.также: TSortedCollection.Insert, TSortedCollection.Compare


             Store
                  procedure Store (var S: TStream);

             Записывает  отсортированный набор в поток S, вызывая сначала
        метод  Store,  унаследованный  от TCollection, а затем записывает
        поле Duplicates, введенное TSortedCollection.

             См. также: TCollection.Store


         Объект TSortedListBox                                  StdDlg
        -----------------------------------------------------------------

             TSortedListBox  представляет собой TListBox, который предпо-
        лагает,  что вместо просто TCollection он имеет TSortedColection.
        Он  будет  осуществлять расширенный поиск во всем его содержимом.
        Он  используется  в  качестве  предшественника окна-списка файлов
        TFileList.


                                        Поля
        -----------------------------------------------------------------

             SearchPos
                  SearchPos: Word;

         B.Pascal 7 & Objects/TV#2      - 302 -


             SearchPos  указывает,  символа в какой позиции анализируется
        при расширенном поиске.


             ShiftState
                  ShiftState: Byte;

             ShiftState  содержит  текущее  состояние  клавиш  клавиатуры
        "Shift" для множественного выбора.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init (var Bounds: TRect;
                                 ANumCols: Word; AScrollBar: PScrollBar);

             Создает  отсортированное  окно-список,  вызывая  конструктор
        Init, унаследованный от TListBox, передавая ограничивающий прямо-
        угольник  Bounds,  количество  столбцов ANumCols и горизонтальную
        полосу  прокрутки  AScrollBar.  Поле  ShiftState инициализируется
        нулем, и курсор показывается над первым элементом.

             См. также: TListBox.Init


             HandleEvent
                  procedure HandleEvent (var Event: TEvent); virtual;

             Обрабатывает  обычные  для  окна-списка  события, такие, как
        нажатия кнопок мыши и нажатия клавиш управления курсором, вызывая
        метод HandleEvent, унаследованный от TListBox.

             Другие события клавиатуры обрабатываются напрямую для реали-
        зации  расширенного поиска. Это означает, что при нажатии пользо-
        вателем буквенной клавиши, фокус получает первое имя, начинающее-
        ся  с  этой  буквы.  При  нажатии другой символьной клавиши фокус
        переместится  на первый элемент, второй символ которого совпадает
        с введенным символом, если таковой существует; в противном случае
        фокус остается на прежнем месте. Этот процесс продолжается до тех
        пор, пока пользователь не выберет элемент или не переместит фокус
        к другому элементу с помощью мыши или клавиш управления курсором,
        в случае чего процесс расширенного поиска начинается заново.

             Поле SearchPos отслеживает, совпадение какого символа прове-
        ряется в настоящий момент в процессе расширенного поиска. Нажатие
        клавиши  Backspace  возвращает  процесс  на  один символ назад, к
        элементу, выбранному набором предыдущего символа.


             GetKey

         B.Pascal 7 & Objects/TV#2      - 303 -

                  function GetKey (var S: String): Pointer; virtual;

             Окна  с отсортированными списками требуют ключей, по которым
        сортировать  элементы.  GetKey  возвращает  указатель на ключ для
        строки  S. По умолчанию GetKey возвращает указатель на S. В зави-
        симости  от  стратегии  сортировки,  которую используют введенные
        Вами  объекты,  Вам, возможно, понадобится переопределить GetKey,
        чтобы он возвращал другой ключ.


             NewList
                  procedure NewList (AList: PCollection); virtual;

             Заменяет  отсортированный  набор, на который указывает List,
        вызывая  метод NewList, унаследованный от TListBox, который осво-
        бождает  List и устанавливает значение List равным AList, который
        должен  указывать  на  новый  отсортированный  набор. После этого
        NewList  переустанавливает  SearchPos  в  0, так, что расширенные
        поиски в новом списке будут начинаться с первого символа в строке
        элемента.

             См. также: TListBox.NewList



         B.Pascal 7 & Objects/TV#2      - 304 -

         TStaticText                                             Dialogs
        -----------------------------------------------------------------

             Объекты  TStaticText  представляют  простейшие  отображаемые
        элементы: они содержат фиксированный текст и игнорируют все собы-
        тия,  переданные им. Они используются как сообщения или пассивные
        метки. Потомки TStaticText выполняют более активную роль.


                                        Поля
        -----------------------------------------------------------------

             Text                                     (только для чтения)
                  Text: PString;

             Указатель  на  строку  текста,  которая  должна выводиться в
        отображаемом элементе.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect; AText: String);

             Создает  объект  со  статическим  текстом заданного размера,
        вызывая  сначала  конструктор  Init,  унаследованный  от TView, а
        затем устанавливая Text равным NewStr(AText).

             См. также: TView.Init


             Load
                  constructor Load (var S: TStream);

             Создает и инициализирует объект статического текста из пото-
        ка  S, вызывая сначала конструктор Load, унаследованный от TView,
        а затем считывает Text с помощью S.ReadStr. Используется совмест-
        но  с  TStaticText.Store  для  сохранения  и чтения отображаемого
        элемента со статическим текстом из потока.

             См. также: TViewLoad, TStaticText.Store, TStream.ReadStr


             Done
                  destructor Done; virtual;

             Переопределяемость: используется редко.

             Освобождает  строку  Text, а затем вызывает деструктор Done,
        унаследованный от TView, для уничтожения объекта.



         B.Pascal 7 & Objects/TV#2      - 305 -

             Draw
                  procedure Draw; virtual;

             Переопределяемость: переопределяется редко.

             Рисует  строку  текста  внутри  отображаемого  элемента (при
        необходимости  осуществляется перенос). Ctrl-M в тексте указывает
        на  начало  новой строки. Если строка начинается с Ctrl-C, то она
        центрируется в отображаемом элементе.


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: иногда переопределяется.

             Возвращает указатель на палитру, установленную по умолчанию,
        CStaticText.


             GetText
                  procedure GetText (var S: String); virtual;

             Переопределяемость: иногда переопределяется.

             Возвращает в S строку, на которую указывает Text.


             Store
                  procedure TStaticText.Store(var S: TStream);

             Сохраняет  объект  TStaticText  в  потоке S, вызывая сначала
        метод  Store,  унаследованный  от  TView, а затем считывая Text с
        помощью  S.WriteStr.  Используется  совместно с TStaticText.Store
        для  сохранения и чтения из потока отображаемого элемента со ста-
        тическим текстом.

             См. также: TStaticText.Load, TView.Store, TStream.WriteStr


                                      Палитра
        -----------------------------------------------------------------

             Статический текст использует назначенную по умолчанию палит-
        ру  CStaticText для отображения 6-го элемента стандартной палитры
        диалогового окна.

                                     1
                                   ╔═══╗
                      CStaticText  ║ 6 ║
                                   ╚═╤═╝
                      Цвет текста ───┘


         B.Pascal 7 & Objects/TV#2      - 306 -



         Тип TStatusDef                                         Menus
        -----------------------------------------------------------------

             Описание:  TStatusDef = record
                           Next: PStatusDef;
                           Min, Max: Word;
                           Items: PStatusItem;
                         end;

             Функция: Тип TStatusDef представляет собой определение стро-
        ки состояния. Поле Next указывает на следующий TStatusDef в спис-
        ке  строк состояния или nil, если это последняя строка состояния.
        Min  и Max определяют диапазон контекста подсказки, который соот-
        ветствует  строке  состояния.  Items  указывает на список пунктов
        строки состояния или nil, если в строке состояния нет элементов.

             Объект  TStatusLine  (отображаемый элемент строки состояния)
        имеет указатель на список записей TStatusDef и будет всегда отоб-
        ражать  первую  строку  состояния,  для  которой текущий контекст
        подсказки  находится  внутри диапазона Min и Max. Программа Turbo
        Vision автоматически обновляет строку состояния, вызывая TStatus-
        Line.Update из TProgram.Idle.

             Записи TStatusDef создаются с помощью функции NewStatusDef.

             См. также:  TStatusLine, TProgram.Idle, функция NewStatusDef


         Тип TStatusItem                                        Menus
        -----------------------------------------------------------------

             Описание:  TStatusItem = record
                           Next:      PStatusItem;
                           Text:      PString;
                           KeyCode:   Word;
                           Command:   Word;
                         end;

             Функция:  Тип  TStatusItem представляет собой элемент строки
        состояния,  который  может быть видим или невидим. Next указывает
        на  следующий TStatusItem в списке элементов строки состояния или
        nil, если это последний элемент. Text указывает на строку, содер-
        жащую  текст  элемента строки состояния (такой, как 'Alt-X Exit')
        или  nil,  если  элемент  строки состояния невидим (в этом случае
        элемент служит только для определения клавиши активации). KeyCode
        содержит скэн-код клавиши активации, связанной с элементом строки
        состояния  или  0, если элемент строки состояния не имеет клавиши
        активации.  Command  содержит  команду-событие  (см.    константы
        cmXXX), генерируемую при выборе элемента строки состояния.

             Записи TStatusItem являются не только визуализаторами элеме-

         B.Pascal 7 & Objects/TV#2      - 307 -

        нтов  строки состояния, но они также используются для определения
        клавиш  активации,  коды  которых  автоматически  преобразуются в
        команды. Метод TProgram.GetEvent вызывает TStatusLine.HandleEvent
        для  всех  событий  evKeyDown.  TStatusLine.HandleEvent сканирует
        текущую  строку  состояния  на  предмет нахождения там элементов,
        содержащих данный код клавиши, и если такой элемент находится, то
        он  преобразует это событие evKeyDown в событие evCommand со зна-
        чением Command, данным в TStatusItem.

             Записи TStatusItem создаются с помощью функции NewStatusKey.


             См. также:            TStatusLine,             NewStatusKey,
        TStatusLine.HandleEvent


         TStatusLine                                              Menus
        -----------------------------------------------------------------

             Объект  TStatusLine-  это  специализированный   отображаемый
        элемент,  обычно выводимый в нижней части экрана. Типичная строка
        состояния отображает список доступных оперативных клавиш, доступ-
        ную  память,  время  дня,  текущий  режим редактирования, а также
        подсказки  пользователю. Отображаемые элементы задаются в связан-
        ном  списке  методом InitStatusLine объекта программы, вызываемым
        конструктором программы. Отображаемая строка состояния зависит от
        контекста  подсказки  отображаемого  элемента,  имеющего  фокус в
        текущий  момент. Как и полоса меню, и оперативная область экрана,
        строка состояния обычно принадлежит группе TApplication.

             Элементы  строки  состояния  представляют  собой записи типа
        TStatusItem,  которые содержат поля для текстовой строки, отобра-
        жаемой  в строке состояния, кода оперативной клавиши, (обычно это
        функциональная  клавиша  или  комбинация  Alt-клавиша) и команды,
        генерируемой  в  случае,  если отображаемый текст выбирается "мы-
        шью", или нажимается оперативная клавиша.

             Содержимое  строки состояния зависит от контекста подсказки.
        Каждый  объект строки состояния содержит связанный список опреде-
        лений строки состояния Defs (типа TStatusDef), которые определяют
        диапазон  контекстов  подсказки и список элементов строки состоя-
        ния, отображаемых в случае, если текущий контекст подсказки нахо-
        дится  в  этом  диапазоне.  Кроме  того, в соответствии с текущим
        контекстом подсказки может отображаться предопределенная строка и
        hint.


                                        Поля
        -----------------------------------------------------------------

             Defs                                     (только для чтения)
                  Defs: PStatusDef;


         B.Pascal 7 & Objects/TV#2      - 308 -

             Указатель   на   текущий  связанный   список  записей   типа
        TStatusDef.   Список   для   использования   определяется текущим
        контекстом подсказки.

             См. также:  TStatusDef, TStatusLine.Update, TStatusLine.Hint

             Items                                    (только для чтения)
                  Items: PStatusItem;

             Указатель  на   текущий  связанный   список  записей    типа
        TStatusItem.

             См. также: TStatusItem


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect; ADefs: PStatusDef);

             Создает  объект  строки состояния с размером Bounds, вызывая
        конструктор  Init,  унаследованный  от  TView.  Устанавливает бит
        ofPreProcess  в  Options,  EventMask устанавливается таким, чтобы
        включать evBroadcast, а GrowMode устанавливается равным gfGrowLoY
        +  gfGrowHiX + gfGrowHiY. Поле Defs устанавливается равным ADefs.
        Если ADefs имеет значение nil,  то Items  устанавливается  равным
        nil,    в   противном   случае   Items   устанавливается   равным
        ADefs^.Items.

             См. также: TView.Init


             Load
                  constructor Load(var S: TStream);

             Создает объект строки состояния и загружает его из потока S,
        вызывая  сначала  конструктор  Load,  унаследованный  от TView, а
        затем читая из потока Defs и Items.

             См. также: TView.Load, TStatusLine.Store


             Done
                  destructor Done; virtual;

             Переопределяемость: никогда не переопределяется.

             Уничтожает  все  Items  и Defs в объекте строки состояния, а
        затем вызывает TView.Done для уничтожения самого объекта.

             См. также: TView.Done


         B.Pascal 7 & Objects/TV#2      - 309 -


             Draw
                  procedure Draw; virtual;

             Переопределяемость: используется редко.

             Отображает  строку состояния, выводя строку Text для каждого
        элемента строки состояния, если она существует, а затем, вслед за
        полосой  разделителя  все  подсказки,  определенные  для текущего
        контекста подсказки.

             См. также: TStatusLine.Hint


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: иногда используется.

             Возвращает  указатель  на  используемую по умолчанию палитру
        CStatusLine.


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: используется редко.

             Обрабатывает  большую  часть  событий,  передаваемых  строке
        состояния,  вызывая метод HandleEvent, унаследованный от TView, а
        затем проверяет 3 вида специальных событий:

             - отметки с помощью "мыши",  которые попадают внутрь прямоу-
        гольника,  занимаемого элементом строки состояния,  и  генерирует
        командное событие с Event.What, равным Command, для этого элемен-
        та строки состояния;

             - события от клавиатуры сравниваются с полем KeyCode каждого
        элемента; их совпадение вызывает командное событие с Command это-
        го элемента;

             - coобщения с командой cmCommandSetChanged заставляют строку
        состояния  заново отображаться,  чтобы отразить любые оперативные
        клавиши, которые могут стать разрешены или запрещены.

             См. также: TView.HandleEvent


             Hint
                  function Hint(AHelpCtx: Word): String; virtual;

             Переопределяемость: часто используется.


         B.Pascal 7 & Objects/TV#2      - 310 -

             По  умолчанию  Hint  возвращает пустую строку. Он может быть
        переопределен  в  объектах,  порожденных  строкой  состояния, для
        возврата  строки  контекстно-зависимой  подсказки  для  параметра
        AHelpCtx.  Непустая  строка будет отображаться в строке состояния
        после полосы-разделителя.
             См. также: TStatusLine.Draw


             Store
                  procedure Store(var S: TStream);

             Сохраняет объект строки состояния в потоке S, вызывая снача-
        ла  метод  Store,  унаследованный  от  TView, а затем записывая в
        поток все определения состояния и связанные с ними списки элемен-
        тов.  Сохраненный объект может быть восстановлен с помощью метода
        TStatusLine.Load.

             См. также: TView.Store, TStatusLine.Load


             Update
                  procedure Update;

             Выбирает  допустимые элементы Items из списка в Defs в зави-
        симости от текущего контекста подсказки, а затем вызывает DrawVi-
        ew  для  перерисовки  строки состояния, если эти элементы измени-
        лись.

             См. также: TStatusLine.Defs


                                      Палитра
        -----------------------------------------------------------------

             Строки состояния используют палитру, определенную по умолча-
        нию, CStatusLine, для отображения элементов со 2 по 7-й стандарт-
        ной палитры программы.

                          1    2    3    4    5    6
                       ╔════╤════╤════╤════╤════╤════╗
        CStatusLine    ║  2 │  3 │  4 │  5 │  6 │  7 ║
                       ╚══╤═╧══╤═╧══╤═╧══╤═╧══╤═╧══╤═╝
                          │    │    │    │    │    │
        Нормальный текст ─┘    │    │    │    │    └── Выбранная
                               │    │    │    │        оперативная клавиша
        Запрещенный текст ─────┘    │    │    └─────── Выделенный
                                    │    │             запрещенный
        Текст оперативной ──────────┘    └──────────── Выделенный
        клавиши                                        нормальный




         B.Pascal 7 & Objects/TV#2      - 311 -

         TStream                                                  Objects
        -----------------------------------------------------------------

             TStream - это общий абстрактный объект, обеспечивающий поли-
        морфический ввод-вывод устройства типа памяти.  Вы можете создать
        порожденный  объект  потока,  переопределяя  виртуальные   методы
        GetPos, GetSize, Read, Seek, Truncate и Write. Turbo Vision дела-
        ет это в порожденных потоках TDosStream и TEmsStream.  Для порож-
        денного буферизованного потока Вы должны также переопределять ме-
        тод TStream.Flush.


                                        Поля
        -----------------------------------------------------------------

             ErrorInfo                                     (чтение/запись)
                  ErrorInfo: Integer;

             Содержит дополнительную информацию в случае, когда Status не
        равен  stOK.   Для   значений   Status:   stError,   stInitError,
        stReadError,  stWriteError, ErrorInfo содержит код ошибки DOS или
        EMS,  если он доступен.  Когда Status равен stGetError, ErrorInfo
        содержит   идентификатор   ID   типа   объекта  (поле  ObjType  в
        TStreamRec) незарегистрированного типа объекта.  Когда Status ра-
        вен stPutError, ErrorInfo содержит смещение VMT в сегменте данных
        (поле VmtLink в TStreamRec) незарегистрированного типа объекта.


             Status                                       (чтение/запись)
                  Status: Integer;

             Указывает текущее состояние потока. Значение Status предста-
        вляет  собой  одну из констант stXXXX. Если Status не равен stOK,
        то  все  операции над потоком приостанавливаются до тех пор, пока
        не будет вызван Reset.

             См. также: константы потока stXXXX


                                       Методы
        -----------------------------------------------------------------

             CopyFrom
                  procedure CopyFrom(var S: TStream; Count: Longint);

             Копирует  Count  байт из потока S в вызывающий поток. Напри-
        мер:
                 {создает копию всего потока}
                 NewStream := New(TEmsStream, Init(OldStream^.GetSize));
                 OldStream^.Seek(0);
                 NewStream^.CopyFrom(OldStream, OldStream^.GetSize);

             См. также: TStream.GetSize, TObject.Init

         B.Pascal 7 & Objects/TV#2      - 312 -



             Error
                  procedure Error(Code, Info: Integer); virtual;

             Переопределяемость: иногда переопределяется.

             Вызывается  каждый  раз,  когда  возникает ошибка потока. По
        умолчанию  TStream.Error  сохраняет  Code и Info в полях Status и
        ErrorInfo.  Затем,  если  глобальная переменная StreamError имеет
        значение,   отличное  от  nil,  вызывает  процедуру,  заданную  в
        StreamError.  После   возникновения  ошибки,   все  операции  над
        потоком приостанавливаются до тех пор, пока не будет вызван метод
        Reset.

             См. также: TStream.Reset, переменную StreamError


             Flush
                  procedure Flush; virtual;

             Переопределяемость: иногда переопределяется.

             Это  абстрактный  метод, который должен быть переопределен в
        случае,  если  порожденный  тип реализует буфер. Этот метод может
        работать с любыми буферами, очищая буфер чтения и записывая буфер
        вывода. По умолчанию TStream.Flush ничего не делает.

             См. также: TDosStream.Flush


             Get
                  function Get: PObject;

             Считывает  объект  из потока и возвращает указатель на него.
        Объект  должен  быть  предварительно  записан  в  поток с помощью
        TStream.Put.  Get  вначале читает из потока идентификатор ID типа
        объекта  (слово).  Затем  он находит соответствующий тип объекта,
        сравнивая ID с полем ObjType всех зарегистрированных типов объек-
        тов  (см.  тип  TStreamRec).  Наконец,  вызывает конструктор Load
        этого  типа объекта для создания и инициализации объекта. Если ID
        типа  объекта,  считанного  из потока, равен 0, то Get возвращает
        указатель nil. Если ID типа объекта не зарегистрирован (с помощью
        RegisterType),  то Get вызывает TStream.Error и возвращает указа-
        тель  nil;  в  противном случае Get возвращает указатель на вновь
        созданный объект.

             См. также:  методы TStream.Put,  RegisterType,  TStreamRec,
        Load


             GetPos
                  function GetPos: Longint; virtual;

         B.Pascal 7 & Objects/TV#2      - 313 -


             Переопределяемость: всегда переопределяется.

             Возвращает  текущую позицию в потоке. Этот абстрактный метод
        должен всегда переопределяться.

             См. также: TStream.Seek


             GetSize
                  function GetSize: Longint; virtual;

             Переопределяемость: всегда переопределяется.

             Возвращает  размер  потока.  Это  абстрактный метод, который
        должен переопределяться.


             Put
                  procedure Put(P: PObject);

             Записывает  объект  в  поток.  Объект позже можно считать из
        потока,  используя метод TStream.Get. Put вначале находит регист-
        рационную запись типа этого объекта, сравнивая смещение VMT объе-
        кта  с  полем VmtLink всех зарегистрированных типов объектов (см.
        тип  TStreamRec).  Затем записывает ID типа объекта (поле ObjType
        регистрационной  записи)  в поток, и наконец вызывает метод Store
        этого типа объекта для записи объекта.

             Если  аргумент  Р,  переданный в Put, имеет значение nil, то
        метод Put записывает в поток слово, содержащее 0. Если тип объек-
        та  в Р не зарегистрирован (с помощью RegisterType), то Put вызы-
        вает TStream.Error и ничего не пишет в поток.

             См. также:  методы  TStream.Get,  RegisterType,  TStreamRec,
        Store


             Read
                  procedure Read(var Buf; Count: Word); virtual;

             Переопределяемость: переопределяется всегда.

             Это  абстрактный метод, и он должен переопределяться во всех
        порожденных типах. Read должен считать Count байт из потока в Buf
        и переместить текущую позицию потока на Count байт. Если произош-
        ла  ошибка,  то  метод Read должен вызывать Error и заполнять Buf
        Count байтами, равными 0.

             См. также: TStream.Write, TStream.Error


             ReadStr

         B.Pascal 7 & Objects/TV#2      - 314 -

                  function ReadStr: PString;

             Считывает строку начиная с текущей позиции вызывающего пото-
        ка,  возвращая  указатель  на  PString.  TStream.ReadStr вызывает
        GetMem для выделения (Length+1) байт для строки.

             См. также: TStream.WriteStr


             Reset
                  procedure Reset;

             Сбрасывает  ошибочное  условие  потока,  устанавливая Status
        (состояние)  и  ErrorInfo  (информация об ошибке) равными 0. Этот
        метод  позволяет  продолжать обработку потока после возникновения
        ошибочной ситуации, которую Вы скорректировали.

             См. также:  TStream.Status,  TStream.ErrorInfo,  коды ошибок
        stXXXX


             Seek
                  procedure Seek(Pos: Longint); virtual;

             Переопределяемость: всегда переопределяется.

             Это  абстрактный метод, и он должен переопределяться во всех
        потомках.  TStream.Seek  устанавливает текущую позицию в Pos байт
        от начала потока. Начало потока- позиция 0.

             См. также: TStream.GetPos


             Truncate
                  procedure Truncate; virtual;

             Переопределяемость: всегда переопределяется.

             Это  абстрактный метод, и он должен переопределяться во всех
        потомках.  TStream.Truncate удаляет из потока все данные от теку-
        щей позиции до конца.

             См. также: TStream.GetPos, TStream.Seek


             Write
                  procedure Write(var Buf; Count: Word); virtual;

             Переопределяемость: всегда переопределяется.

             Это  абстрактный  метод,  который должен переопределяться во
        всех  порожденных  типах.  Write  записывает  Count байт из Buf в
        поток  и  перемещает  текущую  позицию потока на Count байт. Если

         B.Pascal 7 & Objects/TV#2      - 315 -

        возникла ошибка, то Write должен вызвать Error.

             См. также: TStream.Read, TStream.Error


             WriteStr
                  procedure WriteStr(P: PString);

             Записывает  строку  P^ в вызывающий поток, начиная с текущей
        позиции.

             См. также: TStream.ReadStr




         B.Pascal 7 & Objects/TV#2      - 316 -

         Тип TStreamRec                                         Objects
        -----------------------------------------------------------------

             Описание:
                           TStreamRec = record
                             ObjType: Word;
                             VmLink: Word;
                             Load: Pointer;
                             Store: Pointer;
                             Next: Word;
                           end;

             Функция: Тип объекта Turbo Vision должен иметь зарегистриро-
        ванную  TStreamRec  до  его  загрузки  или  сохранения  в объекте
        TStream.   Подпрограмма RegisterTypes  регистрирует тип  объекта,
        определяя запись TStreamRec.

             Поля  в  регистрационной  записи потока определены следующим
        образом:

                       Таблица 19.42. Поля записи потока.
             ------------------------------------------------------------
             Поле      Содержимое
             ------------------------------------------------------------
             ObjType   Уникальный числовой идентификатор для типа объекта

             VmtLine   Связь типа объекта с элементом VMT (таблицы
                       виртуальных методов)

             Load      Указатель на конструктор Load типа объекта

             Store     Указатель на метод Store типа объекта

             Next      Указатель на следующую TStreamRec
             -------------------------------------------------------------

             Внимание!  Turbo Vision резервирует значения идентификаторов
        типов объектов от 0 до 999 для внутреннего использования. Програ-
        ммист  может  определить  свои  значения  в  диапазоне от 1000 до
        65535.

             По  соглашению, tStreamRec для типа объекта Txxxx называется
        Rxxxx.  Например,  TStreamRec  для  типа  TCalculator  называется
        RCalculator, как показано в следующем тексте:

                      type
                        TCalculator = object(TDialog)
                          constructor Load(var S: TStream);
                          procedure Store(var S: TStream);
                          ...
                        end;

                      const

         B.Pascal 7 & Objects/TV#2      - 317 -

                        RCalculator: TStreamRec = (
                          ObjType: 2099;
                          VmtLink: Ofs(TypeOf(TCalculator)^);
                          Load: @TCalculator.Load;
                          Store: @TCalculator.Store);

                      begin
                        RegisterType(RCalculator);
                        ...
                      end;

             См. также: RegisterType


         Тип TStrIndex                                          Objects
        -----------------------------------------------------------------

             Описание:
                       TStrIndex = array[0..9999] of TStrIndexRec;

             Функция:  Предназначен  для   внутреннего  использования   в
        TStringList и TStrListmaker.


         Тип TStrIndexRec                                       Objects
        -----------------------------------------------------------------

             Описание:  TStrIndexRec = record
                           Key, Count, Offset: Word;
                         end;

             Функция:  Служит для внутреннего использования в TStringList
        и TStrListmaker.


         TStringCollection                                       Objects
        -----------------------------------------------------------------

             Объект    TStringCollection    является    производным    от
        TSortedCollection  и   реализует  отсортированный   список  строк
        ASCII.  Метод  TStringCollection.Compare   переопределяется   для
        задания обычного лексикографического упорядочения строк ASCII. Вы
        можете  переопределить    метод  Compare   для  задания   другого
        упорядочения, например, для неанглийских наборов символов.


                                       Методы
        -----------------------------------------------------------------

             Compare
                  function Compare(Key1, Key2: Pointer): Integer;
                                                               virtual;


         B.Pascal 7 & Objects/TV#2      - 318 -

             Переопределяемость: иногда переопределяется.

             Сравнивает  строки Key1^ и Key2^: возвращает -1, если Key1 <
        Key2; 0, если Key1 = Key2 и +1, если Key1 > Key2.

             См. также: TSortedCollection.Search


             FreeItem
                  procedure FreeItem(Item: Pointer); virtual;

             Переопределяемость: используется редко.

             Удаляет строку Item^ из отсортированного набора и освобожда-
        ет память, выделенную под эту строку.


             GetItem
                  function GetItem(var S: TStream): Pointer; virtual;

             Переопределяемость: переопределяется редко.

             По умолчанию читает строку из TStream, вызывая S.ReadStr.

             См. также: TStream.ReadStr


             PutItem
                  procedure PutItem(var S: TStream;
                                                Item: Pointer); virtual;

             Переопределяемость: переопределяется редко.

             По  умолчанию  записывает  строку  Item^  в поток S, вызывая
        метод S.WriteStr.

             См. также: TStream.WriteStr


         TStringList                                             Objects
        -----------------------------------------------------------------

             Объект  TStringList  предоставляет  механизм  для  доступа к
        строкам,  хранящимся в потоке. Каждая строка, хранящаяся в списке
        строк,  идентифицируется  уникальным номером (ключом) в интервале
        от  0  до 65535. Списки строк занимают меньше памяти, чем обычные
        строки,  поскольку строки хранятся в потоке, а не в памяти. Кроме
        того,  списки  строк  легко решают проблему настройки программ на
        разные языки, поскольку строки не "встроены" в программу.

             TStringList  включает  методы  только для доступа к строкам;
        для создания списка строк Вы должны использовать TStrListMaker.


         B.Pascal 7 & Objects/TV#2      - 319 -

             Заметим,  что TStringList и TStrListMaker имеют один ID типа
        объекта  (поле  ObjType  в  TStreamRec) и следовательно, не могут
        регистрироваться и использоваться одновременно в одной программе.


                                       Методы
        -----------------------------------------------------------------

             Load
                  constructor Load(var S:TStream);

             Загружает индекс списка строк из потока S и хранит ссылку на
        S  так, что TStringList.Get может позднее обращаться к потоку при
        чтении строк.

             Считая, что   TStringList   был  зарегистрирован  с  помощью
        RegisterType(RStringList),  далее  показано,  как  создать  копию
        списка    строк    (созданного    с   помощью   TStrListMaker   и
        TResourseFile.Put) из файла ресурса:

                 ResFile.Init(New(TBufStream, Init('MYAPP.RES',
                          stOpenRead, 1024)));
                 Strings := PStringList(ResFile.Get('Strings'));

             См. также: TStrListMaker.Init, TStringList.Get


             Done
                  destructor Done; virtual;

             Переопределяемость: не переопределяется.

             Освобождает память, выделенную для списка строк.

             См. также: TStrListMaker.Init, TStringList.Done


             Get
                  function Get(Key: Word): String;

             Возвращает строку, заданную Key, или пустую строку, если нет
        строки с данным Key. Например:

                 P := @FileName;
                 FormatStr(S, Strings^.Get(sLoadingFile), P);

             См. также: TStringListMaker.Put


         StrListMaker                                           Objects
        -----------------------------------------------------------------

             Объект  TStrListMaker- это простой тип объекта, используемый

         B.Pascal 7 & Objects/TV#2      - 320 -

        для создания списка строк, который используют с TStringList.

             Следующий  фрагмент исходного текста демонстрирует, как соз-
        давать и сохранять список строк в файле ресурса.

                 const
                   sInformation = 100;
                   sWarning     = 101;
                   sError       = 102;
                   sLoadingFile = 200;
                   sSavingFile  = 201;

                 var
                   ResFile: TResourceFile;
                   S: TStrListMaker;

                 begin
                   RegisterType(RStrListMaker);
                   ResFile.Init(New(TBufStream, Init('MYAPP.RES',
                                                     stCreate, 1024)));
                   S.Init(16384, 256);
                   S.Put(sInformation, 'Information');
                   S.Put(sWarning, 'Warning');
                   S.Put(sError, 'Error');
                   S.Put(sLoadingFile, 'Loading file #s.');
                   S.Put(sSavingFile, 'Saving file #s.');
                   ResFile.Put(@S,'Strings');
                   S.Done;
                   ResFile.Done;
                 end;


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(AStrSize, AIndexSize: Word);

             Создает в памяти список строк размера AStrSize с индексом из
        AIndexSize  элементов.  В  динамической  области выделяется буфер
        строк и буфер индексов заданного размера.

             AStrSize  должен  быть  достаточно  велик  для хранения всех
        строк,  добавляемых  в  список строк (каждая строка занимает свою
        длину, плюс 1 байт).

             При  добавлении  строк  в  список  строк  (с  использованием
        TStrListMaker.Put) строится индекс строк. Строки с последователь-
        ными  ключами (такими, как sInformation, sWarning и sError в пре-
        дыдущем примере) записываются в одну индексную запись в количест-
        ве  до  16 за один раз. AIndexSize должен быть достаточно большим
        для  добавления  всех  сгенерированных  индексных записей. Каждый
        элемент индекса занимает 6 байт.

         B.Pascal 7 & Objects/TV#2      - 321 -


             См. также: TStringList.Load, TStrListMaker.Done


             Done
                  destructor Done; virtual;

             Освобождает память, выделенную этим объектом.

             См. также: TStrListMaker.Init


             Put
                  procedure Put(Key: Word; S: String);

             Добавляет String к списку строк (с заданным числовым Key).


             Store
                  procedure Store(var S: TStream);

             Сохраняет список строк в потоке S.


         Тип TSysErrorFunc                                      Drivers
        -----------------------------------------------------------------

             Описание:
                  TSysErrorFunc   =   function(ErrorCode:   Integer;
        Drive: Byte): Integer;

             Функция:  Определяет тип функции обработчика системной ошиб-
        ки.

             См. также:    SysErrorFunc,    SystemError,    InitSysError,
        DoneSysError


         TStringLookupValidator                                 Validate
        -----------------------------------------------------------------

             Объект определителя допустимости соответствия строк проверя-
        ет  данные  в  связанной строке ввода, осуществляя поиск в наборе
        допустимых строк. Используйте определитель допустимости соответс-
        твия  строк  в случае, если Ваша строка ввода должна воспринимать
        только элементы определенного множества строк.


                                        Поле
        -----------------------------------------------------------------

             Strings
                  Strings: PStringCollection;

         B.Pascal 7 & Objects/TV#2      - 322 -


             Указывает  на набор строк, содержащий все допустимые строки,
        которые  пользователь  может  вводить. Если Strings равна nil, то
        любой ввод будет недопустимым.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init (AStrings: PStringCollection);

             Создает объект определителя допустимости соответствия строк,
        вызывая     сначала    конструктор   Init,   унаследованный    от
        TLookupValidator, а затем устанавливает Strings равным AStrings.

             См. также: TLookupValidator.Init


             Load
                  constructor Load(var S: TStream);

             Создает и загружает объект определителя допустимости соотве-
        тствия строк из потока S, вызывая сначала конструктор Load, унас-
        ледованный  от  TLookupValidator,  а  затем считывает набор строк
        Strings.

             См. также: TLookupValidator.Load


             Done
                  destructor Done; virtual;

             Освобождает  память, занятую списком допустимых строк, вызы-
        вая NewStringList (nil), а затем освобождает память из-под объек-
        та определителя допустимости соответствия строк, вызывая деструк-
        тор Done, унаследованный от TLookupValidator.

             См.              также:               TLookupValidator.Done,
        TStringLookupValidator.NewStringList


             Error
                  procedure Error; virtual;

             Выводит  сообщение о том, что введенная строка не совпала ни
        с одной из строк списка.


             Lookup
                  function Lookup (const S: string): Boolean; virtual;

             Возвращает  True в случае, если строка, переданная в S, сов-

         B.Pascal 7 & Objects/TV#2      - 323 -

        падает с одной из строк из Strings. Использует метод Search набо-
        ра строк для определения того, содержится ли там строка S.

             См. также: TSortedCollection.Search


             NewStringList
                  procedure NewStringList (AStrings: PStringCollection);

             Устанавливает список допустимых строк ввода для определителя
        допустимости  соответствия  строк.  Уничтожает любой существующий
        список  строк,  а  затем  устанавливает  Strings равным AStrings.
        Передача  в  качестве AString значения nil приводит к уничтожению
        старого списка без создания нового.


             Store
                  procedure Store(var S: TStream);

             Записывает  объект  определителя  допустимости  соответствия
        строк  в  поток S, вызывая сначала метод Store, унаследованный от
        TValidator, а затем записывает набор строк, хранящийся в Strings.


         TTerminal                                              TextView
        -----------------------------------------------------------------

             Объект TTerminal реализует "тупой" терминал с буферизованным
        чтением  и записью строк. По умолчанию это циклический буфер раз-
        мером  64К байт. Отображаемый элемент терминала является примером
        драйвера устройства текстового файла, связанного с прокручиваемым
        отображаемым элементом.


                                        Поля
        -----------------------------------------------------------------

             Buffer                                   (только для чтения)
                  Buffer: PTerminalBuffer;

             Указывает на первый байт буфера терминала.


             BufSize                                   (только для чтения)
                  BufSize: Word;

             Размер буфера терминала в байтах.


             QueBack                                   (только для чтения)
                  QueBack: Word;

             Смещение  (в байтах) последнего байта, сохраненного в буфере

         B.Pascal 7 & Objects/TV#2      - 324 -

        терминала.


             QueFront                                  (только для чтения)
                  QueFront: Word;

             Смещение  (в  байтах)  первого  байта, сохраненного в буфере
        терминала.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect;
                                 AHScrollBar, AVScrollBar: PScrollBar;
                                                     ABufSize: Word);

             Создает объект TTerminal с данными границами Bounds, горизо-
        нтальной  и  вертикальной  полосами  прокрутки и буфером, вызывая
        конструктор  Init,  унаследованный  от TTextDevice, с аргументами
        Bounds  и  полосами  прокрутки,  затем  создает буфер (на который
        указывает Buffer) с BufSize, равным ABufSize. GrowMode устанавли-
        вается  равным значению gfGrowHiX + gfGrowHiY. QueFront и QueBack
        инициализируются  равными  0,  указывая  на  пустой буфер. Курсор
        выводится в начале отображаемого элемента (0, 0).

             См. также: TScroller.Init


             Done
                  destructor Done; virtual;

             Переопределяемость: иногда используется.

             Освобождает буфер и вызывает деструктор Done, унаследованный
        от TTextDevice, для уничтожения объекта.

             См. также: TScroller.Done, TTextDevice.Done


             BufDec
                  procedure BufDec(var Val: Word);

             Используется  для  манипуляции смещением очереди с кольцевым
        переносом: если Val = 0, то Val устанавливается равным BufSize-1,
        в противном случае значение Val уменьшается на 1.

             См. также: TTerminal.BufInc


             BufInc
                  procedure BufInc(var Val: Word);

         B.Pascal 7 & Objects/TV#2      - 325 -


             Используется  для  манипуляции смещением очереди с кольцевым
        переносом, увеличивая Val на 1; в случае, если Val >= BufSize, то
        Val устанавливается равным 0.

             См. также: TTerminal.BufDec


             CalcWidth
                  function CalcWidth: Integer;

             Возвращает длину самой длинной строки в текстовом буфере.


             CanInsert
                  function CanInsert(Amount: Word): Boolean:

             Возвращает   значение   True,  если  число  байт, заданное в
        Amount, можно вставить в буфер без уничтожения верхней строки.


             Draw
                  procedure Draw; virtual;

             Переопределяемость: используется редко.

             Вызывается  каждый  раз,  когда  элемент прокрутки TTerminal
        должен  быть  отображен  заново (например, когда полоса прокрутки
        выбрана мышью, когда изменен размер отображаемого элемента, когда
        изменены  значения  Delta, или когда добавление текста приводит к
        прокрутке).


             NextLine
                  function NextLine(Pos: Word): Word;

             Возвращает  смещение в буфере начала строки, которая следует
        за позицией Pos.

             См. также: TTerminal.PrevLines


             PrevLines
                  function PrevLines(Pos: Word; Lines: Word): Word;

             Переопределяемость: иногда переопределяется.

             Возвращает  смещение  в  буфере начала строки, которая стоит
        перед позицией Pos на Lines строк.


             QueEmpty
                  function QueEmpty: Boolean;

         B.Pascal 7 & Objects/TV#2      - 326 -


             Возвращает   значение  True  в  случае,  если QueFront равно
        QueBack.

             См. также: TTerminal.QueFront, TTerminal.QueBack


             StrRead
                  function StrRead(var S: TextBuf) : Byte; virtual;

             Переопределяемость: иногда используется.

             Это абстрактный метод, возвращающий 0. Вы должны переопреде-
        лить его, если хотите, чтобы производный тип мог читать строки из
        текстового буфера.


             StrWrite
                  procedure StrWrite(var S:TextBuf;
                                                Count: Byte); virtual;

             Переопределяемость: переопределяется редко.

             Вставляет Count строк текста, заданного с помощью S, в буфер
        терминала. Этот метод управляет любой требуемой прокруткой, выбо-
        рочно  перерисовывая  отображаемый   элемент  с  помощью   метода
        DrawView.

             См. также: TView.DrawView


                                      Палитра
        -----------------------------------------------------------------

             Объекты терминала используют назначенную по умолчанию палит-
        ру  CScroller для отображения элементов 6 и 7 стандартной палитры
        программы.

                               1   2
                             ╔═══╤═══╗
                 CScroller   ║ 6 │ 7 ║
                             ╚═╤═╧═╤═╝
                 Нормальный ───┘   └──── Подсвеченный


         Тип TTerminalBuffer                                    TextView
        -----------------------------------------------------------------

             Описание:  TTerminalBuffer = array[0..65519] of Char;

             Функция: Служит для внутреннего использования в TTerminal.

             См. также: TTerminal

         B.Pascal 7 & Objects/TV#2      - 327 -



         TTextDevice                                             TextView
        ------------------------------------------------------------------

             Метод TTextDevice представляет собой прокручиваемый визуали-
        затор  текста/драйвер устройства типа TTY. В дополнение к полям и
        методам, наследуемым от TScroller, TTextDevice определяет виртуа-
        льные методы для чтения и записи строк с устройства и на устройс-
        тво. TTextDevice существует как базовый тип для порождения реаль-
        ных  драйверов  терминалов.  TTextDevice использует конструктор и
        деструктор TScroller.


                                       Методы
        ------------------------------------------------------------------

             StrRead
                  function StrRead(var S:TextBuf): Byte; virtual;

             Переопределяемость: часто переопределяется.

             Абстрактный  метод,  возвращающий  по умолчанию 0. Вы должны
        переопределить  его в любом производном типе для чтения строки из
        текстового  устройства в S. Этот метод возвращает число прочитан-
        ных строк.


             StrWrite
                  procedure StrWrite(var S: TextBuf; Count: Byte); virtual;

             Переопределяемость: всегда переопределяется.

             Абстрактный метод для записи строки на устройство. Он должен
        переопределяться     в      порожденных     типах.      Например,
        TTerminal.StrWrite вставляет Count строк текста, заданных в S,  в
        буфер терминала, и перерисовывает отображаемый элемент.


                                      Палитра
        -----------------------------------------------------------------

             Объекты  текстового  устройства  используют  определенную по
        умолчанию палитру CScroller для отображения 6 и 7 элементов стан-
        дартной палитры программы.

                               1   2
                             ╔═══╤═══╗
                 CScroller   ║ 6 │ 7 ║
                             ╚═╤═╧═╤═╝
                 Нормальный ───┘   └──── Подсвеченный



         B.Pascal 7 & Objects/TV#2      - 328 -

         Тип TTitleStr                                          Views
        -----------------------------------------------------------------

             Описание:  TTitleStr = string[80];

             Функция:  Используется  для описания строк текста для окон с
        заголовками.

             См. также: TWindow.Title


─────────────────────────────────────────────────────────────────────────
         TValidator                                             Validate
        -----------------------------------------------------------------

             TValidator определяет абстрактный объект определителя допус-
        тимости   данных.  Вам   никогда  не  придется  создавать   копию
        TValidator,  однако  он  обеспечивает  большую  часть абстрактных
        функций для других определителей допустимости данных.


                                        Поля
        -----------------------------------------------------------------

             Options
                  Options: Word

             Options  представляет  собой  битовое поле, используемое для
        управления   различными   потомками   TValidator.   По  умолчанию
        TValidator.Init сбрасывает все биты в Options.

             См. также: константы voXXXX


             Status
                  Status: Word

             Указывает  состояние объекта определителя допустимости. Если
        Status  равно  stOK,  то  объект определителя допустимости создан
        правильно. Любое значение, отличное от stOK, указывает на то, что
        произошла ошибка.

             См. также: TInputLine.Valid, константу ValidatorOK


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init;

             Создает  абстрактный объект определителя допустимости, вызы-
        вая  сначала конструктор Init, унаследованный от TObject, а затем
        устанавливает поля Options и Status равными 0.

         B.Pascal 7 & Objects/TV#2      - 329 -


             См. также: TObject.Init


             Load
                  constructor Load(var S: TStream);

             Создает  объект  определителя  допустимости, вызывая сначала
        конструктор Load, унаследованный от TObject, а затем считывает из
        потока S поле Options.

             См. также: TObject.Init


             Error
                  procedure Error; virtual;

             Error представляет собой абстрактный метод, вызываемый Valid
        в  случае, когда он обнаруживает, что пользователь ввел ошибочную
        информацию. По умолчанию TValidator.Error ничего не делает, одна-
        ко  порожденные  типы  могут переопределять Error для обеспечения
        обратной связи с пользователем.


             IsValidInput
                  function IsValidInput (var S: string;
                                 SupressFill: Boolean): Boolean; virtual;

             Если  строка ввода имеет связанный с ней объект определителя
        допустимости, то он вызывает IsValidInput после обработки каждого
        события  от клавиатуры. Это дает объекту определителя допустимос-
        ти,  такому,  как  фильтр  допустимости,  возможность отлавливать
        ошибки до того, как пользователь заполнит весь элемент или экран.

             По умолчанию TValidator.IsValidInput возвращает True. Порож-
        денные  определители  допустимости  данных  могут  переопределять
        IsValidInput  для  проверки допустимости данных по мере того, как
        пользователь вводит их, и возвращать True в случае, если S содер-
        жит верные данные, и False в противном случае.

             S представляет собой текущую строку ввода. SupressFill опре-
        деляет, должен ли определитель автоматически форматировать строку
        перед проверкой допустимости данных. Если SupressFill равно True,
        то  определитель  допустимости работает с неизмененной строкой S.
        Если  SupressFill  равно  False,  то перед проверкой допустимости
        данных осуществляется их ввод. Из стандартных определителей допу-
        стимости лишь TPXPictureValidator проверяет значение SupressFill.

             Поскольку S является параметром типа var, IsValidInput может
        производить изменения содержимого строки ввода, такие, как преоб-
        разование  букв  в заглавные или вставление буквенных символов из
        картинки  формата.  IsValidInput  не  должен,  однако, удалять из
        строки недопустимые символы. Возвращая False, IsValidInput указы-

         B.Pascal 7 & Objects/TV#2      - 330 -

        вает на то, что строка ввода должна сама стереть ошибочные симво-
        лы.


             IsValid
                  function IsValid (const S: string): Boolean; virtual;

             По умолчанию TValidator.IsValid возвращает True. Порожденные
        типы определителей допустимости могут переопределять IsValid так,
        чтобы  он  проверял  данные  для полностью введенной строки. Если
        строка ввода имеет связанный с ней объект определителя допустимо-
        сти,  то ее метод Valid вызывает метод Valid объекта определителя
        допустимости, который в свою очередь вызывает IsValid для опреде-
        ления того, является ли содержимое строки ввода допустимым.

             См. также: TInputLine.Valid, TValidator.Valid


             Store
                  procedure Store(var S: TStream);

             Записывает объект определителя допустимости в поток S, запи-
        сывая поле Options.


             Transfer
                  function Transfer (var S: String;
                       Buffer: Pointer; Flag: TVTransfer): Word; virtual;

             Transfer  позволяет определителю допустимости изменять уста-
        новки  и  считывать значения связанной строки ввода, что особенно
        полезно  для  определителей допустимости, проверяющих нестроковые
        типы   данных,   такие,   как   численные   значения.   Например,
        TRangeValidator  использует Transfer для чтения и записи значений
        типа Longint в запись  данных, вместо того, чтобы  передавать всю
        строку.

             По умолчанию строки ввода с определителями допустимости дают
        определителю возможность ответить на DataSize, GetData и SetData,
        вызывая  метод  Transfer определителя допустимости. Если Transfer
        возвращает что-либо, отличное от 0, то это говорит строке ввода о
        том,  что  она  имеет  дело  с правильной передачей. По умолчанию
        TValidator.Transfer  всегда  возвращает  0. Если Вы хотите, чтобы
        определитель осуществлял передачу данных, то необходимо переопре-
        делять его метод Transfer.

             Первые два  параметра  Transfer представляют собой связанную
        со строкой ввода текстовую строку и  запись  данных  GetData  или
        SetData. В зависимости от значения Flag Transfer может устанавли-
        вать значение S из Buffer или считывать  данные  из  S  в  буфер.
        Возвращаемое  значение всегда представляет собой число переданных
        байт.


         B.Pascal 7 & Objects/TV#2      - 331 -

             Если Flag равен vtDataSize, то Transfer не изменяет ни S, ни
        Buffer,  а  просто  возвращает  размер  данных.  Если  Flag равен
        vtSetData, то  Transfer считывает  соответствующее число  байт из
        Buffer, преобразует  их  в   строковую  форму  и присваивает  эту
        строку S, возвращая  количество  считанных байт. Если Flag  равен
        vtGetData,  то   Transfer  преобразует  S  в  соответствующий тип
        данных  и  записывает  это  значение  в  Buffer,  возвращая число
        записанных байт.

             См. также: TInputLine.DataSize, TInputLine.GetData, TInput-
        Line.SetData


             Valid
                  function Valid (const S: string): Boolean;

             Возвращает True в случае,  если IsValid (S) возвращает True.
        В противном случае вызывает Error и возвращает False. Метод Valid
        определителя  допустимости  вызывается  методом  Valid  связанной
        строки ввода.

             Строки ввода со связанными определителями допустимости вызы-
        вают  метод  Valid  определителя  допустимости при двух условиях:
        либо  у  строки ввода установлена опция ofValidate, в случае чего
        она вызывает Valid при потере фокуса, либо диалоговое окно, соде-
        ржащее  строку  ввода,  вызывает  Valid  для всех его управляющих
        элементов, обычно потому, что пользователь сделал запрос о закры-
        тии диалогового окна или о вводе набранных данных.

             См. также: TInputLine.Valid, TValidator.Error, TValidator.Is-
        Valid




         B.Pascal 7 & Objects/TV#2      - 332 -

         Тип TVideoBuf                                          Views
        -----------------------------------------------------------------

             Описание:  TVideoBuf = array[0..3999] of Word;

             Функция: Используется для описания видеобуферов.

             См. также: TGroup.Buffer


         TView                                                     Views
        -----------------------------------------------------------------

             Тип  объекта  TView  существует для того, чтобы предоставить
        основные поля и методы для порожденных объектов. Возможно, что Вы
        никогда  не  будете  создавать  экземпляры  самих объектов TView,
        однако  большая  часть  общего  поведения  отображаемых элементов
        Turbo Vision происходит от TView.


                                        Поля
        -----------------------------------------------------------------

             Cursor                                   (только для чтения)
                  CurSor: TPoint;

             Положение аппаратного курсора внутри отображаемого элемента.
        Курсор видим только в том случае, если отображаемый элемент акти-
        вен (sfFocused)  и курсор включен (sfCursorVis).  Форма курсора -
        это подчеркивание или прямоугольник (определен sfCursorIns).

             См. также:  SetCursor, ShowCursor, HideCursor, NormalCursor,
        BlockCursor


             DragMode                                     (чтение/запись)
                  DragMode: Byte;

             Определяет  поведение отображаемого элемента при перемещении
        с помощью "мыши".

                 Биты DragMode определены следующим образом:


                     ┌─── DragMode ──┐
                     msb           lsb
                     ┌─┬─┬─┬─────────── dmLimitAll = $F0
                    ╔╧╤╧╤╧╤╧╤═╤═╤═╤═╗
                    ╚╤╧╤╧╤╧╤╧═╧═╧╤╧╤╝
                     │ │ │ │     │ └─── dmDragMove = $01
                     │ │ │ │     └───── dmDragGrow = $02
                     │ │ │ └─────────── dmLimitLoX = $10
                     │ │ └───────────── dmLimitLoY = $20

         B.Pascal 7 & Objects/TV#2      - 333 -

                     │ └─────────────── dmLimitHiX = $40
                     └───────────────── dmLimitHiY = $80

             Рис. 19.12. Отображение битов в DragMode.

             Маски  DragMode  определены  в  разделе  "Константы DragMode
        dmXXXX" настоящей главы.

             См. также: TView.DragView


             EventMask                                    (чтение/запись)
                  EventMask: Word;

             EventMask представляет собой битовую маску,  которая опреде-
        ляет, какие классы событий будут распознаваться отображаемым эле-
        ментом. По умолчанию EventMask разрешает evMouseDown, evKeyDown и
        evCommand. Назначение EventMask равным $FFFF заставляет отобража-
        емый элемент реагировать на все классы событий, а значение 0 при-
        водит  к тому,  что отображаемый элемент не реагирует ни на какие
        события.  Для подробного  описания  классов  событий  см.  раздел
        "Константы событий evXXXX" настоящей главы.

             См. также: методы HandleEvent


             GrowMode                                     (чтение/запись)
                  GrowMode: Byte;


         B.Pascal 7 & Objects/TV#2      - 334 -


             Определяет,  как  отображаемый  элемент будет увеличиваться,
        когда  его  владелец изменяет размер. GrowMode присваивается одна
        или несколько следующих масок:

                     ┌─── GrowMode ──┐
             старший бит           младший бит

                              ┌─┬─┬─┬─── gfGrowAll = $0F
                     ╔═╤═╤═╤═╤╧╤╧╤╧╤╧╗
                     ╚╤╧═╧╤╧╤╧╤╧╤╧╤╧╤╝
                      └─┬─┘ │ │ │ │ └─── gfGrowLoX = $01
                        │   │ │ │ └───── gfGrowLoY = $02
               Не определено│ │ └─────── gfGrowHiX = $04
                            │ └───────── gfGrowHiY = $08
                            └─────────── gfGrowRel = $10

             Рис. 19.13. Расположение битов в GrowMode.

             Пример: GrowMode := gfGrowLoX or gfGrowLoY;

             См. также:  константы изменения размера gfXXXX


             HelpCtx                                      (чтение/запись)
                  HelpCtx: Word;

             Контекст  подсказки отображаемого элемента. Когда отображае-
        мый элемент активен, это поле представляет собой контекст подска-
        зки   программы,   если   номер  контекста  подсказки  не   равен
        hcNoContext,   в   случае   чего   контекст подсказки совпадает с
        контекстом подсказки владельца.

             См. также: TView.GetHelpCtx


             Next                                     (только для чтения)
                  Next: PView;

             Указывает  на  следующий равнозначный отображаемый элемент в
        циклическом  порядке. Если это последний подэлемент, то Next ука-
        зывает на первый отображаемый подэлемент владельца Owner.


             Options                                      (чтение/запись)
                  Options: Word;

             Слово  флагов Options (параметры) определяет поведение отоб-
        ражаемого элемента.

             Биты поля Options определены следующим образом:

            ┌──────── TView.Options ────────┐

         B.Pascal 7 & Objects/TV#2      - 335 -

            старший бит                     младший бит

                         ┌─┬─────────────────── ofCentered    = $0300
            ╔═╤═╤═╤═╤═╤═╤╧╤╧╤═╤═╤═╤═╤═╤═╤═╤═╗
            ╚╤╧═╧═╧═╧═╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╝
             └────┬────┘ │ │ │ │ │ │ │ │ │ └─── ofSelectable  = $0001
                  │      │ │ │ │ │ │ │ │ └───── ofTopSelect   = $0002
           Не определено │ │ │ │ │ │ │ └─────── ofFirstClick  = $0004
                         │ │ │ │ │ │ └───────── ofFramed      = $0008
                         │ │ │ │ │ └─────────── ofPreProcess  = $0010
                         │ │ │ │ └───────────── ofPostProcess = $0020
                         │ │ │ └─────────────── ofBuffered    = $0040
                         │ │ └───────────────── ofTileable    = $0080
                         │ └─────────────────── ofCenterX     = $0100
                         └───────────────────── ofCenterY     = $0200

             Рис. 19.14. Биты в Options.

             Для  подробного описания флагов см. раздел "Константы флагов
        параметров ofXXXX" настоящей главы.


             Origin                                   (только для чтения)
                  Origin: TPoint;

             Координаты (X, Y) левого верхнего угла отображаемого элемен-
        та относительно Origin владельца.

             См. также: MovTo, Locate


             Owner                                    (только для чтения)
                  Owner: PGroup;

             Указывает  на объект группы, который владеет этим отображае-
        мым  элементом.  В  случае  значения nil, отображаемый элемент не
        имеет владельца. Отображаемый элемент показывается внутри отобра-
        жаемого  элемента владельца и будет отсекаться по ограничивающему
        прямоугольнику владельца.


             Size                                     (только для чтения)
                  Size: TPoint;

             Размер отображаемого элемента.

             См. также: GrowTo, Locate


             State                                    (только для чтения)
                  State: Word;

             Состояние  отображаемого элемента представлено набором бит в

         B.Pascal 7 & Objects/TV#2      - 336 -

        поле  State.  Многие  методы  TView проверяют и/или изменяют поле
        State,  вызывая TView.SetState. TView.GetState(AState) возвращает
        значение  True  в случае, если State отображаемого элемента равно
        AState.  Биты State представлены мнемоническими константами, опи-
        санными  в  разделе "Константы флагов состояния sfXXXX" настоящей
        главы.


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect);

             Переопределяемость: часто используется.

             Создает  объект  TView  с  заданным  прямоугольником Bounds.
        Метод Init вызывает конструктор Init,  унаследованный от TObject,
        а затем устанавливает поля нового TView равными следующим  значе-
        ниям:

            ─────────────────────────────────────────────────────────────
            Owner      nil

            Next       nil

            Origin     (Bounds.A.X, Bounds.A.Y)

            Size       (Bounds.B.X - Bounds.A.X, Bounds.B.Y - Bounds.A.Y)

            Cursor     (0, 0)

            GrowMode   0

            DragMode   dmLimitLoY

            HelpCtx    heNoContext

            State      sfVisible

            Options    0

            EventMask  evMouseDown + evKeyDown + evCommand
            ─────────────────────────────────────────────────────────────

             Заметим, что TObject.Init заполняет нулями все поля потомков
        TView. Всегда вызывайте TView.Init до инициализации любых полей.

             См. также: TObject.Init


             Load
                  constructor Load(var S: TStream);

         B.Pascal 7 & Objects/TV#2      - 337 -


             Переопределяемость: часто переопределяется.

             Создает  объект  TView  и  загружает его из потока S. Размер
        данных,  считываемых из потока, должен в точности соответствовать
        размеру данных, записанных в поток методом Store. Если отображае-
        мый  элемент содержит указатели на равнозначные отображаемые эле-
        менты,  то  Load  должен  использовать для чтения этих указателей
        GetPeerViewPtr.  Переопределенный  конструктор Load всегда должен
        вызывать конструктор Load своего предка.

             По  умолчанию  TView.Load  устанавливает  поля  Owner и Next
        равными  nil  и считывает оставшиеся поля из потока. Owner и Next
        устанавливаются  владельцем отображаемого элемента после загрузки
        всех подэлементов.

             См. также: TView.Store, TStream.Get, TStream.Put


             Done
                  destructor Done; virtual;

             Переопределяемость: часто используется.

             "Скрывает"  отображаемый  элемент  (делает его невидимым), а
        затем, если он имеет владельца, удаляет его из группы.


             Awaken
                  procedure Awaken; virtual;

             По  умолчанию  TView.Awaken  ничего  не делает. Когда группа
        загружается  из  потока,  последнее, что делает конструктор Load,
        это  вызов  методов Awaken всех подэлементов, что дает им возмож-
        ность  проинициализировать  себя  при  условии, что загружены все
        подэлементы. Это гарантирует допустимость всех указателей, прочи-
        танных с помощью GetPeerViewPtr.

             Если Вы создаете объекты,  зависящие от других подэлементов,
        и инициализирующие себя после того,  как они считаны  из  потока,
        можно переопределить Awaken, чтобы он выполнил эту инициализацию.

             См. также: TView.GetPeerViewPtr


             BlоckCursor
                  procedure BlоckCursor;

             Переопределяемость: не используется.

             Устанавливает sfCursorIns, чтобы придать курсору форму запо-
        лненного  прямоугольника.  Курсор будет видимым только в том слу-
        чае,  если  установлен  sfCursorVis (и отображаемый элемент также

         B.Pascal 7 & Objects/TV#2      - 338 -

        видим).

             См. также:  sfCursorIns,  sfCursorVis,   TView.NormalCursor,
        TView.ShowCursor, TView.HideCursor


             CalcBounds
                  procedure CalcBounds(var Bounds: TRect;
                                                Delta: TPoint); virtual;

             Переопределяемость: переопределяется редко.

             Когда  владелец  отображаемого  элемента изменяет размер, он
        вызывает  методы CalcBounds и ChangeBounds для всех подэлементов.
        CalcBounds  должен вычислять новые границы отображаемого элемента
        на  основе  Delta,  на  которое изменился размер его владельца, и
        возвращать новые границы в Bounds.

             TView.CalcBounds  вычисляет  новые границы, используя флаги,
        заданные в поле TView.GrowMode.

             См. также:  TView.GetBounds,  TView.ChangeBounds,  константы
        режима увеличения gfXXXX


             ChangeBounds
                  procedure ChangeBounds(var Bounds: TRect); virtual;

             Переопределяемость: используется редко.

             Должен  изменять границы отображаемого элемента (поля Origin
        и  Size) до размеров прямоугольника, заданного параметром Bounds.
        После изменения границ ChangeBounds должен перерисовать отобража-
        емый  элемент. ChangeBounds вызывается различными методами TView,
        но не должен вызываться непосредственно.

             Метод TView.ChangeBound вызывает  сначала SetBounds(Bounds),
        а затем вызывает DrawView.

             См. также: TView.Locate, TView.MoveTo, TView.GrowTo


             ClearEvent
                  procedure ClearEvent(var Event: TEvent);

             Этот стандартный метод используется в HandleEvent для указа-
        ния  того,  что  отображаемый  элемент успешно обработал событие.
        Устанавливает Event.What равным evNоthing, а Event.InfoPtr равным
        @Self.

             См. также: методы HandleEvent



         B.Pascal 7 & Objects/TV#2      - 339 -

             CommandEnabled
                  function CommandEnabled(Command: Word): Boolean;

             Возвращает значение True в случае, если команда Command раз-
        решена, и False в противном случае. Заметим, что когда Вы изменя-
        ете режимное состояние, можно запретить или разрешить необходимые
        команды. Однако,  когда Вы возвращаетесь  в  предыдущее  режимное
        состояние, исходный набор команд будет восстановлен.

             См. также: TView.DisableCommand, TView.EnableCommand,
        TView.SetCommands


             DataSize
                  function DataSize: Word; virtual;

             Переопределяемость: используется редко.

             Метод  DataSize должен возвращать размер данных, считываемых
        и  записываемых  в  запись  данных  с  помощью  методов SetData и
        GetData.  Механизм  записи  данных  обычно  используется только в
        отображаемых   элементах, которые  реализуют элементы  управления
        для диалоговых окон.

             Чтобы указать на тот факт, что данные не передавались, метод
        TView.DataSize возвращает нулевое значение.

             См. также: TView.GetData, TView.SetData


             DisableCommands
                  procedure DisableCommands(Commands: TCommandSet);

             Запрещает команды, указанные в аргументе Commands.

             См. также:    TView.CommandEnabled,    TView.EnableCommands,
        TView.SetCommands


             DragView
                  procedure DragView (Event: TEvent; Mode: Byte;
                            var Limits: TRect; MinSize, MaxSize: TPoint);

             Перемещает  отображаемый  элемент, используя режим перемеще-
        ния,  заданный  флагами  dmXXXX в параметре Mode. Параметр Limits
        указывает  прямоугольник  (в системе координат владельца), внутри
        которого  может  перемещаться  отображаемый  элемент, а Min и Max
        указывают минимальный и максимальный размеры отображаемого элеме-
        нта,  которые  он может принимать. Событие, приводящее к операции
        перемещения  "мышью",  требуется в Event для того, чтобы отличить
        перемещения "мышью" от использования клавиш управления курсором.

             См. также: TView.DragMode, константы режима увеличения dmXXXX

         B.Pascal 7 & Objects/TV#2      - 340 -



             Draw
                  procedure Draw; virtual;

             Переопределяемость: всегда переопределяется.

             Вызывается  всякий  раз,  когда  отображаемый элемент должен
        отобразиться  заново.  Метод  Draw  должен  покрывать всю область
        отображаемого  элемента. Этот метод должен соответственно переоп-
        ределяться для каждого порожденного объекта.

             В  общем, Draw не следует вызывать напрямую, поскольку более
        эффективно  использовать  DrawView, который рисует только видимые
        на экране отображаемые элементы, т.е. элементы, часть которых или
        весь  отображаемый  элемент  видимы  на экране. При необходимости
        Draw  может вызвать метод GetClipRect для получения прямоугольни-
        ка,  который необходимо перерисовать, а затем рисовать только эту
        область. Для сложных отображаемых элементов это может значительно
        улучшить производительность.

             См. также: TView.DrawView


             DrawView
                  procedure DrawView;

             Вызывает  Draw  каждый  раз,  когда TView.Exposed возвращает
        значение  True,  что указывает на тот факт, что отображаемый эле-
        мент  видим на экране (см. sfExposed). Вы должны вызвать DrawView
        (а не Draw), когда необходимо заново вывести отображаемый элемент
        после изменения, которое воздействует на его видимое изображение.

             См. также: TView.Draw, TGroup.ReDraw, TView.Exposed


             EnableCommands
                  procedure EnableCommands(Commands: TCommandSet);

             Разрешает все команды в параметре Commands.

             См. также:     TView.DisableCommands,     TView.GetCommands,
        TView.CommandEnabled, TView.SetCommands


             EndModal
                  procedure EndModal(Command: Word); virtual;

             Переопределяемость: никогда не переопределяется.

             Завершает текущее  режимное состояние и возвращает Command в
        качестве результата вызова функции ExecView,  которая создала это
        режимное состояние.

         B.Pascal 7 & Objects/TV#2      - 341 -


             См. также:  TGroup.ExecView, TGroup.Execute, TGroup.EndModal


             EventAvail
                  function EventAvail: Boolean;

             Возвращает значение True в случае, если событие доступно для
        GetEvent.

             См. также:  TView.MouseEvent, TView.KeyEvent, TView.GetEvent


             Execute
                  function Execute: Word; virtual;

             Переопределяемость: используется редко.

             Вызывается из TGroup.ExecView каждый раз, когда отображаемый
        элемент становится режимным.  Если отображаемый элемент допускает
        режимное выполнение, то он должен переопределить Execute для реа-
        лизации  цикла событий.  Результатом Execute становится значение,
        возвращаемое из ExecView.

             TView.ExecView просто возвращает cmCancel.

             См. также: sfModal, TGroup.Execute, TGroup.ExecView


             Exposed
                  function Exposed: Boolean;

             Возвращает значение True, если какая-либо часть отображаемо-
        го элемента видима на экране.

             См. также: sfExposed, TView.DrawView

             Focus
                  function Focus: Boolean;

             Выбирает отображаемый элемент и делает его активным, возвра-
        щая True в случае, если владелец отображаемого элемента возвраща-
        ет  из Focus значение True, и если элемент не является ни выбран-
        ным, ни  режимным,  или  если он не имеет владельца.  В противном
        случае возвращает False.

             Различие  между  Focus и Select заключается в том, что Focus
        может  завершиться  неудачно.  То  есть,  другой элемент может не
        отдать  фокус, обычно вследствие того, что он содержит недопусти-
        мые  данные, которые должны быть исправлены перед передачей фоку-
        са.

             См. также: TView.Select

         B.Pascal 7 & Objects/TV#2      - 342 -



             GetBounds
                  procedure GetBounds(var Bounds: TRect);

             Возвращает  в переменной Bounds ограничивающий прямоугольник
        отображаемого  элемента  в  координатной  системе  его владельца.
        Bounds.A устанавливается равным Origin, а Bounds.B устанавливает-
        ся равным сумме Origin и Size.

             См. также:   TView.Origin,   TView.Size,   TView.CalcBounds,
        TView.ChangeBounds, TView.SetBounds, TView.GetExtent


             GetClipRect
                  procedure GetClipRect(var Clip: TRect);

             Возвращает  в  переменной  Clip  минимальный  прямоугольник,
        который требуется перерисовать в вызове Draw. Для сложных отобра-
        жаемых элементов Draw может использовать GetClipRect для значите-
        льного улучшения производительности.

             См. также: TView.Draw


             GetColor
                  function GetColor(Color: Word): Word;

             Преобразует  индексы палитры младшего и старшего байта Color
        в физические атрибуты символа, просматривая палитру отображаемого
        элемента и палитры всех его владельцев.

             См. также: TView.GetPalette


             GetCommands
                  procedure GetCommands(var Commands: TCommandSet);

             Устанавливает Commands равным текущему набору команд.

             См. также:    TView.CommandsEnabled,   TView.EnableCommands,
        TView.DisableCommands, TView.SetCommands


             GetData
                  procedure GetData(var Rec); virtual;

             Переопределяемость: используется редко.

             Метод  GetData должен копировать DataSize байт из отображае-
        мого элемента в запись данных Rec. Механизм записей данных обычно
        используется  только  в отображаемых элементах, которые реализуют
        элементы управления для диалоговых окон.

         B.Pascal 7 & Objects/TV#2      - 343 -


             По умолчанию TView.GetData ничего
        не делает.

             См. также: TView.DataSize, TView.SetData


             GetEvent
                  procedure GetEvent(var Event: TEvent); virtual;

             Переопределяемость: используется редко.

             Устанавливает  Event  равным  следующему доступному событию.
        Возвращает evNothing, если доступных событий нет. По умолчанию он
        вызывает GetEvent владельца отображаемого элемента.

             См. также:         TView.EventAvail,          TProgram.Idle,
        TView.HandleEvent, TView.PutEvent


             GetExtent
                  procedure GetExtent(var Extent: TRect);

             Возвращает  в переменной Extent ограничивающий прямоугольник
        отображаемого элемента. Extent.A устанавливается равным (0, 0), а
        Extent.B устанавливается равным Size.

             См. также:   TView.Origin,   TView.Size,   TView.CalcBounds,
        TView.ChangeBounds, TView.SetBounds, TView.GetBounds


             GetHelpCtx
                  function GetHelpCtx: Word; virtual;

             Переопределяемость: используется редко.

             Метод  GetHelpCtx должен возвращать контекст подсказки отоб-
        ражаемого элемента.

             По  умолчанию  TView.GetHelpCtx  возвращает  значение   поля
        HelpCtx  или  возвращает  hcDragging,  если  отображаемый элемент
        перемещается мышкой (см. sfDragging).

             См. также: HelpCtx


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: всегда переопределяется.

             Данный  метод должен возвращать указатель на палитру отобра-
        жаемого  элемента  или  nil,  если  отображаемый элемент не имеет

         B.Pascal 7 & Objects/TV#2      - 344 -

        палитры.  GetPalette вызывается из GetColor, WriteChar и WriteStr
        при  преобразовании индексов палитры в физические атрибуты симво-
        лов. При возвращаемом значения  nil,  преобразование  цвета  этим
        отображаемым  элементом не производится.  GetPalette почти всегда
        переопределяется в порожденных типах объектов.

             По умолчанию TView.GetPalette возвращает значение nil.

             См. также: TView.GetColor, TView.WriteXXXX


             GetPeerViewPtr
                  procedure GetPeerViewPtr(var S: TStream; var P);

             Загружает  указатель  Р равнозначного отображаемого элемента
        из потока S. Равнозначный отображаемый элемент - это отображаемый
        элемент,  имеющий того же владельца,  что и у этого отображаемого
        элемента.  Например, TScroller содержит 2 равнозначных отображае-
        мых элемента HScrollBar и VScrollBar.  GetPeerViewPtr должен  ис-
        пользоваться  только внутри конструктора Load для чтения значений
        указателей,  которые были записаны при вызове  PutPeerViewPtr  из
        метода Store.

             Внимание!  Загруженное в Р значение не является действитель-
        ным  до тех пор, пока владелец отображаемого элемента не завершит
        полностью  операцию  Load;  следовательно  изменение указателя на
        равнозначный  отображаемый  элемент  внутри  конструктора Load не
        дает  правильного  значения.  Указатели  на равнозначные элементы
        могут  изменяться  в  методах  Awaken, которые вызываются методом
        Load группы после того, как определяются все подэлементы.

             См. также: TView.PutPeerViewPtr, TGroup.Load, TGroup.Store


             GetState
                  function GetState(AState: Word): Boolean;

             Возвращает  значение  True  в  случае, если бит(ы) из AState
        установлен(ы) в поле State.

             См. также: State, TView.SetState


             GrowTo
                  procedure GrowTo(X, Y: Integer);

             Увеличивает  или  уменьшает  отображаемый элемент до данного
        размера, используя вызов TView.Locate.

             См. также: TView.Origin, TView.Locate, TView.MoveTo


             HandleEvent

         B.Pascal 7 & Objects/TV#2      - 345 -

                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: всегда переопределяется.

             HandleEvent  представляет собой центральный метод, посредст-
        вом которого реализована вся обработка событий Turbo Vision. Поле
        What параметра Event содержит класс события (evXXXX), а оставшие-
        ся  поля Event описывают событие. Для указания того, что он обра-
        ботал  событие,  метод  HandleEvent  должен  вызывать ClearEvent.
        Метод  HandleEvent  почти  всегда  переопределяется в порожденных
        типах объектов.

             TView.HandleEvent обрабатывает события evMouseDown следующим
        образом:  если  отображаемый  элемент не выбран (sfSelected) и не
        запрещен (sfDisabled), и если отображаемый элемент является выби-
        раемым (ofSelectable), то отображаемый элемент выбирается с помо-
        щью  вызова Select. Другие события в TView.HandleEvent не обраба-
        тываются.

             См. также: TView.ClearEvent


             Hide
                  procedure Hide;

             "Скрывает" отображаемый элемент, вызывая SetState для сброса
        флага sfVisible в State.

             См. также: sfVisible, TView.SetState, TView.Show


             HideCursor
                  procedure HideCursor;

             "Скрывает" курсор, сбрасывая бит sfCursorVis в State.

             См. также: sfCursorVis, TView.ShowCursor


             KeyEvent
                  procedure KeyEvent(var Event: TEvent);

             Возвращает  в  переменной Event следующее событие evKeyDown.
        Он ожидает события от клавиатуры, игнорируя все другие события.

             См. также: TView.GetEvent, TView.EventAvail


             Locate
                  procedure Locate(var Bounds: TRect);

             Изменяет границы отображаемого элемента на Bounds. Отобража-
        емый элемент перерисовывается в его новом положении. Метод Locate

         B.Pascal 7 & Objects/TV#2      - 346 -

        вызывает  SizeLimits для проверки того, что данные границы Bounds
        правильны,  а  затем  вызывает  метод  ChangeBounds для изменения
        границ и заново выводит отображаемый элемент.

             См. также: TView.GrowTo, TView.MoveTo, TView.ChangeBounds


             MakeFirst
                  procedure MakeFirst;

             Перемещает отображаемый элемент на вершину списка подэлемен-
        тов        владельца.      Вызов     MakeFirst      соответствует
        PutInFrontOf(Owner^.First).

             См. также: TView.PutInFrontOf


             MakeGlobal
                  procedure MakeGlobal(Source: TPoint; var Dest:TPoint);

             Преобразует координаты точки Sourсe из локальных (координаты
        отображаемого  элемента) в глобальные (координаты экрана) и возв-
        ращает  результат в Dest. Source и Dest могут быть одной перемен-
        ной.

             См. также: TView.MakeLocal


             MakeLocal
                  procedure MakeLocal(Source: TPoint; var Dest:TPoint);

             Преобразует  координаты точки Source из глобальных (экран) в
        локальные  (отображаемый  элемент) и возвращает результат в Dest.
        Полезно  для преобразования поля Event.Where в событии evMouse из
        глобальных координат в локальные. Например MakeLocal(Event.Where,
        MouseLoc).

             См. также: TView.MakeGlobal, TView.MouseInView


             MouseEvent
                  function MouseEvent(var Event: TEvent;
                                                Mask: Word): Boolean;

             Возвращает  следующее  событие от "мыши" в Event. Возвращает
        значение True в случае, если возвращенное событие есть в аргумен-
        те  Mask,  и  False,  если возникло событие evMouseUp. Этот метод
        позволяет  отслеживать "мышь", когда ее кнопка нажата, например в
        операциях отметки блока с помощью "мыши" в текстовых редакторах.

             Ниже  приведем фрагмент текста HandleEvent, который отслежи-
        вает положение "мыши" курсором отображаемого элемента.


         B.Pascal 7 & Objects/TV#2      - 347 -

                 procedure TMyView.HandleEvent(var Event: TEvent);
                 begin
                   TView.HandleEvent(Event);
                   case Event.What of
                     evMouseDown:
                       begin
                         repeat
                           MakeLocal(Event.Where, Mouse);
                           SetCursor(Mouse.X, Mouse.Y);
                         until not MouseEvent(Event, evMouseMove);
                         ClearEvent(Event);
                       end;
                       ...
                   end;
                 end;

             См. также: TView.EventMasks, TView.KeyEvent, TView.GetEvent


             MouseInView
                  function MouseInView (Mouse: TPoint): Boolean;

             Возвращает  значение True в случае, если аргумент Mouse (за-
        данный  в  глобальных координатах) находится внутри отображаемого
        элемента.

             См. также: TView.MakeLocal


             MoveTo
                  procedure MoveTo(X, Y: Integer);

             Перемещает  Origin  в  точку  (X,  Y) относительно владельца
        отображаемого  элемента.  Размер  Size  отображаемого элемента не
        изменяется.

             См. также: Origin, Size, TView.Locate, TView.GrowTo


             NextView
                  function NextView: PView;

             Возвращает  указатель на следующий подэлемент в списке подэ-
        лементов  владельца.  Возвращается nil, если отображаемый элемент
        является последним в списке подэлементов владельца.

             См. также: TView.PrevView, TView.Prev, TView.Next


             NormalCursor
                  procedure NormalCursor;

             Сбрасывает  бит sfCursorIns в State, переводя курсор в режим

         B.Pascal 7 & Objects/TV#2      - 348 -

        подчеркивания. Если sfCursorVis установлен, то будет отображаться
        новый курсор.

             См. также:   sfCursorIns,   sfCursorVis,   TView.HideCursor,
        TView.BlockCursor, TView.HideCursor


             Prev
                  function Prev: PView;

             Возвращает указатель на предыдущий подэлемент в списке подэ-
        лементов  владельца.  Если  отображаемый  элемент первый в списке
        владельца,  то  Prev  возвращает последний отображаемый элемент в
        списке. Заметим, что TView.Prev интерпретирует список как кольце-
        вой,  в то время как TView.PrevView интерпретирует его как линей-
        ный.

             См. также: TView.NextView, TView.PrevView, TView.Next


             PrevView
                  function PrevView: PView;

             Возвращает указатель на предыдущий подэлемент в списке подэ-
        лементов  владельца. Возвращается nil, если отображаемый элемент-
        первый  в  списке подэлементов владельца. Заметим, что TView.Prev
        интерпретирует список как кольцевой, а TView.PrevView- как линей-
        ный.

             См. также: TView.NextView, TView.Prev


             PutEvent
                  procedure PutEvent(var Event: TEvent); virtual;

             Переопределяемость: используется редко.

             Помещает  событие,  заданное  в  Event, в очередь событий, в
        результате  чего это событие будет следующим событием, возвращае-
        мым GetEvent. Этим способом в очередь событий может быть помещено
        только одно событие. Это часто используется отображаемыми элемен-
        тами, генерирующими командные события, например:

                 Event.What := evCommand;
                 Event. Command := cmSaveAll;
                 Event.InfoPtr := nil;
                 PutEvent(Event);

             По умолчанию TView.PutEvent вызывает метод PutEvent владель-
        ца отображаемого элемента.

             См. также:         TView.EventAvail,         TView.GetEvent,
        TView.HandleEvent

         B.Pascal 7 & Objects/TV#2      - 349 -



             PutInFrontOf
                  procedure PutInFrontOf(Target: PView);

             Помещает  отображаемый  элемент перед отображаемым элементом
        Target в списке подэлементов владельца. Вызов

             TView.PutInFontOf(Owner^.First);

        эквивалентен TView.MakeFirst. Этот метод работает, изменяя указа-
        тели в списке подэлементов.  В зависимости  от  положения  других
        отображаемых  элементов и их состояния,  PutInFrontOf может отсе-
        кать закрываемые отображаемые элементы. Если отображаемый элемент
        выбираемый (см. ofSelectable) и помещается поверх всех других по-
        дэлементов, то этот отображаемый подэлемент становится выбранным.

             См. также: TView.MakeFirst


             PutPeerViewPtr
                  procedure PutPeerViewPtr(var S: TStream; P: PView);

             Сохраняет указатель P на равнозначный отображаемый элемент в
        потоке S.  Равнозначный  отображаемый  элемент - это отображаемый
        элемент с тем же владельцем, что и этот отображаемый элемент. Ме-
        тод  PutPeerViewPtr  должен  использоваться  только внутри метода
        Store для записи значений указателей,  которые позже  могут  быть
        считаны с помощью GetPeerViewPtr в конструкторе Load.

             См. также: TView.PutPeerViewPtr, TGroup.Load, TGroup.Store


             Select
                  procedure Select;

             Выделяет  отображаемый элемент (см. sfSelected). Если владе-
        лец  отображаемого  элемента  является  активным, то отображаемый
        элемент  так же активизируется (см. sfFocused). Если отображаемый
        элемент  имеет  установленный флаг ofTopSelect в поле Options, то
        отображаемый  элемент перемещается на вершину списка подэлементов
        владельца (используя вызов TView.MakeFirst).

             См. также:     sfSelected,      sfFocused,      ofTopSelect,
        TView.MakeFirst


             SetBounds
                  procedure SetBounds(var Bounds: TRect);

             Устанавливает  ограничивающий  прямоугольник   отображаемого
        элемента равным значению параметра Bounds. Поле Origin устанавли-
        вается равным Bounds.A, а поле Size устанавливается равным значе-

         B.Pascal 7 & Objects/TV#2      - 350 -

        ние разности Bounds.B Bounds.A. Метод SetBounds вызывается только
        из  переопределенного  метода ChangeBounds- Вы не должны вызывать
        SetBounds непосредственно.

              См. также:   TView.Origin,   TView.Size,  TView.CalcBounds,
        TView.ChangeBounds, TView.GetBounds, TView.GetExtent


             SetCmdState
                  procedure SetCmdState (Commands: TCommandSet;
                                                     Enable: Boolean);

             Разрешает  Commands в случае равенства Enable True, и запре-
        щает  их  в  случае  равенства Enable False. SetCmdState является
        оперативной   клавишей   для  использования  EnableCommands   или
        DisableCommands.

             См. также: TView.DisableCommands, TView.EnableCommands


             SetCommands
                  procedure SetCommands(Commands: TCommandSet);

             Изменяет  текущий  набор  команд на заданный аргументом Com-
        mаnds.

             См. также: TView.EnableCommands, TView.DisableCommands


             SetCursor
                  procedure SetCursor(X, Y: Integer);

             Перемещает аппаратный курсор в точку (X, Y), используя отно-
        сительные  координаты отображаемого элемента (локальные). (0, 0)-
        это левый верхний угол.

             См. также:        TView.MakeLocal,         TView.HideCursor,
        TView.ShowCursor


             SetData
                  procedure SetData(var Rec); virtual;

             Переопределяемость: используется редко.

             Метод  SetData  должен  копировать  DataSize  байт из записи
        данных  Rec в отображаемый элемент. Механизм записи данных обычно
        используется  только  в отображаемых элементах, которые реализуют
        элементы управления для диалоговых окон.

             По умолчанию TView.SetData  ничего
        не делает.


         B.Pascal 7 & Objects/TV#2      - 351 -

             См. также: TView.DataSize, TView.GetData


             SetState
                  procedure SetState(AState: Word;
                                           Enable: Boolean); virtual;

             Переопределяемость: иногда используется.

             Устанавливает   или   сбрасывает  флаг   состояния  в   поле
        TView.State.   Параметр  AState  задает  флаг  состояния, который
        будет  изменяться  (см.  sfXXXX),  а  параметр  Enable указывает,
        будет  этот  флаг  устанавливаться    (True)   или   сбрасываться
        (False).   TView.SetState   затем    выполняет    соответствующие
        действия  для отражения  нового состояния, такие как  перерисовка
        отображаемых элементов, которые,  будучи  невидимы   на   экране,
        становятся   видимыми   (sfVisible)   или    перепрограммирование
        аппаратной  части  в  случаях,  когда  изменяется  форма  курсора
        (sfCursorVis и sfCursorIns).

             Внимание! Если отображаемый элемент переопределяет SetState,
        то  он  должен  всегда  вызывать  сначала  унаследованный   метод
        SetState  для  того,  чтобы  убедиться  в том, что указанные биты
        устанавливаются или сбрасываются.

             Метод SetState иногда переопределяется для выполнения допол-
        нительных действий, основанных на флагах состояний. Например, тип
        TFrame  переопределяет метод SetState для перерисовки самого себя
        каждый  раз,  когда  окно  выбирается  или перемещается с помощью
        "мыши":

                procedure TFrame.SetState(AState: Word; Enable: Boolean);
                begin
                  TView.SetState(AState, Enable);
                  if AState and (sfActive + sfDragging) <> 0 then
                    DrawView;
                end;

             Другая  распространенная  причина возможного переопределения
        SetState-  это  необходимость  разрешить  или  запретить команды,
        которые обрабатываются определенным отображаемым элементом.

                procedure TMyView.SetState(AState: Word; Enable: Boolean);
                const
                  MyCommands = [cmOut, cmCopy, cmPaste, cmClear]
                begin
                  TView.SetState(AState, Enable);
                  if AState = sfSelected then
                    if Enable then
                      EnableCommands(MyCommands) else
                      DisableCommands(MyCommands);
                end;


         B.Pascal 7 & Objects/TV#2      - 352 -

             См. также: TView.GetState, TView.State, константы флага сос-
        тояния sfXXXX


             Show
                  procedure Show;

             Показывает  отображаемый элемент, вызывая SetState для уста-
        новки флага sfVisible в поле State.

             См. также: TView.SetState


             ShowCursor
                  procedure ShowCursor;

             Включает  аппаратный курсор, устанавливая sfCursorVis. Заме-
        тим, что по умолчанию курсор невидим.

             См. также: sfCursorVis, TView.HideCursor


             SizeLimits
                  procedure SizeLimits(var Min, Max: TPoint); virtual;

             Переопределяемость: иногда используется.

             Возвращает, в переменных Min и Max, минимальное и максималь-
        ное значения, которые может принимать поле Size. Locate не позво-
        лит  отображаемому  элементу выходить за эти пределы. SizeLimits,
        установленная   по   умолчанию,   возвращает   в Min  (0, 0), а в
        MaxOwner^.Size.

             См. также: TView.Size


             Store
                  procedure Store(var S: TStream);

             Переопределяемость: часть используется.

             Сохраняет  отображаемый  элемент  в потоке S. Размер данных,
        записываемых  в  поток, должен точно соответствовать размеру дан-
        ных,  читаемых из потока конструктором Load отображаемого элемен-
        та.  Если отображаемый элемент содержит указатель на равнозначные
        отображаемые элементы, то для записи этих указателей Store должен
        использовать  PutPeerViewPtr. Переопределенный метод Store должен
        всегда вызывать метод Store порождающего объекта.

             По  умолчанию TView.Store записывает в поток все поля, кроме
        Owner и Next.

              См. также: TView.Load, TStream.Get, TStream.Put

         B.Pascal 7 & Objects/TV#2      - 353 -



             TopView
                  function TopView: PView;

             Возвращает указатель на текущий режимный  отображаемый  эле-
        мент.


             Valid
                  function Valid(Commands: Word): Boolean; virtual;

             Переопределяемость: иногда используется.

             Этот метод используется для проверки правильности отображае-
        мого  элемента  после его создания (с использованием методов Init
        или Load)  или  в момент,  когда заканчивается режимное состояние
        (при вызове EndModal).

             Значение параметра Command, равное cmValid (ноль), указывает
        на то, что отображаемый элемент должен проверять результат своего
        создания:  Valid(cmValid)  должен возвращать значение True в слу-
        чае, если отображаемый элемент был успешно создан и готов к испо-
        льзованию. В противном случае возвращается False.

             Любое  другое  (отличное от нуля) значение параметра Command
        указывает на то,  что текущее режимное состояние (такое,  как ре-
        жимное диалоговое окно) должно завершаться с результирующим  зна-
        чением Command. В этом случае Valid должна проверять правильность
        отображаемого элемента. Наиболее распространенная команда провер-
        ки правильности - это cmClose,  указывающая на то, что окно будет
        закрыто.

             Если у отображаемого элемента установлен флаг ofValidate, то
        перед тем, как отображаемый элемент потеряет фокус ввода, вызыва-
        ется   Valid  с  командой  cmReleaseFocus.  Если Valid возвращает
        False, то отображаемый элемент не отдает фокус.

             Valid  должна  сообщить пользователю о том, что отображаемый
        элемент  является  неправильным,  например,  с  помощью программы
        MessageBox из модуля MsgBox, выдавая сообщение об ошибке.

             По умолчанию TView.Valid просто возвращает True.

             См. также: TGroup.Valid, TDialog.Valid, TProgram.ValidView


             WriteBuf
                  procedure TView.WriteBuf(X, Y, W, H: Integer; var Buf);

             Записывает  буфер  на  экран,  начиная  с координат (X, Y) и
        заполняет  область  шириной  W и высотой H. Должен использоваться
        только в методах Draw. Обычно параметр Buf имеет тип ТDrawBuffer,

         B.Pascal 7 & Objects/TV#2      - 354 -

        но  он  может  быть  любым  массивом слов, в котором каждое слово
        содержит символ в младшем байте и атрибут в старшем байте.

             См. также: TView.Draw, тип TDrawBuffer


             WriteChar
                  procedure TView.WriteChar(X, Y: Integer;
                                 Ch: Char; Color: Byte; Count: Integer);

             Начиная  с  точки  (X,  Y) записывает Count копий символа Ch
        цветом, определенным элементом с номером Color, в палитре отобра-
        жаемого элемента. Должен использоваться только в методах Draw.

             См. также: TView.Draw


             WriteLine
                  procedure TView.WriteLine(X, Y, W, H: Integer;
                                                               var Buf);

             Выводит строку, содержащуюся в буфере Buf, на экран, начиная
        с точки (X, Y) и внутри прямоугольника, определенного шириной W и
        высотой  H.  Если  H больше 1, то строка будет повторяться Н раз.
        Должен  использоваться  только в методе Draw. Параметр Buf обычно
        имеет тип TDrawBuffer, но может быть любым массивом слов, в кото-
        ром каждое слово содержит символ в младшем байте и  атрибут  -  в
        старшем байте.

             См. также: TView.Draw


             WriteStr
                  procedure TView.WriteStr(X, Y: Integer;
                                           Str: String; Color: Byte);

             Записывает  строку  Str  цветом  элемента  с номером Color в
        палитре  отображаемого  элемента,  начиная с точки (X, Y). Должен
        использоваться только в методе Draw.

             См. также: TView.Draw




         B.Pascal 7 & Objects/TV#2      - 355 -

         Тип TVTransfer                                         Validate
        -----------------------------------------------------------------

             Описание:
                  TVTransfer = (vtDataSize, vtSetData, vtGetData);

             Функция:  Объекты определителя допустимости используют пара-
        метры типа TVTransfer в методах Transfer для управления передачей
        данных при установке или чтении значения связанной строки ввода.

             См. также: TValidator.Transfer


         Тип TWildStr                                           StdDlg
        -----------------------------------------------------------------

             Описание:
                  TWildStr = PathStr;

             Функция:  TWildStr  идентичен  типу PathDir, определенному в
        модуле  Dos.  Он  используется в стандартных диалоговых окнах для
        передачи шаблонов имен файлов.




         B.Pascal 7 & Objects/TV#2      - 356 -

         TWindow                                                  Views
        -----------------------------------------------------------------

             Объект TWindow- это специализированная группа, которая обыч-
        но владеет объектом TFrame, внутренним объектом TScroller и одним
        или  двумя объектами TScrollBar. Эти дополнительные элементы при-
        дают  объекту  TWindow  дополнительную наглядность. Объект TFrame
        задает обычную рамку, размещает необязательный заголовок и номер,
        а также функциональные пиктограммы (закрытия, распахивания, пере-
        мещения).  Объекты TWindow имеют встроенные возможности перемеще-
        ния  и  масштабирования  с помощью "мыши" и клавиатуры. Они могут
        распахиваться  и  закрываться  отметкой  "мышью"  соответствующих
        пиктограмм. Они также "знают" как работать с полосами прокрутки и
        элементами  прокрутки. Окна с номерами от 1 до 9 могут выбираться
        клавишами Alt-n (n от 1 до 9).


                                        Поля
        -----------------------------------------------------------------

             Flags                                        (чтение/запись)
                  Flags: Byte;

             Поле Flags содержит комбинацию следующих бит:

                  ┌ TWindow.Flags ┐
             старший бит      младший бит

                  ╔═╤═╤═╤═╤═╤═╤═╤═╗
                  ╚╤╧═╧═╧╤╧╤╧╤╧╤╧╤╝
                   └──┬──┘ │ │ │ └─ wfMove  = $01
                      │    │ │ └─── wfGrow  = $02
              Не определено│ └───── wfClose = $04
                           └─────── wfZoom  = $08

             Описание  флагов  окна  см. в разделе "Константы флагов окна
        wfXXXX" настоящей главы.


             Frame                                    (только для чтения)
                  Frame: PFrame;

             Frame- это указатель на объект TFrame, связанный с окном.

             См. также: TWindow.InitFrame


             Number                                       (чтение/запись)
                  Number: Integer;

             Номер  этого окна. Если TWindow.Number находится в диапазоне
        1  -  9,  то  он будет появляться в заголовке рамки, и окно может
        быть выбрано клавишами Alt-n (n от 1 до 9).

         B.Pascal 7 & Objects/TV#2      - 357 -



             Palette                                     (чтение/запись)
                  Palette: Integer;

             Определяет,  какая   палитра  окна   будет   использоваться:
        wpBlueWindow,   wpCyanWindow,    wpGrayWindow.    По    умолчанию
        выбирается палитра wpBlueWindow.

             См. также: TWindow.GetPalette, константы wpXXXX


             Title                                        (чтение/запись)
                  Title: RString;

             Строка  символов, определяющая заголовок, который появляется
        в рамке.


             ZoomRect                                  (только для чтения)
                  ZoomRect: TRect;

             Нормальные границы окна (без учета "распахивания").


                                       Методы
        -----------------------------------------------------------------

             Init
                  constructor Init(var Bounds: TRect;
                                 ATitle: TTitleStr; ANumber: Integer);

             Создает отображаемый элемент окна с границами, переданными в
        Bounds, вызывая конструктор Init, унаследованный от TGroup. Уста-
        навливает State так,  чтобы она включала sfShadow.  Устанавливает
        Options   равным   (ofSelectable  +  ofTopSelect).  Устанавливает
        GrowMode равным gfGrowAll + gfGrowRel. Устанавливает Flags равным
        (wfMove  +  wfGrow + wfClose + wfZoom).  Устанавливает поле Title
        равным  NewStr(ATitle),  поле  Number  равным  ANumber.  Вызывает
        InitFrame, и если поле Frame не равно nil, вставляет его в группу
        окна. Наконец, устанавливает ZoomRect равным Bounds.

              См. также: TFrame.InitFrame


             Load
                  constructor Load(var S: TStream);

             Создает и загружает окно из потока S, вызывая сначала конст-
        руктор  Load, унаследованный от TGroup, а затем считывая дополни-
        тельные поля, введенные TWindow.

             См. также: TGroup.Load

         B.Pascal 7 & Objects/TV#2      - 358 -



             Done
                  destructor Done; virtual;

             Переопределяемость: иногда используется.

             Освобождает память окон и подэлементов.


             Close
                  procedure Close; virtual;

             Переопределяемость: используется редко.

             Вызывает  метод  окна  Valid  со  значением  Command, равным
        cmClose,  и  если  Valid возвращает True, закрывает окно, вызывая
        метод Done.


             GetPalette
                  function GetPalette: PPalette; virtual;

             Переопределяемость: иногда используется.

             Возвращает указатель на палитру, заданную индексом палитры в
        поле  Palette. В таблице 19.43 показаны палитры, возвращаемые для
        различных значений Palette.

        Таблица 19.43 Палитры окна, возвращаемые в зависимости от Palette

        -----------------------------------------------------------------
         Поле Palette       Возвращаемая палитра
        -----------------------------------------------------------------
         wpBlueWindow       CBlueWindow

         wpCyanWindow       CCyanWindow

         wpGrayWindow       CGrayWindow
        -----------------------------------------------------------------

             См. также: TWindowPalette


             GetTitle
                  function GetTitle(MaxSize: Integer): TTitleStr; virtual;

             Переопределяемость: переопределяется редко.

             Должен возвращать строку заголовка окна. Если строка заголо-
        вка  больше, чем MaxSize символов, то метод GetTitle должен пыта-
        ться укоротить ее, иначе она будет отсекаться отбрасыванием текс-
        та   сверх   MaxSize   символов.   Метод   TFrame.Draw   вызывает

         B.Pascal 7 & Objects/TV#2      - 359 -

        Owner^.GetTitle  для  получения  строки  текста,  отображаемой  в
        рамке.

             По  умолчанию  GetWindow.Title  возвращает строку Title^ или
        пустую строку, если поле Title равно nil.

             См. также: TWindow.Title, TFrame.Draw


             HandleEvent
                  procedure HandleEvent(var Event: TEvent); virtual;

             Переопределяемость: часто используется.

             Обрабатывает  большую  часть  событий, вызывая сначала метод
        HandleEvent,  унаследованный от TGroup, а затем обрабатывает спе-
        цифические для TWindow события следующим образом:

             События evCommand  обрабатываются,  если  поле TWindow.Flags
        разрешает эту операцию:

             -cmResize  (переместить  или изменить размер окна, с помощью
        метода TView.DrawView)

             -cmClose (закрыть окно, используя метод TWindow.Close)

             -cmZoom (распахнуть окно, используя метод TWindow.Zoom).

             События  evKeyDown  со  значением  KeyCode, равным kbTab или
        kbShiftTab обрабатываются, выбирая следующий или предыдущий выби-
        раемый подэлемент (если он существует).

             Событие   evBroadcast   со    значением   Command,    равным
        cmSelectWindowNum,    вызывает    выбор    окна,    если     поле
        Event.InfoInt равно TWindow.Number.

             См. также: TGroup.HandleEvent, константы wfXXXX


             InitFrame
                  procedure InitFrame; virtual;

             Переопределяемость: используется редко.

             Создает  объект TFrame для окна и сохраняет указатель на эту
        рамку в поле TWindow.Frame. InitFrame вызывается из TWindow.Init,
        и  никогда  не  должен  вызываться напрямую. InitFrame может быть
        переопределен  для создания объекта рамки, отличного от стандарт-
        ной.

             См. также: TWindow.Init



         B.Pascal 7 & Objects/TV#2      - 360 -

             SetState
                  procedure SetState(AState:  Word;
                                           Enable: Boolean); virtual;

             Переопределяемость: используется редко.

             Вначале  вызывает  метод SetState, унаследованный от TGroup.
        Затем, если AState равно sfSelected, активизирует или деактивизи-
        рует   окно   и    все   его    подэлементы,   используя    вызов
        SetState(sfActive,   Enable)   и   вызов TView.EnableCommands или
        TView.DisableCommands  для  cmNext,  cmPrev,  cmResize, cmClose и
        cmZoom.

             См. также:  TGroup.SetState, EnableCommands, DisableCommands


             SizeLimits
                  procedure SizeLimits(var Min, Max: TPoint); virtual;

             Переопределяемость: переопределяется редко.

             Вызывает  сначала метод SizeLimits, унаследованный от TView,
        а затем устанавливает Min равным MinWinSize.

             См. также:  TView.SizeLimits, переменную MinVinSize

             StandardScrollBar
                  function StandardScrollBar(AOptions: Word): PScrollBar;

             Создает,  вставляет  и возвращает указатель на "стандартную"
        полосу прокрутки для окна. "Стандартность" означает тот факт, что
        полоса  прокрутки вставляется в рамку окна, не закрывая углов или
        пиктограмм изменения размеров.

             Параметр  AOptions  может  быть  либо равен sbHorizontal для
        создания  горизонтальной  полосы прокрутки внизу окна, либо иметь
        значение  sbVertical для создания вертикальной полосы прокрутки в
        правой   стороне   окна,   либо   может   быть   скомбинирован  с
        sbHandleKeyboard,  чтобы  разрешить  полосе прокрутки откликаться
        на клавиши управления курсором, а не только на кнопки "мыши".

             См. также: константы полосы прокрутки sbXXXX


             Store
                  procedure TWindow.Store(var S: TStream);

             Сохраняет  окно  в  потоке  S,  вызывая сначала метод Store,
        унаследованный  от TGroup, а затем записывая дополнительные поля,
        введенные TWindow.

             См. также: TGroup.Store


         B.Pascal 7 & Objects/TV#2      - 361 -


             Zoom
                  procedure TWindow.Zoom; virtual;

             Переопределяемость: используется редко.

             Распахивает  окно.  Этот  метод обычно вызывается в ответ на
        команду cmZoom (генерируемую при отметке мышью пиктограммы распа-
        хивания  окна).  Zoom принимает во внимание относительные размеры
        окна и его владельца, а также значение ZoomRect.

             См. также: cmZoom, ZoomRect


                                      Палитра
        -----------------------------------------------------------------

             Объекты  окна  используют  по  умолчанию палитры CBlueWindow
        (для  текстовых  окон),  CCyanWindow   (для  окон  сообщений)   и
        CGrayWindow (для диалоговых окон).

                       1   2   3   4   5   6   7   8
                     ╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗
        CGrayWindow  ║ 24│ 25│ 26│ 27│ 28│ 29│ 30│ 31║
                     ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                     ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CCyanWindow  ║ 16│ 17│ 18│ 19│ 20│ 21│ 22│ 23║
                     ╠═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╣
                     ╠═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╣
        CBlueWindow  ║ 8 │ 9 │ 10│ 11│ 12│ 13│ 14│ 15║
                     ╚═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╧═╤═╝
                       │   │   │   │   │   │   │   │
        Пассивная ─────┘   │   │   │   │   │   │   └── Зарезервировано
        рамка              │   │   │   │   │   │
        Активная рамка ────┘   │   │   │   │   └──── Выделенный текст
                               │   │   │   │         прокрутки
        Пиктограмма         ───┘   │   │   └──────── Нормальный текст
        рамки                      │   │             элемента прокрутки
        Страница полосы ───────────┘   └──────────── Зарезервировано
        прокрутки




         B.Pascal 7 & Objects/TV#2      - 362 -

         Тип TWordArray                                         Objects
        -----------------------------------------------------------------

             Описание:  TWordArray = array[0..16383] of Word;

             Функция: Тип массива слов для общего использования.


         Константа vmtHeaderSize                                Objects
        -----------------------------------------------------------------

             Описание:
                  vmtHeaderSize = 8;

             Функция: Используется внутри потоков, наборов и отображаемых
        элементов в качестве смещения.


         Константы voXXXX                                       Validate
        -----------------------------------------------------------------

             Функция:  Константы,  начинающиеся с vo, представляют биты в
        битовом поле Options объекта определителя допустимости.

             Значения:  Options определителя допустимости определены сле-
        дующим образом:

             Рис. 19.15  Флаги опций определителя допустимости.

            ┌───────────────────────────────┐
            старший бит                     младший бит


            ╔═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╤═╗
            ╚╤╧═╧═╧═╧═╧═╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╝
             └────┬──────┘ │ │ │ │ │ │ │ │ └─── voFill    =    $0001
                  │        │ │ │ │ │ │ │ └───── voTransfer=    $0002
           Не определено   └─┴─┴─┴─┴─┴─┴─────── voReserved=    $0004



         B.Pascal 7 & Objects/TV#2      - 363 -


             Таблица 19.44  Флаги опций определителя допустимости.

        -----------------------------------------------------------------
         Константа     Значение       Описание
        -----------------------------------------------------------------

         voFill        $0001          Используется картинками
                                      допустимости  для  указания   того,
                                      вводить  ли  буквенные  символы  по
                                      мере того, как пользователь  вводит
                                      их.

         voTransfer    $0002          Определитель допустимости
                                      обрабатывает  передачу  данных  для
                                      строки  ввода.  В  настоящее  время
                                      используется  лишь   определителями
                                      диапазонов допустимости.

         voReserved    $0004          Биты в этой маски зарезервированы
                                      фирмой Borland
        -----------------------------------------------------------------


         Константы vsXXXX                                       Validate
        -----------------------------------------------------------------

             Функция:  Объекты  строк  ввода используют vsOK для проверки
        того,  что  связанные  с  ними объекты определителей допустимости
        созданы  правильно. При вызове с параметром команды cmValid метод
        Valid объекта строки ввода проверяет значение поля Status опреде-
        лителя  допустимости.  Если  Status  равен  vsOK, то Valid строки
        ввода  возвращает True, что указывает на готовность объекта опре-
        делителя допустимости к использованию.

             Единственная величина, определенная для Status и отличная от
        vsOK,  это vsSyntax, которая используется TPXPictureValidator для
        указания  того,  что он не смог интерпретировать строку картинки,
        переданную  ему.  При  создании собственных объектов определителя
        допустимости  можно определять коды ошибок и передавать их в поле
        Status.

         B.Pascal 7 & Objects/TV#2      - 364 -


             Значения:  Модуль Validate определяет две константы, исполь-
        зуемые  объектами  определителя  допустимости для сообщения об их
        состоянии:


             Таблица 19.45  Константы состояния определителя допустимости

        -----------------------------------------------------------------
         Константа     Значение       Описание
        -----------------------------------------------------------------
          vsOK            0           Определитель допустимости создан
                                      правильно

          vsSyntax        1           Ошибка в синтаксисе картинки
                                      допустимости
        -----------------------------------------------------------------

         B.Pascal 7 & Objects/TV#2      - 365 -

         Константы wfXXXX                                       Views
        -----------------------------------------------------------------

             Функция:  Эти  мнемонические  обозначения  определяют биты в
        поле Flags объектов TWindow. Если биты установлены, то окно будет
        иметь соответствующие атрибуты: окно может перемещаться, изменять
        размер, закрываться или распахиваться.

             Значения: Флаги окна определены следующим образом:

                          ┌ TWindow.Flags ┐
                          │               │
                 старший бит             младший бит
                          ╔═╤═╤═╤═╤═╤═╤═╤═╗
                          ╚╤╧═╧═╧╤╧╤╧╤╧╤╧╤╝
                           └──┬──┘ │ │ │ └─ wfMove  = $01
                              │    │ │ └─── wfGrow  = $02
                       Неопределены│ └───── wfClose = $04
                                   └─────── wfZoom  = $08

                    Таблица 19.46. Константы флагов окна.

        -----------------------------------------------------------------
         Константа Значение   Смысл
        -----------------------------------------------------------------
         wfMove    $01      Окно можно перемещать

         wfGrow    $02      Окно может изменять размеры и иметь в правом
                            нижнем углу соответствующую пиктограмму

         wfClose   $04      Рамка окна имеет пиктограмму закрытия

         wfZoom    $08      Рамка окна имеет пиктограмму распахивания
        -----------------------------------------------------------------

             Если  отдельный  бит  установлен, то соответствующая возмож-
        ность имеется, в противном случае, эта возможность отсутствует.

             См. также: TWindows.Flags




         B.Pascal 7 & Objects/TV#2      - 366 -

         Функция WindowColorItems                               ColorSel
        -----------------------------------------------------------------

             Описание:
                  function WindowColorItems (Palette: Word;
                                 const Next: PColorItem): PColorItem;

             Функция: Возвращает связанный список записей типа TColorItem
        для  стандартных объектов окна. Для программ, позволяющих пользо-
        вателю  изменять  цвета окна с помощью диалогового окна изменения
        цветов,  WindowColorItems  упрощает  процесс  установки элементов
        цветов.


         Константa wnNoNumber                                   Views
        -----------------------------------------------------------------

             Описание:  wnNoNumber = 0;

             Функция:  Если поле TWindow.Number объекта окна содержит эту
        константу,  то это указывает на то, что окно не имеет номера и не
        может выбираться с помощью комбинации клавиш Alt-номер. Если поле
        Number  находится  в интервале от 1 до 9, то в рамке отображается
        номер окна, и доступен выбор окна по клавише Alt-номер.

             См. также: TWindow.Number


         Переменная WordChars                                   Editors
        -----------------------------------------------------------------

             Описание:
                  WordChars: set of Char = ['0'..'9',
                                                'A'..'Z', '_', 'a'..'z'];

             Функция:  Объекты редактора используют WordChars для опреде-
        ления  того,  является ли символ частью слова. Такие функции, как
        перемещение  курсора  и поиск целых слов, должны знать, где слова
        начинаются и заканчиваются.


         B.Pascal 7 & Objects/TV#2      - 367 -

         Тип WordRec                                            Objects
        -----------------------------------------------------------------

             Описание:  WordRec = record
                           Lo, Hi: Byte;
                         end;

             Функция:  Запись, позволяющая осуществлять доступ к младшему
        Lo и старшему Hi битам слова.

             См. также: LongRec


         Константы wpXXXX                                       Views
        -----------------------------------------------------------------

             Функция:  Эти  константы определяют три стандартных цветовых
        набора  для  окон.  По  умолчанию,  объект  TWindow имеет палитру
        wpBlueWindow.   По  умолчанию,   объект  TDialog  имеет   палитру
        wpGrayWindow.

             Значения: Turbo Vision определяет эти три стандартных палит-
        ры окна следующим образом:

             Таблица 19.47. Стандартные палитры окна.

        -----------------------------------------------------------------
             Константа      Значение  Назначение
        -----------------------------------------------------------------

             wpBlueWindow   0         Желтый текст на синем

             wpCuanWindow   1         Синий текст на голубом

             wpGrayWindow   2         Черный текст на сером
        -----------------------------------------------------------------

             См. также: TWindow.Palette, TWindow.GetPalette
